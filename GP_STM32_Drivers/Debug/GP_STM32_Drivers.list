
GP_STM32_Drivers.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002de4  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002f14  08002f14  00012f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f54  08002f54  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f54  08002f54  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f54  08002f54  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f54  08002f54  00012f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f58  08002f58  00012f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004164  2000000c  08002f68  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004170  08002f68  00024170  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000657e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001841  00000000  00000000  000265f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00002efa  00000000  00000000  00027e37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000660  00000000  00000000  0002ad38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000578  00000000  00000000  0002b398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003eac  00000000  00000000  0002b910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009392  00000000  00000000  0002f7bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0001b14f  00000000  00000000  00038b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001720  00000000  00000000  00053ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000000c 	.word	0x2000000c
 800014c:	00000000 	.word	0x00000000
 8000150:	08002efc 	.word	0x08002efc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000010 	.word	0x20000010
 800016c:	08002efc 	.word	0x08002efc

08000170 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	f103 0208 	add.w	r2, r3, #8
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f04f 32ff 	mov.w	r2, #4294967295
 8000188:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f103 0208 	add.w	r2, r3, #8
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	f103 0208 	add.w	r2, r3, #8
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr

080001ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001ae:	b480      	push	{r7}
 80001b0:	b083      	sub	sp, #12
 80001b2:	af00      	add	r7, sp, #0
 80001b4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2200      	movs	r2, #0
 80001ba:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001bc:	bf00      	nop
 80001be:	370c      	adds	r7, #12
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr

080001c6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80001c6:	b480      	push	{r7}
 80001c8:	b085      	sub	sp, #20
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	6078      	str	r0, [r7, #4]
 80001ce:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80001d0:	683b      	ldr	r3, [r7, #0]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80001d6:	68bb      	ldr	r3, [r7, #8]
 80001d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001dc:	d103      	bne.n	80001e6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	691b      	ldr	r3, [r3, #16]
 80001e2:	60fb      	str	r3, [r7, #12]
 80001e4:	e00c      	b.n	8000200 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	3308      	adds	r3, #8
 80001ea:	60fb      	str	r3, [r7, #12]
 80001ec:	e002      	b.n	80001f4 <vListInsert+0x2e>
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	685b      	ldr	r3, [r3, #4]
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	685b      	ldr	r3, [r3, #4]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	68ba      	ldr	r2, [r7, #8]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	d2f6      	bcs.n	80001ee <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	685a      	ldr	r2, [r3, #4]
 8000204:	683b      	ldr	r3, [r7, #0]
 8000206:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000208:	683b      	ldr	r3, [r7, #0]
 800020a:	685b      	ldr	r3, [r3, #4]
 800020c:	683a      	ldr	r2, [r7, #0]
 800020e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000210:	683b      	ldr	r3, [r7, #0]
 8000212:	68fa      	ldr	r2, [r7, #12]
 8000214:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	683a      	ldr	r2, [r7, #0]
 800021a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	687a      	ldr	r2, [r7, #4]
 8000220:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	1c5a      	adds	r2, r3, #1
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	601a      	str	r2, [r3, #0]
}
 800022c:	bf00      	nop
 800022e:	3714      	adds	r7, #20
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr

08000236 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000236:	b480      	push	{r7}
 8000238:	b085      	sub	sp, #20
 800023a:	af00      	add	r7, sp, #0
 800023c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	691b      	ldr	r3, [r3, #16]
 8000242:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	687a      	ldr	r2, [r7, #4]
 800024a:	6892      	ldr	r2, [r2, #8]
 800024c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	6852      	ldr	r2, [r2, #4]
 8000256:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	687a      	ldr	r2, [r7, #4]
 800025e:	429a      	cmp	r2, r3
 8000260:	d103      	bne.n	800026a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	689a      	ldr	r2, [r3, #8]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2200      	movs	r2, #0
 800026e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	1e5a      	subs	r2, r3, #1
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	681b      	ldr	r3, [r3, #0]
}
 800027e:	4618      	mov	r0, r3
 8000280:	3714      	adds	r7, #20
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr

08000288 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000288:	b580      	push	{r7, lr}
 800028a:	b08c      	sub	sp, #48	; 0x30
 800028c:	af04      	add	r7, sp, #16
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	603b      	str	r3, [r7, #0]
 8000294:	4613      	mov	r3, r2
 8000296:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000298:	88fb      	ldrh	r3, [r7, #6]
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	4618      	mov	r0, r3
 800029e:	f000 fe2f 	bl	8000f00 <pvPortMalloc>
 80002a2:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80002a4:	697b      	ldr	r3, [r7, #20]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d013      	beq.n	80002d2 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80002aa:	2054      	movs	r0, #84	; 0x54
 80002ac:	f000 fe28 	bl	8000f00 <pvPortMalloc>
 80002b0:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80002b2:	69fb      	ldr	r3, [r7, #28]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d008      	beq.n	80002ca <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80002b8:	2254      	movs	r2, #84	; 0x54
 80002ba:	2100      	movs	r1, #0
 80002bc:	69f8      	ldr	r0, [r7, #28]
 80002be:	f002 fdf1 	bl	8002ea4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80002c2:	69fb      	ldr	r3, [r7, #28]
 80002c4:	697a      	ldr	r2, [r7, #20]
 80002c6:	631a      	str	r2, [r3, #48]	; 0x30
 80002c8:	e005      	b.n	80002d6 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80002ca:	6978      	ldr	r0, [r7, #20]
 80002cc:	f000 fe6a 	bl	8000fa4 <vPortFree>
 80002d0:	e001      	b.n	80002d6 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80002d2:	2300      	movs	r3, #0
 80002d4:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80002d6:	69fb      	ldr	r3, [r7, #28]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d013      	beq.n	8000304 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80002dc:	88fa      	ldrh	r2, [r7, #6]
 80002de:	2300      	movs	r3, #0
 80002e0:	9303      	str	r3, [sp, #12]
 80002e2:	69fb      	ldr	r3, [r7, #28]
 80002e4:	9302      	str	r3, [sp, #8]
 80002e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002ec:	9300      	str	r3, [sp, #0]
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	68b9      	ldr	r1, [r7, #8]
 80002f2:	68f8      	ldr	r0, [r7, #12]
 80002f4:	f000 f80e 	bl	8000314 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80002f8:	69f8      	ldr	r0, [r7, #28]
 80002fa:	f000 f873 	bl	80003e4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80002fe:	2301      	movs	r3, #1
 8000300:	61bb      	str	r3, [r7, #24]
 8000302:	e002      	b.n	800030a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000304:	f04f 33ff 	mov.w	r3, #4294967295
 8000308:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800030a:	69bb      	ldr	r3, [r7, #24]
    }
 800030c:	4618      	mov	r0, r3
 800030e:	3720      	adds	r7, #32
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}

08000314 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af00      	add	r7, sp, #0
 800031a:	60f8      	str	r0, [r7, #12]
 800031c:	60b9      	str	r1, [r7, #8]
 800031e:	607a      	str	r2, [r7, #4]
 8000320:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800032c:	3b01      	subs	r3, #1
 800032e:	009b      	lsls	r3, r3, #2
 8000330:	4413      	add	r3, r2
 8000332:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000334:	693b      	ldr	r3, [r7, #16]
 8000336:	f023 0307 	bic.w	r3, r3, #7
 800033a:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d01e      	beq.n	8000380 <prvInitialiseNewTask+0x6c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000342:	2300      	movs	r3, #0
 8000344:	617b      	str	r3, [r7, #20]
 8000346:	e012      	b.n	800036e <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000348:	68ba      	ldr	r2, [r7, #8]
 800034a:	697b      	ldr	r3, [r7, #20]
 800034c:	4413      	add	r3, r2
 800034e:	7819      	ldrb	r1, [r3, #0]
 8000350:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000352:	697b      	ldr	r3, [r7, #20]
 8000354:	4413      	add	r3, r2
 8000356:	3334      	adds	r3, #52	; 0x34
 8000358:	460a      	mov	r2, r1
 800035a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800035c:	68ba      	ldr	r2, [r7, #8]
 800035e:	697b      	ldr	r3, [r7, #20]
 8000360:	4413      	add	r3, r2
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d006      	beq.n	8000376 <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	3301      	adds	r3, #1
 800036c:	617b      	str	r3, [r7, #20]
 800036e:	697b      	ldr	r3, [r7, #20]
 8000370:	2b0f      	cmp	r3, #15
 8000372:	d9e9      	bls.n	8000348 <prvInitialiseNewTask+0x34>
 8000374:	e000      	b.n	8000378 <prvInitialiseNewTask+0x64>
            {
                break;
 8000376:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800037a:	2200      	movs	r2, #0
 800037c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000380:	6a3b      	ldr	r3, [r7, #32]
 8000382:	2b04      	cmp	r3, #4
 8000384:	d901      	bls.n	800038a <prvInitialiseNewTask+0x76>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000386:	2304      	movs	r3, #4
 8000388:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800038a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800038c:	6a3a      	ldr	r2, [r7, #32]
 800038e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000392:	6a3a      	ldr	r2, [r7, #32]
 8000394:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000398:	3304      	adds	r3, #4
 800039a:	4618      	mov	r0, r3
 800039c:	f7ff ff07 	bl	80001ae <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80003a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003a2:	3318      	adds	r3, #24
 80003a4:	4618      	mov	r0, r3
 80003a6:	f7ff ff02 	bl	80001ae <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80003aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80003ae:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80003b0:	6a3b      	ldr	r3, [r7, #32]
 80003b2:	f1c3 0205 	rsb	r2, r3, #5
 80003b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003b8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80003ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80003be:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80003c0:	683a      	ldr	r2, [r7, #0]
 80003c2:	68f9      	ldr	r1, [r7, #12]
 80003c4:	6938      	ldr	r0, [r7, #16]
 80003c6:	f000 fc75 	bl	8000cb4 <pxPortInitialiseStack>
 80003ca:	4602      	mov	r2, r0
 80003cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003ce:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80003d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d002      	beq.n	80003dc <prvInitialiseNewTask+0xc8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80003d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80003da:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80003dc:	bf00      	nop
 80003de:	3718      	adds	r7, #24
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80003ec:	f000 fcee 	bl	8000dcc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80003f0:	4b3e      	ldr	r3, [pc, #248]	; (80004ec <prvAddNewTaskToReadyList+0x108>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	3301      	adds	r3, #1
 80003f6:	4a3d      	ldr	r2, [pc, #244]	; (80004ec <prvAddNewTaskToReadyList+0x108>)
 80003f8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80003fa:	4b3d      	ldr	r3, [pc, #244]	; (80004f0 <prvAddNewTaskToReadyList+0x10c>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d109      	bne.n	8000416 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000402:	4a3b      	ldr	r2, [pc, #236]	; (80004f0 <prvAddNewTaskToReadyList+0x10c>)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000408:	4b38      	ldr	r3, [pc, #224]	; (80004ec <prvAddNewTaskToReadyList+0x108>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2b01      	cmp	r3, #1
 800040e:	d110      	bne.n	8000432 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000410:	f000 fb38 	bl	8000a84 <prvInitialiseTaskLists>
 8000414:	e00d      	b.n	8000432 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000416:	4b37      	ldr	r3, [pc, #220]	; (80004f4 <prvAddNewTaskToReadyList+0x110>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d109      	bne.n	8000432 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800041e:	4b34      	ldr	r3, [pc, #208]	; (80004f0 <prvAddNewTaskToReadyList+0x10c>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000428:	429a      	cmp	r2, r3
 800042a:	d802      	bhi.n	8000432 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800042c:	4a30      	ldr	r2, [pc, #192]	; (80004f0 <prvAddNewTaskToReadyList+0x10c>)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000432:	4b31      	ldr	r3, [pc, #196]	; (80004f8 <prvAddNewTaskToReadyList+0x114>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	3301      	adds	r3, #1
 8000438:	4a2f      	ldr	r2, [pc, #188]	; (80004f8 <prvAddNewTaskToReadyList+0x114>)
 800043a:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000440:	2201      	movs	r2, #1
 8000442:	409a      	lsls	r2, r3
 8000444:	4b2d      	ldr	r3, [pc, #180]	; (80004fc <prvAddNewTaskToReadyList+0x118>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4313      	orrs	r3, r2
 800044a:	4a2c      	ldr	r2, [pc, #176]	; (80004fc <prvAddNewTaskToReadyList+0x118>)
 800044c:	6013      	str	r3, [r2, #0]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000452:	492b      	ldr	r1, [pc, #172]	; (8000500 <prvAddNewTaskToReadyList+0x11c>)
 8000454:	4613      	mov	r3, r2
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	4413      	add	r3, r2
 800045a:	009b      	lsls	r3, r3, #2
 800045c:	440b      	add	r3, r1
 800045e:	3304      	adds	r3, #4
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	68fa      	ldr	r2, [r7, #12]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	689a      	ldr	r2, [r3, #8]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	60da      	str	r2, [r3, #12]
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	689b      	ldr	r3, [r3, #8]
 8000476:	687a      	ldr	r2, [r7, #4]
 8000478:	3204      	adds	r2, #4
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	1d1a      	adds	r2, r3, #4
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	609a      	str	r2, [r3, #8]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000488:	4613      	mov	r3, r2
 800048a:	009b      	lsls	r3, r3, #2
 800048c:	4413      	add	r3, r2
 800048e:	009b      	lsls	r3, r3, #2
 8000490:	4a1b      	ldr	r2, [pc, #108]	; (8000500 <prvAddNewTaskToReadyList+0x11c>)
 8000492:	441a      	add	r2, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	615a      	str	r2, [r3, #20]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800049c:	4918      	ldr	r1, [pc, #96]	; (8000500 <prvAddNewTaskToReadyList+0x11c>)
 800049e:	4613      	mov	r3, r2
 80004a0:	009b      	lsls	r3, r3, #2
 80004a2:	4413      	add	r3, r2
 80004a4:	009b      	lsls	r3, r3, #2
 80004a6:	440b      	add	r3, r1
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	1c59      	adds	r1, r3, #1
 80004ac:	4814      	ldr	r0, [pc, #80]	; (8000500 <prvAddNewTaskToReadyList+0x11c>)
 80004ae:	4613      	mov	r3, r2
 80004b0:	009b      	lsls	r3, r3, #2
 80004b2:	4413      	add	r3, r2
 80004b4:	009b      	lsls	r3, r3, #2
 80004b6:	4403      	add	r3, r0
 80004b8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80004ba:	f000 fca1 	bl	8000e00 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80004be:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <prvAddNewTaskToReadyList+0x110>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d00e      	beq.n	80004e4 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80004c6:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <prvAddNewTaskToReadyList+0x10c>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d207      	bcs.n	80004e4 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80004d4:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <prvAddNewTaskToReadyList+0x120>)
 80004d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	f3bf 8f4f 	dsb	sy
 80004e0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80004e4:	bf00      	nop
 80004e6:	3710      	adds	r7, #16
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000100 	.word	0x20000100
 80004f0:	20000028 	.word	0x20000028
 80004f4:	2000010c 	.word	0x2000010c
 80004f8:	2000011c 	.word	0x2000011c
 80004fc:	20000108 	.word	0x20000108
 8000500:	2000002c 	.word	0x2000002c
 8000504:	e000ed04 	.word	0xe000ed04

08000508 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000510:	2300      	movs	r3, #0
 8000512:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d008      	beq.n	800052c <vTaskDelay+0x24>
        {
            configASSERT( uxSchedulerSuspended == 0 );
            vTaskSuspendAll();
 800051a:	f000 f855 	bl	80005c8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800051e:	2100      	movs	r1, #0
 8000520:	6878      	ldr	r0, [r7, #4]
 8000522:	f000 fb47 	bl	8000bb4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000526:	f000 f85d 	bl	80005e4 <xTaskResumeAll>
 800052a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d107      	bne.n	8000542 <vTaskDelay+0x3a>
        {
            portYIELD_WITHIN_API();
 8000532:	4b06      	ldr	r3, [pc, #24]	; (800054c <vTaskDelay+0x44>)
 8000534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	f3bf 8f4f 	dsb	sy
 800053e:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000542:	bf00      	nop
 8000544:	3710      	adds	r7, #16
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	e000ed04 	.word	0xe000ed04

08000550 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <vTaskStartScheduler+0x5c>)
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	2300      	movs	r3, #0
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	2300      	movs	r3, #0
 8000560:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000564:	4912      	ldr	r1, [pc, #72]	; (80005b0 <vTaskStartScheduler+0x60>)
 8000566:	4813      	ldr	r0, [pc, #76]	; (80005b4 <vTaskStartScheduler+0x64>)
 8000568:	f7ff fe8e 	bl	8000288 <xTaskCreate>
 800056c:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d115      	bne.n	80005a0 <vTaskStartScheduler+0x50>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000574:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000578:	f383 8811 	msr	BASEPRI, r3
 800057c:	f3bf 8f6f 	isb	sy
 8000580:	f3bf 8f4f 	dsb	sy
 8000584:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000586:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000588:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <vTaskStartScheduler+0x68>)
 800058a:	f04f 32ff 	mov.w	r2, #4294967295
 800058e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000590:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <vTaskStartScheduler+0x6c>)
 8000592:	2201      	movs	r2, #1
 8000594:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000596:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <vTaskStartScheduler+0x70>)
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800059c:	f000 fbf6 	bl	8000d8c <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80005a0:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <vTaskStartScheduler+0x74>)
 80005a2:	681b      	ldr	r3, [r3, #0]
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000124 	.word	0x20000124
 80005b0:	08002f14 	.word	0x08002f14
 80005b4:	08000a55 	.word	0x08000a55
 80005b8:	20000120 	.word	0x20000120
 80005bc:	2000010c 	.word	0x2000010c
 80005c0:	20000104 	.word	0x20000104
 80005c4:	20000000 	.word	0x20000000

080005c8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80005cc:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <vTaskSuspendAll+0x18>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	3301      	adds	r3, #1
 80005d2:	4a03      	ldr	r2, [pc, #12]	; (80005e0 <vTaskSuspendAll+0x18>)
 80005d4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80005d6:	bf00      	nop
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000128 	.word	0x20000128

080005e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80005f2:	f000 fbeb 	bl	8000dcc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80005f6:	4b68      	ldr	r3, [pc, #416]	; (8000798 <xTaskResumeAll+0x1b4>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	3b01      	subs	r3, #1
 80005fc:	4a66      	ldr	r2, [pc, #408]	; (8000798 <xTaskResumeAll+0x1b4>)
 80005fe:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000600:	4b65      	ldr	r3, [pc, #404]	; (8000798 <xTaskResumeAll+0x1b4>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	f040 80c0 	bne.w	800078a <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800060a:	4b64      	ldr	r3, [pc, #400]	; (800079c <xTaskResumeAll+0x1b8>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	f000 80bb 	beq.w	800078a <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000614:	e08a      	b.n	800072c <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000616:	4b62      	ldr	r3, [pc, #392]	; (80007a0 <xTaskResumeAll+0x1bc>)
 8000618:	68db      	ldr	r3, [r3, #12]
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	69db      	ldr	r3, [r3, #28]
 8000628:	697a      	ldr	r2, [r7, #20]
 800062a:	6a12      	ldr	r2, [r2, #32]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	6a1b      	ldr	r3, [r3, #32]
 8000632:	697a      	ldr	r2, [r7, #20]
 8000634:	69d2      	ldr	r2, [r2, #28]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	685a      	ldr	r2, [r3, #4]
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	3318      	adds	r3, #24
 8000640:	429a      	cmp	r2, r3
 8000642:	d103      	bne.n	800064c <xTaskResumeAll+0x68>
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	6a1a      	ldr	r2, [r3, #32]
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	2200      	movs	r2, #0
 8000650:	629a      	str	r2, [r3, #40]	; 0x28
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	1e5a      	subs	r2, r3, #1
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	695b      	ldr	r3, [r3, #20]
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	697a      	ldr	r2, [r7, #20]
 8000668:	68d2      	ldr	r2, [r2, #12]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	697a      	ldr	r2, [r7, #20]
 8000672:	6892      	ldr	r2, [r2, #8]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	685a      	ldr	r2, [r3, #4]
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	3304      	adds	r3, #4
 800067e:	429a      	cmp	r2, r3
 8000680:	d103      	bne.n	800068a <xTaskResumeAll+0xa6>
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	68da      	ldr	r2, [r3, #12]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	2200      	movs	r2, #0
 800068e:	615a      	str	r2, [r3, #20]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	1e5a      	subs	r2, r3, #1
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800069e:	2201      	movs	r2, #1
 80006a0:	409a      	lsls	r2, r3
 80006a2:	4b40      	ldr	r3, [pc, #256]	; (80007a4 <xTaskResumeAll+0x1c0>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4313      	orrs	r3, r2
 80006a8:	4a3e      	ldr	r2, [pc, #248]	; (80007a4 <xTaskResumeAll+0x1c0>)
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006b0:	493d      	ldr	r1, [pc, #244]	; (80007a8 <xTaskResumeAll+0x1c4>)
 80006b2:	4613      	mov	r3, r2
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	4413      	add	r3, r2
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	440b      	add	r3, r1
 80006bc:	3304      	adds	r3, #4
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	683a      	ldr	r2, [r7, #0]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	689a      	ldr	r2, [r3, #8]
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	689b      	ldr	r3, [r3, #8]
 80006d4:	697a      	ldr	r2, [r7, #20]
 80006d6:	3204      	adds	r2, #4
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	1d1a      	adds	r2, r3, #4
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006e6:	4613      	mov	r3, r2
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	4413      	add	r3, r2
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	4a2e      	ldr	r2, [pc, #184]	; (80007a8 <xTaskResumeAll+0x1c4>)
 80006f0:	441a      	add	r2, r3
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	615a      	str	r2, [r3, #20]
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006fa:	492b      	ldr	r1, [pc, #172]	; (80007a8 <xTaskResumeAll+0x1c4>)
 80006fc:	4613      	mov	r3, r2
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	4413      	add	r3, r2
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	440b      	add	r3, r1
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	1c59      	adds	r1, r3, #1
 800070a:	4827      	ldr	r0, [pc, #156]	; (80007a8 <xTaskResumeAll+0x1c4>)
 800070c:	4613      	mov	r3, r2
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	4413      	add	r3, r2
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	4403      	add	r3, r0
 8000716:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800071c:	4b23      	ldr	r3, [pc, #140]	; (80007ac <xTaskResumeAll+0x1c8>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000722:	429a      	cmp	r2, r3
 8000724:	d302      	bcc.n	800072c <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 8000726:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <xTaskResumeAll+0x1cc>)
 8000728:	2201      	movs	r2, #1
 800072a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800072c:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <xTaskResumeAll+0x1bc>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	f47f af70 	bne.w	8000616 <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800073c:	f000 fa20 	bl	8000b80 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000740:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <xTaskResumeAll+0x1d0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d010      	beq.n	800076e <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800074c:	f000 f836 	bl	80007bc <xTaskIncrementTick>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d002      	beq.n	800075c <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <xTaskResumeAll+0x1cc>)
 8000758:	2201      	movs	r2, #1
 800075a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	3b01      	subs	r3, #1
 8000760:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d1f1      	bne.n	800074c <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <xTaskResumeAll+0x1d0>)
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <xTaskResumeAll+0x1cc>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d009      	beq.n	800078a <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8000776:	2301      	movs	r3, #1
 8000778:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <xTaskResumeAll+0x1d4>)
 800077c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	f3bf 8f4f 	dsb	sy
 8000786:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800078a:	f000 fb39 	bl	8000e00 <vPortExitCritical>

    return xAlreadyYielded;
 800078e:	693b      	ldr	r3, [r7, #16]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3718      	adds	r7, #24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000128 	.word	0x20000128
 800079c:	20000100 	.word	0x20000100
 80007a0:	200000c0 	.word	0x200000c0
 80007a4:	20000108 	.word	0x20000108
 80007a8:	2000002c 	.word	0x2000002c
 80007ac:	20000028 	.word	0x20000028
 80007b0:	20000114 	.word	0x20000114
 80007b4:	20000110 	.word	0x20000110
 80007b8:	e000ed04 	.word	0xe000ed04

080007bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80007c6:	4b75      	ldr	r3, [pc, #468]	; (800099c <xTaskIncrementTick+0x1e0>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	f040 80dc 	bne.w	8000988 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80007d0:	4b73      	ldr	r3, [pc, #460]	; (80009a0 <xTaskIncrementTick+0x1e4>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	3301      	adds	r3, #1
 80007d6:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80007d8:	4a71      	ldr	r2, [pc, #452]	; (80009a0 <xTaskIncrementTick+0x1e4>)
 80007da:	69bb      	ldr	r3, [r7, #24]
 80007dc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80007de:	69bb      	ldr	r3, [r7, #24]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d110      	bne.n	8000806 <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 80007e4:	4b6f      	ldr	r3, [pc, #444]	; (80009a4 <xTaskIncrementTick+0x1e8>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	4b6f      	ldr	r3, [pc, #444]	; (80009a8 <xTaskIncrementTick+0x1ec>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a6d      	ldr	r2, [pc, #436]	; (80009a4 <xTaskIncrementTick+0x1e8>)
 80007f0:	6013      	str	r3, [r2, #0]
 80007f2:	4a6d      	ldr	r2, [pc, #436]	; (80009a8 <xTaskIncrementTick+0x1ec>)
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	6013      	str	r3, [r2, #0]
 80007f8:	4b6c      	ldr	r3, [pc, #432]	; (80009ac <xTaskIncrementTick+0x1f0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	3301      	adds	r3, #1
 80007fe:	4a6b      	ldr	r2, [pc, #428]	; (80009ac <xTaskIncrementTick+0x1f0>)
 8000800:	6013      	str	r3, [r2, #0]
 8000802:	f000 f9bd 	bl	8000b80 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000806:	4b6a      	ldr	r3, [pc, #424]	; (80009b0 <xTaskIncrementTick+0x1f4>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	69ba      	ldr	r2, [r7, #24]
 800080c:	429a      	cmp	r2, r3
 800080e:	f0c0 80a6 	bcc.w	800095e <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000812:	4b64      	ldr	r3, [pc, #400]	; (80009a4 <xTaskIncrementTick+0x1e8>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d104      	bne.n	8000826 <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800081c:	4b64      	ldr	r3, [pc, #400]	; (80009b0 <xTaskIncrementTick+0x1f4>)
 800081e:	f04f 32ff 	mov.w	r2, #4294967295
 8000822:	601a      	str	r2, [r3, #0]
                    break;
 8000824:	e09b      	b.n	800095e <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000826:	4b5f      	ldr	r3, [pc, #380]	; (80009a4 <xTaskIncrementTick+0x1e8>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	68db      	ldr	r3, [r3, #12]
 800082e:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8000836:	69ba      	ldr	r2, [r7, #24]
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	429a      	cmp	r2, r3
 800083c:	d203      	bcs.n	8000846 <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800083e:	4a5c      	ldr	r2, [pc, #368]	; (80009b0 <xTaskIncrementTick+0x1f4>)
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000844:	e08b      	b.n	800095e <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	693a      	ldr	r2, [r7, #16]
 8000852:	68d2      	ldr	r2, [r2, #12]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	693b      	ldr	r3, [r7, #16]
 8000858:	68db      	ldr	r3, [r3, #12]
 800085a:	693a      	ldr	r2, [r7, #16]
 800085c:	6892      	ldr	r2, [r2, #8]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	693b      	ldr	r3, [r7, #16]
 8000866:	3304      	adds	r3, #4
 8000868:	429a      	cmp	r2, r3
 800086a:	d103      	bne.n	8000874 <xTaskIncrementTick+0xb8>
 800086c:	693b      	ldr	r3, [r7, #16]
 800086e:	68da      	ldr	r2, [r3, #12]
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	693b      	ldr	r3, [r7, #16]
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	1e5a      	subs	r2, r3, #1
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000884:	693b      	ldr	r3, [r7, #16]
 8000886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000888:	2b00      	cmp	r3, #0
 800088a:	d01e      	beq.n	80008ca <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	69db      	ldr	r3, [r3, #28]
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	6a12      	ldr	r2, [r2, #32]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	693b      	ldr	r3, [r7, #16]
 800089e:	6a1b      	ldr	r3, [r3, #32]
 80008a0:	693a      	ldr	r2, [r7, #16]
 80008a2:	69d2      	ldr	r2, [r2, #28]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	685a      	ldr	r2, [r3, #4]
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	3318      	adds	r3, #24
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d103      	bne.n	80008ba <xTaskIncrementTick+0xfe>
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	6a1a      	ldr	r2, [r3, #32]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	693b      	ldr	r3, [r7, #16]
 80008bc:	2200      	movs	r2, #0
 80008be:	629a      	str	r2, [r3, #40]	; 0x28
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	1e5a      	subs	r2, r3, #1
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80008ca:	693b      	ldr	r3, [r7, #16]
 80008cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ce:	2201      	movs	r2, #1
 80008d0:	409a      	lsls	r2, r3
 80008d2:	4b38      	ldr	r3, [pc, #224]	; (80009b4 <xTaskIncrementTick+0x1f8>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	4a36      	ldr	r2, [pc, #216]	; (80009b4 <xTaskIncrementTick+0x1f8>)
 80008da:	6013      	str	r3, [r2, #0]
 80008dc:	693b      	ldr	r3, [r7, #16]
 80008de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008e0:	4935      	ldr	r1, [pc, #212]	; (80009b8 <xTaskIncrementTick+0x1fc>)
 80008e2:	4613      	mov	r3, r2
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	4413      	add	r3, r2
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	440b      	add	r3, r1
 80008ec:	3304      	adds	r3, #4
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	693b      	ldr	r3, [r7, #16]
 80008f4:	683a      	ldr	r2, [r7, #0]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	689a      	ldr	r2, [r3, #8]
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	3204      	adds	r2, #4
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	1d1a      	adds	r2, r3, #4
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000916:	4613      	mov	r3, r2
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	4413      	add	r3, r2
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	4a26      	ldr	r2, [pc, #152]	; (80009b8 <xTaskIncrementTick+0x1fc>)
 8000920:	441a      	add	r2, r3
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	615a      	str	r2, [r3, #20]
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800092a:	4923      	ldr	r1, [pc, #140]	; (80009b8 <xTaskIncrementTick+0x1fc>)
 800092c:	4613      	mov	r3, r2
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	4413      	add	r3, r2
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	440b      	add	r3, r1
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	1c59      	adds	r1, r3, #1
 800093a:	481f      	ldr	r0, [pc, #124]	; (80009b8 <xTaskIncrementTick+0x1fc>)
 800093c:	4613      	mov	r3, r2
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	4413      	add	r3, r2
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	4403      	add	r3, r0
 8000946:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800094c:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <xTaskIncrementTick+0x200>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000952:	429a      	cmp	r2, r3
 8000954:	f67f af5d 	bls.w	8000812 <xTaskIncrementTick+0x56>
                        {
                            xSwitchRequired = pdTRUE;
 8000958:	2301      	movs	r3, #1
 800095a:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800095c:	e759      	b.n	8000812 <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <xTaskIncrementTick+0x200>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000964:	4914      	ldr	r1, [pc, #80]	; (80009b8 <xTaskIncrementTick+0x1fc>)
 8000966:	4613      	mov	r3, r2
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	4413      	add	r3, r2
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	440b      	add	r3, r1
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d901      	bls.n	800097a <xTaskIncrementTick+0x1be>
            {
                xSwitchRequired = pdTRUE;
 8000976:	2301      	movs	r3, #1
 8000978:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <xTaskIncrementTick+0x204>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d007      	beq.n	8000992 <xTaskIncrementTick+0x1d6>
            {
                xSwitchRequired = pdTRUE;
 8000982:	2301      	movs	r3, #1
 8000984:	61fb      	str	r3, [r7, #28]
 8000986:	e004      	b.n	8000992 <xTaskIncrementTick+0x1d6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <xTaskIncrementTick+0x208>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	3301      	adds	r3, #1
 800098e:	4a0d      	ldr	r2, [pc, #52]	; (80009c4 <xTaskIncrementTick+0x208>)
 8000990:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8000992:	69fb      	ldr	r3, [r7, #28]
}
 8000994:	4618      	mov	r0, r3
 8000996:	3720      	adds	r7, #32
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000128 	.word	0x20000128
 80009a0:	20000104 	.word	0x20000104
 80009a4:	200000b8 	.word	0x200000b8
 80009a8:	200000bc 	.word	0x200000bc
 80009ac:	20000118 	.word	0x20000118
 80009b0:	20000120 	.word	0x20000120
 80009b4:	20000108 	.word	0x20000108
 80009b8:	2000002c 	.word	0x2000002c
 80009bc:	20000028 	.word	0x20000028
 80009c0:	20000114 	.word	0x20000114
 80009c4:	20000110 	.word	0x20000110

080009c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80009ce:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <vTaskSwitchContext+0x78>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d003      	beq.n	80009de <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80009d6:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <vTaskSwitchContext+0x7c>)
 80009d8:	2201      	movs	r2, #1
 80009da:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80009dc:	e02a      	b.n	8000a34 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 80009de:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <vTaskSwitchContext+0x7c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80009e4:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <vTaskSwitchContext+0x80>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	fab3 f383 	clz	r3, r3
 80009f0:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 80009f2:	78fb      	ldrb	r3, [r7, #3]
 80009f4:	f1c3 031f 	rsb	r3, r3, #31
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	4613      	mov	r3, r2
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	4413      	add	r3, r2
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	4a11      	ldr	r2, [pc, #68]	; (8000a4c <vTaskSwitchContext+0x84>)
 8000a06:	4413      	add	r3, r2
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	685a      	ldr	r2, [r3, #4]
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	685a      	ldr	r2, [r3, #4]
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	3308      	adds	r3, #8
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d104      	bne.n	8000a2a <vTaskSwitchContext+0x62>
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	685a      	ldr	r2, [r3, #4]
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <vTaskSwitchContext+0x88>)
 8000a32:	6013      	str	r3, [r2, #0]
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000128 	.word	0x20000128
 8000a44:	20000114 	.word	0x20000114
 8000a48:	20000108 	.word	0x20000108
 8000a4c:	2000002c 	.word	0x2000002c
 8000a50:	20000028 	.word	0x20000028

08000a54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000a5c:	f000 f852 	bl	8000b04 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <prvIdleTask+0x28>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d9f9      	bls.n	8000a5c <prvIdleTask+0x8>
            {
                taskYIELD();
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <prvIdleTask+0x2c>)
 8000a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	f3bf 8f4f 	dsb	sy
 8000a74:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8000a78:	e7f0      	b.n	8000a5c <prvIdleTask+0x8>
 8000a7a:	bf00      	nop
 8000a7c:	2000002c 	.word	0x2000002c
 8000a80:	e000ed04 	.word	0xe000ed04

08000a84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	e00c      	b.n	8000aaa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	4613      	mov	r3, r2
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	4413      	add	r3, r2
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <prvInitialiseTaskLists+0x60>)
 8000a9c:	4413      	add	r3, r2
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff fb66 	bl	8000170 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b04      	cmp	r3, #4
 8000aae:	d9ef      	bls.n	8000a90 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000ab0:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <prvInitialiseTaskLists+0x64>)
 8000ab2:	f7ff fb5d 	bl	8000170 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000ab6:	480d      	ldr	r0, [pc, #52]	; (8000aec <prvInitialiseTaskLists+0x68>)
 8000ab8:	f7ff fb5a 	bl	8000170 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000abc:	480c      	ldr	r0, [pc, #48]	; (8000af0 <prvInitialiseTaskLists+0x6c>)
 8000abe:	f7ff fb57 	bl	8000170 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8000ac2:	480c      	ldr	r0, [pc, #48]	; (8000af4 <prvInitialiseTaskLists+0x70>)
 8000ac4:	f7ff fb54 	bl	8000170 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8000ac8:	480b      	ldr	r0, [pc, #44]	; (8000af8 <prvInitialiseTaskLists+0x74>)
 8000aca:	f7ff fb51 	bl	8000170 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <prvInitialiseTaskLists+0x78>)
 8000ad0:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <prvInitialiseTaskLists+0x64>)
 8000ad2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <prvInitialiseTaskLists+0x7c>)
 8000ad6:	4a05      	ldr	r2, [pc, #20]	; (8000aec <prvInitialiseTaskLists+0x68>)
 8000ad8:	601a      	str	r2, [r3, #0]
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	2000002c 	.word	0x2000002c
 8000ae8:	20000090 	.word	0x20000090
 8000aec:	200000a4 	.word	0x200000a4
 8000af0:	200000c0 	.word	0x200000c0
 8000af4:	200000d4 	.word	0x200000d4
 8000af8:	200000ec 	.word	0x200000ec
 8000afc:	200000b8 	.word	0x200000b8
 8000b00:	200000bc 	.word	0x200000bc

08000b04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000b0a:	e019      	b.n	8000b40 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8000b0c:	f000 f95e 	bl	8000dcc <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000b10:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <prvCheckTasksWaitingTermination+0x50>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3304      	adds	r3, #4
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fb8a 	bl	8000236 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8000b22:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <prvCheckTasksWaitingTermination+0x54>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <prvCheckTasksWaitingTermination+0x54>)
 8000b2a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <prvCheckTasksWaitingTermination+0x58>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	3b01      	subs	r3, #1
 8000b32:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <prvCheckTasksWaitingTermination+0x58>)
 8000b34:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8000b36:	f000 f963 	bl	8000e00 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f000 f810 	bl	8000b60 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <prvCheckTasksWaitingTermination+0x58>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d1e1      	bne.n	8000b0c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8000b48:	bf00      	nop
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200000d4 	.word	0x200000d4
 8000b58:	20000100 	.word	0x20000100
 8000b5c:	200000e8 	.word	0x200000e8

08000b60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 fa19 	bl	8000fa4 <vPortFree>
            vPortFree( pxTCB );
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f000 fa16 	bl	8000fa4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <prvResetNextTaskUnblockTime+0x2c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d104      	bne.n	8000b98 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <prvResetNextTaskUnblockTime+0x30>)
 8000b90:	f04f 32ff 	mov.w	r2, #4294967295
 8000b94:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8000b96:	e005      	b.n	8000ba4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <prvResetNextTaskUnblockTime+0x2c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a03      	ldr	r2, [pc, #12]	; (8000bb0 <prvResetNextTaskUnblockTime+0x30>)
 8000ba2:	6013      	str	r3, [r2, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr
 8000bac:	200000b8 	.word	0x200000b8
 8000bb0:	20000120 	.word	0x20000120

08000bb4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8000bbe:	4b36      	ldr	r3, [pc, #216]	; (8000c98 <prvAddCurrentTaskToDelayedList+0xe4>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000bc4:	4b35      	ldr	r3, [pc, #212]	; (8000c9c <prvAddCurrentTaskToDelayedList+0xe8>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	3304      	adds	r3, #4
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fb33 	bl	8000236 <uxListRemove>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d10b      	bne.n	8000bee <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8000bd6:	4b31      	ldr	r3, [pc, #196]	; (8000c9c <prvAddCurrentTaskToDelayedList+0xe8>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bdc:	2201      	movs	r2, #1
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43da      	mvns	r2, r3
 8000be4:	4b2e      	ldr	r3, [pc, #184]	; (8000ca0 <prvAddCurrentTaskToDelayedList+0xec>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4013      	ands	r3, r2
 8000bea:	4a2d      	ldr	r2, [pc, #180]	; (8000ca0 <prvAddCurrentTaskToDelayedList+0xec>)
 8000bec:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf4:	d124      	bne.n	8000c40 <prvAddCurrentTaskToDelayedList+0x8c>
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d021      	beq.n	8000c40 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000bfc:	4b29      	ldr	r3, [pc, #164]	; (8000ca4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	4b26      	ldr	r3, [pc, #152]	; (8000c9c <prvAddCurrentTaskToDelayedList+0xe8>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	4b24      	ldr	r3, [pc, #144]	; (8000c9c <prvAddCurrentTaskToDelayedList+0xe8>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	6892      	ldr	r2, [r2, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <prvAddCurrentTaskToDelayedList+0xe8>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	3204      	adds	r2, #4
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <prvAddCurrentTaskToDelayedList+0xe8>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	1d1a      	adds	r2, r3, #4
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <prvAddCurrentTaskToDelayedList+0xe8>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a1d      	ldr	r2, [pc, #116]	; (8000ca4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8000c30:	615a      	str	r2, [r3, #20]
 8000c32:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	3301      	adds	r3, #1
 8000c38:	4a1a      	ldr	r2, [pc, #104]	; (8000ca4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8000c3a:	6013      	str	r3, [r2, #0]
 8000c3c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8000c3e:	e026      	b.n	8000c8e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <prvAddCurrentTaskToDelayedList+0xe8>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	68fa      	ldr	r2, [r7, #12]
 8000c4e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8000c50:	68fa      	ldr	r2, [r7, #12]
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d209      	bcs.n	8000c6c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000c58:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <prvAddCurrentTaskToDelayedList+0xe8>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	3304      	adds	r3, #4
 8000c62:	4619      	mov	r1, r3
 8000c64:	4610      	mov	r0, r2
 8000c66:	f7ff faae 	bl	80001c6 <vListInsert>
}
 8000c6a:	e010      	b.n	8000c8e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <prvAddCurrentTaskToDelayedList+0xf8>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <prvAddCurrentTaskToDelayedList+0xe8>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	3304      	adds	r3, #4
 8000c76:	4619      	mov	r1, r3
 8000c78:	4610      	mov	r0, r2
 8000c7a:	f7ff faa4 	bl	80001c6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d202      	bcs.n	8000c8e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8000c88:	4a09      	ldr	r2, [pc, #36]	; (8000cb0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	6013      	str	r3, [r2, #0]
}
 8000c8e:	bf00      	nop
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000104 	.word	0x20000104
 8000c9c:	20000028 	.word	0x20000028
 8000ca0:	20000108 	.word	0x20000108
 8000ca4:	200000ec 	.word	0x200000ec
 8000ca8:	200000bc 	.word	0x200000bc
 8000cac:	200000b8 	.word	0x200000b8
 8000cb0:	20000120 	.word	0x20000120

08000cb4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	3b04      	subs	r3, #4
 8000cc4:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ccc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	3b04      	subs	r3, #4
 8000cd2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	f023 0201 	bic.w	r2, r3, #1
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	3b04      	subs	r3, #4
 8000ce2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000ce4:	4a08      	ldr	r2, [pc, #32]	; (8000d08 <pxPortInitialiseStack+0x54>)
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	3b14      	subs	r3, #20
 8000cee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	3b20      	subs	r3, #32
 8000cfa:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr
 8000d08:	08000d0d 	.word	0x08000d0d

08000d0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000d16:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000d1a:	f383 8811 	msr	BASEPRI, r3
 8000d1e:	f3bf 8f6f 	isb	sy
 8000d22:	f3bf 8f4f 	dsb	sy
 8000d26:	607b      	str	r3, [r7, #4]
    }
 8000d28:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000d2a:	bf00      	nop
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d0fc      	beq.n	8000d2c <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000d32:	bf00      	nop
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr
	...

08000d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <pxCurrentTCBConst2>)
 8000d42:	6819      	ldr	r1, [r3, #0]
 8000d44:	6808      	ldr	r0, [r1, #0]
 8000d46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000d4a:	f380 8809 	msr	PSP, r0
 8000d4e:	f3bf 8f6f 	isb	sy
 8000d52:	f04f 0000 	mov.w	r0, #0
 8000d56:	f380 8811 	msr	BASEPRI, r0
 8000d5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8000d5e:	4770      	bx	lr

08000d60 <pxCurrentTCBConst2>:
 8000d60:	20000028 	.word	0x20000028
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop

08000d68 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8000d68:	4806      	ldr	r0, [pc, #24]	; (8000d84 <prvPortStartFirstTask+0x1c>)
 8000d6a:	6800      	ldr	r0, [r0, #0]
 8000d6c:	6800      	ldr	r0, [r0, #0]
 8000d6e:	f380 8808 	msr	MSP, r0
 8000d72:	b662      	cpsie	i
 8000d74:	b661      	cpsie	f
 8000d76:	f3bf 8f4f 	dsb	sy
 8000d7a:	f3bf 8f6f 	isb	sy
 8000d7e:	df00      	svc	0
 8000d80:	bf00      	nop
 8000d82:	0000      	.short	0x0000
 8000d84:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000d88:	bf00      	nop
 8000d8a:	bf00      	nop

08000d8c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
        *pucFirstUserPriorityRegister = ulOriginalPriority;
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <xPortStartScheduler+0x38>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0b      	ldr	r2, [pc, #44]	; (8000dc4 <xPortStartScheduler+0x38>)
 8000d96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8000d9a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <xPortStartScheduler+0x38>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <xPortStartScheduler+0x38>)
 8000da2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000da6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8000da8:	f000 f890 	bl	8000ecc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <xPortStartScheduler+0x3c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8000db2:	f7ff ffd9 	bl	8000d68 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8000db6:	f7ff fe07 	bl	80009c8 <vTaskSwitchContext>
    prvTaskExitError();
 8000dba:	f7ff ffa7 	bl	8000d0c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8000dbe:	2300      	movs	r3, #0
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	e000ed20 	.word	0xe000ed20
 8000dc8:	20000004 	.word	0x20000004

08000dcc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
        __asm volatile
 8000dd2:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000dd6:	f383 8811 	msr	BASEPRI, r3
 8000dda:	f3bf 8f6f 	isb	sy
 8000dde:	f3bf 8f4f 	dsb	sy
 8000de2:	607b      	str	r3, [r7, #4]
    }
 8000de4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8000de6:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <vPortEnterCritical+0x30>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	3301      	adds	r3, #1
 8000dec:	4a03      	ldr	r2, [pc, #12]	; (8000dfc <vPortEnterCritical+0x30>)
 8000dee:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000004 	.word	0x20000004

08000e00 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <vPortExitCritical+0x30>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	4a08      	ldr	r2, [pc, #32]	; (8000e30 <vPortExitCritical+0x30>)
 8000e0e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8000e10:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <vPortExitCritical+0x30>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d105      	bne.n	8000e24 <vPortExitCritical+0x24>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000e22:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000004 	.word	0x20000004
	...

08000e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000e40:	f3ef 8009 	mrs	r0, PSP
 8000e44:	f3bf 8f6f 	isb	sy
 8000e48:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <pxCurrentTCBConst>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000e50:	6010      	str	r0, [r2, #0]
 8000e52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000e56:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8000e5a:	f380 8811 	msr	BASEPRI, r0
 8000e5e:	f7ff fdb3 	bl	80009c8 <vTaskSwitchContext>
 8000e62:	f04f 0000 	mov.w	r0, #0
 8000e66:	f380 8811 	msr	BASEPRI, r0
 8000e6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000e6e:	6819      	ldr	r1, [r3, #0]
 8000e70:	6808      	ldr	r0, [r1, #0]
 8000e72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000e76:	f380 8809 	msr	PSP, r0
 8000e7a:	f3bf 8f6f 	isb	sy
 8000e7e:	4770      	bx	lr

08000e80 <pxCurrentTCBConst>:
 8000e80:	20000028 	.word	0x20000028
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000e84:	bf00      	nop
 8000e86:	bf00      	nop

08000e88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
        __asm volatile
 8000e8e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000e92:	f383 8811 	msr	BASEPRI, r3
 8000e96:	f3bf 8f6f 	isb	sy
 8000e9a:	f3bf 8f4f 	dsb	sy
 8000e9e:	607b      	str	r3, [r7, #4]
    }
 8000ea0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000ea2:	f7ff fc8b 	bl	80007bc <xTaskIncrementTick>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d003      	beq.n	8000eb4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <SysTick_Handler+0x40>)
 8000eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	f383 8811 	msr	BASEPRI, r3
    }
 8000ebe:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	e000ed04 	.word	0xe000ed04

08000ecc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <vPortSetupTimerInterrupt+0x28>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <vPortSetupTimerInterrupt+0x2c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000edc:	4b07      	ldr	r3, [pc, #28]	; (8000efc <vPortSetupTimerInterrupt+0x30>)
 8000ede:	f646 525f 	movw	r2, #27999	; 0x6d5f
 8000ee2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <vPortSetupTimerInterrupt+0x28>)
 8000ee6:	2207      	movs	r2, #7
 8000ee8:	601a      	str	r2, [r3, #0]
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000e010 	.word	0xe000e010
 8000ef8:	e000e018 	.word	0xe000e018
 8000efc:	e000e014 	.word	0xe000e014

08000f00 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d00e      	beq.n	8000f34 <pvPortMalloc+0x34>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f023 0307 	bic.w	r3, r3, #7
 8000f1c:	3308      	adds	r3, #8
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d205      	bcs.n	8000f30 <pvPortMalloc+0x30>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f023 0307 	bic.w	r3, r3, #7
 8000f2a:	3308      	adds	r3, #8
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	e001      	b.n	8000f34 <pvPortMalloc+0x34>
            }
            else
            {
                xWantedSize = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 8000f34:	f7ff fb48 	bl	80005c8 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8000f38:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <pvPortMalloc+0x98>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d105      	bne.n	8000f4c <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8000f40:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <pvPortMalloc+0x9c>)
 8000f42:	f023 0307 	bic.w	r3, r3, #7
 8000f46:	461a      	mov	r2, r3
 8000f48:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <pvPortMalloc+0x98>)
 8000f4a:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d01b      	beq.n	8000f8a <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8000f52:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <pvPortMalloc+0xa0>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8000f5a:	f643 6277 	movw	r2, #15991	; 0x3e77
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d813      	bhi.n	8000f8a <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <pvPortMalloc+0xa0>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	441a      	add	r2, r3
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <pvPortMalloc+0xa0>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d90b      	bls.n	8000f8a <pvPortMalloc+0x8a>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <pvPortMalloc+0x98>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <pvPortMalloc+0xa0>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <pvPortMalloc+0xa0>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	4a06      	ldr	r2, [pc, #24]	; (8000fa0 <pvPortMalloc+0xa0>)
 8000f88:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8000f8a:	f7ff fb2b 	bl	80005e4 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20003fb0 	.word	0x20003fb0
 8000f9c:	20000133 	.word	0x20000133
 8000fa0:	20003fac 	.word	0x20003fac

08000fa4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
	...

08000fb8 <clock_init>:
//}



void clock_init(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

	//Enable clock to AFIO
	AFIO_GPIO_CLK_EN();
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <clock_init+0x3c>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4a0c      	ldr	r2, [pc, #48]	; (8000ff4 <clock_init+0x3c>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6193      	str	r3, [r2, #24]
	//Enable clock to port A
	RCC_GPIOA_CLK_EN();
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <clock_init+0x3c>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	4a09      	ldr	r2, [pc, #36]	; (8000ff4 <clock_init+0x3c>)
 8000fce:	f043 0304 	orr.w	r3, r3, #4
 8000fd2:	6193      	str	r3, [r2, #24]
	//Enable clock to port B
	RCC_GPIOB_CLK_EN();
 8000fd4:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <clock_init+0x3c>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <clock_init+0x3c>)
 8000fda:	f043 0308 	orr.w	r3, r3, #8
 8000fde:	6193      	str	r3, [r2, #24]
	//Enable clock to port C
	RCC_GPIOC_CLK_EN();
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <clock_init+0x3c>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a03      	ldr	r2, [pc, #12]	; (8000ff4 <clock_init+0x3c>)
 8000fe6:	f043 0310 	orr.w	r3, r3, #16
 8000fea:	6193      	str	r3, [r2, #24]

}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr
 8000ff4:	40021000 	.word	0x40021000

08000ff8 <HW_Init>:




void HW_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b096      	sub	sp, #88	; 0x58
 8000ffc:	af00      	add	r7, sp, #0
	//////////////////////////*///////////////////////////////////////

	GPIO_PinConfig_t PinConfig;

	// Test Led
	PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000ffe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001002:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 8001006:	2304      	movs	r3, #4
 8001008:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M ;
 800100c:	2301      	movs	r3, #1
 800100e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	MCAL_GPIO_Init(GPIOC, &PinConfig);
 8001012:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001016:	4619      	mov	r1, r3
 8001018:	4864      	ldr	r0, [pc, #400]	; (80011ac <HW_Init+0x1b4>)
 800101a:	f000 fcfd 	bl	8001a18 <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(GPIOC, GPIO_PIN_13 , 1);
 800101e:	2201      	movs	r2, #1
 8001020:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001024:	4861      	ldr	r0, [pc, #388]	; (80011ac <HW_Init+0x1b4>)
 8001026:	f000 fd8d 	bl	8001b44 <MCAL_GPIO_WritePin>

	GPIO_PinConfig_t PinConfig1;


	// TX , RX For Sensor 1
	PinConfig1.GPIO_PinNumber = GPIO_PIN_8;
 800102a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800102e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	PinConfig1.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 8001032:	2304      	movs	r3, #4
 8001034:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	PinConfig1.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8001038:	2301      	movs	r3, #1
 800103a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	MCAL_GPIO_Init(GPIOB, &PinConfig1);
 800103e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001042:	4619      	mov	r1, r3
 8001044:	485a      	ldr	r0, [pc, #360]	; (80011b0 <HW_Init+0x1b8>)
 8001046:	f000 fce7 	bl	8001a18 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_9;
 800104a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800104e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_PD;
 8001052:	2303      	movs	r3, #3
 8001054:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	MCAL_GPIO_Init(GPIOB, &PinConfig);
 8001058:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800105c:	4619      	mov	r1, r3
 800105e:	4854      	ldr	r0, [pc, #336]	; (80011b0 <HW_Init+0x1b8>)
 8001060:	f000 fcda 	bl	8001a18 <MCAL_GPIO_Init>


	// TX , RX For Sensor 2
	PinConfig1.GPIO_PinNumber = GPIO_PIN_14;
 8001064:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001068:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	PinConfig1.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 800106c:	2304      	movs	r3, #4
 800106e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	PinConfig1.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8001072:	2301      	movs	r3, #1
 8001074:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	MCAL_GPIO_Init(GPIOB, &PinConfig1);
 8001078:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800107c:	4619      	mov	r1, r3
 800107e:	484c      	ldr	r0, [pc, #304]	; (80011b0 <HW_Init+0x1b8>)
 8001080:	f000 fcca 	bl	8001a18 <MCAL_GPIO_Init>

	PinConfig1.GPIO_PinNumber = GPIO_PIN_15;
 8001084:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001088:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	PinConfig1.GPIO_MODE = GPIO_MODE_INPUT_PD;
 800108c:	2303      	movs	r3, #3
 800108e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	MCAL_GPIO_Init(GPIOB, &PinConfig1);
 8001092:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001096:	4619      	mov	r1, r3
 8001098:	4845      	ldr	r0, [pc, #276]	; (80011b0 <HW_Init+0x1b8>)
 800109a:	f000 fcbd 	bl	8001a18 <MCAL_GPIO_Init>


	// TX , RX For Sensor 3
	PinConfig1.GPIO_PinNumber = GPIO_PIN_12;
 800109e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	PinConfig1.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 80010a6:	2304      	movs	r3, #4
 80010a8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	PinConfig1.GPIO_Output_Speed = GPIO_SPEED_10M ;
 80010ac:	2301      	movs	r3, #1
 80010ae:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	MCAL_GPIO_Init(GPIOB, &PinConfig1);
 80010b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80010b6:	4619      	mov	r1, r3
 80010b8:	483d      	ldr	r0, [pc, #244]	; (80011b0 <HW_Init+0x1b8>)
 80010ba:	f000 fcad 	bl	8001a18 <MCAL_GPIO_Init>

	PinConfig1.GPIO_PinNumber = GPIO_PIN_13;
 80010be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010c2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	PinConfig1.GPIO_MODE = GPIO_MODE_INPUT_PD;
 80010c6:	2303      	movs	r3, #3
 80010c8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	MCAL_GPIO_Init(GPIOB, &PinConfig1);
 80010cc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80010d0:	4619      	mov	r1, r3
 80010d2:	4837      	ldr	r0, [pc, #220]	; (80011b0 <HW_Init+0x1b8>)
 80010d4:	f000 fca0 	bl	8001a18 <MCAL_GPIO_Init>


	// TX , RX For Sensor 4
	PinConfig1.GPIO_PinNumber = GPIO_PIN_11;
 80010d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010dc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	PinConfig1.GPIO_MODE = GPIO_MODE_OUTPUT_PP ;
 80010e0:	2304      	movs	r3, #4
 80010e2:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	PinConfig1.GPIO_Output_Speed = GPIO_SPEED_10M ;
 80010e6:	2301      	movs	r3, #1
 80010e8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	MCAL_GPIO_Init(GPIOA, &PinConfig1);
 80010ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80010f0:	4619      	mov	r1, r3
 80010f2:	4830      	ldr	r0, [pc, #192]	; (80011b4 <HW_Init+0x1bc>)
 80010f4:	f000 fc90 	bl	8001a18 <MCAL_GPIO_Init>

	PinConfig1.GPIO_PinNumber = GPIO_PIN_12;
 80010f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	PinConfig1.GPIO_MODE = GPIO_MODE_INPUT_PD;
 8001100:	2303      	movs	r3, #3
 8001102:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	MCAL_GPIO_Init(GPIOA, &PinConfig1);
 8001106:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800110a:	4619      	mov	r1, r3
 800110c:	4829      	ldr	r0, [pc, #164]	; (80011b4 <HW_Init+0x1bc>)
 800110e:	f000 fc83 	bl	8001a18 <MCAL_GPIO_Init>

	I2C_Config_t I2C1CFG ;

	//I2C Controller act as Master

	I2C1CFG.General_Call_Adress_Detection = I2C_ENGC_Enable ;
 8001112:	2340      	movs	r3, #64	; 0x40
 8001114:	64bb      	str	r3, [r7, #72]	; 0x48
	I2C1CFG.I2C_ACK_Control = I2C_ACK_Enable ;
 8001116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800111a:	647b      	str	r3, [r7, #68]	; 0x44
	I2C1CFG.I2C_ClockSpeed = I2C_SCLK_SM_100K ;
 800111c:	4b26      	ldr	r3, [pc, #152]	; (80011b8 <HW_Init+0x1c0>)
 800111e:	62fb      	str	r3, [r7, #44]	; 0x2c
	I2C1CFG.I2C_Mode =I2C_Mode_I2C ;
 8001120:	2300      	movs	r3, #0
 8001122:	637b      	str	r3, [r7, #52]	; 0x34
	I2C1CFG.P_Slave_Event_CallBack = NULL ;
 8001124:	2300      	movs	r3, #0
 8001126:	64fb      	str	r3, [r7, #76]	; 0x4c
	I2C1CFG.StrechMode = I2C_StretchMode_Enable ;
 8001128:	2300      	movs	r3, #0
 800112a:	633b      	str	r3, [r7, #48]	; 0x30

	MCAL_I2C_GPIO_Set_Pins(I2C1);
 800112c:	4823      	ldr	r0, [pc, #140]	; (80011bc <HW_Init+0x1c4>)
 800112e:	f000 ff9d 	bl	800206c <MCAL_I2C_GPIO_Set_Pins>
	MCAL_I2C_Init(I2C1, &I2C1CFG);
 8001132:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001136:	4619      	mov	r1, r3
 8001138:	4820      	ldr	r0, [pc, #128]	; (80011bc <HW_Init+0x1c4>)
 800113a:	f000 fe87 	bl	8001e4c <MCAL_I2C_Init>
	//////////////////////////*///////////////////////////////////////
	//======================= UART INIT =====================//

	USART_Config_t USART1_config ;

	USART1_config.BaudRate = UART_BaudRate_115200 ;
 800113e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001142:	61fb      	str	r3, [r7, #28]
	USART1_config.HwFlowCtl = UART_HWFlowCtrl_NONE ;
 8001144:	2300      	movs	r3, #0
 8001146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	USART1_config.IRQ_Enable = UART_IRQ_Enable_NONE ;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	USART1_config.Parity = UART_Parity_NONE ;
 8001150:	2300      	movs	r3, #0
 8001152:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	USART1_config.Payload_Length = UART_Payload_Length_8B ;
 8001156:	2300      	movs	r3, #0
 8001158:	f887 3020 	strb.w	r3, [r7, #32]
	USART1_config.StopBits = UART_StopBits_1 ;
 800115c:	2300      	movs	r3, #0
 800115e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	USART1_config.USART_Mode = UART_Mode_RX;
 8001162:	2304      	movs	r3, #4
 8001164:	763b      	strb	r3, [r7, #24]


	MCAL_UART_Init(USART1, &USART1_config);
 8001166:	f107 0318 	add.w	r3, r7, #24
 800116a:	4619      	mov	r1, r3
 800116c:	4814      	ldr	r0, [pc, #80]	; (80011c0 <HW_Init+0x1c8>)
 800116e:	f001 fcb9 	bl	8002ae4 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 8001172:	4813      	ldr	r0, [pc, #76]	; (80011c0 <HW_Init+0x1c8>)
 8001174:	f001 fde8 	bl	8002d48 <MCAL_UART_GPIO_Set_Pins>
	//////////////////////////*///////////////////////////////////////
	//======================= TIM3 INIT =====================//

	TIM_Config_t timer_config ;

	timer_config.TIM_Mode =  TIM_Mode_Counter;
 8001178:	2301      	movs	r3, #1
 800117a:	803b      	strh	r3, [r7, #0]
	timer_config.Counter.Count_Direction =Count_Direction_UP;
 800117c:	2300      	movs	r3, #0
 800117e:	723b      	strb	r3, [r7, #8]
	timer_config.Prescaler = 8 ;
 8001180:	2308      	movs	r3, #8
 8001182:	807b      	strh	r3, [r7, #2]
	timer_config.Auto_Reload_Value = 0xFFFF ;
 8001184:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001188:	80fb      	strh	r3, [r7, #6]
	timer_config.IRQ_Enable = TIM_IRQ_MODE_None  ;
 800118a:	2300      	movs	r3, #0
 800118c:	823b      	strh	r3, [r7, #16]
	timer_config.P_IRQ_CallBack = NULL ;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]

	MCAL_TIM_Init(TIM3,&timer_config);
 8001192:	463b      	mov	r3, r7
 8001194:	4619      	mov	r1, r3
 8001196:	480b      	ldr	r0, [pc, #44]	; (80011c4 <HW_Init+0x1cc>)
 8001198:	f001 f94c 	bl	8002434 <MCAL_TIM_Init>
	MCAL_TIM_Count_Reset(TIM3);
 800119c:	4809      	ldr	r0, [pc, #36]	; (80011c4 <HW_Init+0x1cc>)
 800119e:	f001 fc65 	bl	8002a6c <MCAL_TIM_Count_Reset>
}
 80011a2:	bf00      	nop
 80011a4:	3758      	adds	r7, #88	; 0x58
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40011000 	.word	0x40011000
 80011b0:	40010c00 	.word	0x40010c00
 80011b4:	40010800 	.word	0x40010800
 80011b8:	000186a0 	.word	0x000186a0
 80011bc:	40005400 	.word	0x40005400
 80011c0:	40013800 	.word	0x40013800
 80011c4:	40000400 	.word	0x40000400

080011c8 <main>:


int main(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af02      	add	r7, sp, #8

	//////////////////////////*///////////////////////////////////////
	//////////////////////////*///////////////////////////////////////

	clock_init();
 80011ce:	f7ff fef3 	bl	8000fb8 <clock_init>
	HW_Init();
 80011d2:	f7ff ff11 	bl	8000ff8 <HW_Init>

	//////////////////////////*///////////////////////////////////////
	//////////////////////////*///////////////////////////////////////
	/***************Task Creation*////////////

	xTaskCreate(vUART_ComunicationWithTabHandler,"Driver State", 128 , NULL , 2 , vUART_ComunicationWithTab);
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <main+0x58>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	2302      	movs	r3, #2
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2300      	movs	r3, #0
 80011e2:	2280      	movs	r2, #128	; 0x80
 80011e4:	490f      	ldr	r1, [pc, #60]	; (8001224 <main+0x5c>)
 80011e6:	4810      	ldr	r0, [pc, #64]	; (8001228 <main+0x60>)
 80011e8:	f7ff f84e 	bl	8000288 <xTaskCreate>
	xTaskCreate(vReadUltraonicSensorHandler,"UltrSonic", 128 , NULL , 3 , vReadUltraonicSensor);
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <main+0x64>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	9301      	str	r3, [sp, #4]
 80011f2:	2303      	movs	r3, #3
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	2300      	movs	r3, #0
 80011f8:	2280      	movs	r2, #128	; 0x80
 80011fa:	490d      	ldr	r1, [pc, #52]	; (8001230 <main+0x68>)
 80011fc:	480d      	ldr	r0, [pc, #52]	; (8001234 <main+0x6c>)
 80011fe:	f7ff f843 	bl	8000288 <xTaskCreate>
	xTaskCreate(vI2C_CommunicateWithAtmega32Handler,"I2C", 128 , NULL , 4 , vI2C_CommunicateWithAtmega32);
 8001202:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <main+0x70>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	9301      	str	r3, [sp, #4]
 8001208:	2304      	movs	r3, #4
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2300      	movs	r3, #0
 800120e:	2280      	movs	r2, #128	; 0x80
 8001210:	490a      	ldr	r1, [pc, #40]	; (800123c <main+0x74>)
 8001212:	480b      	ldr	r0, [pc, #44]	; (8001240 <main+0x78>)
 8001214:	f7ff f838 	bl	8000288 <xTaskCreate>

	//////////////////////////*///////////////////////////////////////
	//////////////////////////*///////////////////////////////////////

	vTaskStartScheduler();
 8001218:	f7ff f99a 	bl	8000550 <vTaskStartScheduler>

	while (1)
 800121c:	e7fe      	b.n	800121c <main+0x54>
 800121e:	bf00      	nop
 8001220:	20003fe8 	.word	0x20003fe8
 8001224:	08002f1c 	.word	0x08002f1c
 8001228:	08001245 	.word	0x08001245
 800122c:	20003fec 	.word	0x20003fec
 8001230:	08002f2c 	.word	0x08002f2c
 8001234:	08001261 	.word	0x08001261
 8001238:	20003ff0 	.word	0x20003ff0
 800123c:	08002f38 	.word	0x08002f38
 8001240:	080014ad 	.word	0x080014ad

08001244 <vUART_ComunicationWithTabHandler>:


///////////////////******///////////////////

void vUART_ComunicationWithTabHandler(void *parms)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	while (1)
	{
		MCAL_UART_ReceiveData(USART1,&Recieved_Data, enable);
 800124c:	2200      	movs	r2, #0
 800124e:	4902      	ldr	r1, [pc, #8]	; (8001258 <vUART_ComunicationWithTabHandler+0x14>)
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <vUART_ComunicationWithTabHandler+0x18>)
 8001252:	f001 fd2d 	bl	8002cb0 <MCAL_UART_ReceiveData>
 8001256:	e7f9      	b.n	800124c <vUART_ComunicationWithTabHandler+0x8>
 8001258:	20000008 	.word	0x20000008
 800125c:	40013800 	.word	0x40013800

08001260 <vReadUltraonicSensorHandler>:

///////////////////******///////////////////


void vReadUltraonicSensorHandler(void *parms)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	while (1)
	{
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_8 , 0); //Pull the trigger low
 8001268:	2200      	movs	r2, #0
 800126a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800126e:	4883      	ldr	r0, [pc, #524]	; (800147c <vReadUltraonicSensorHandler+0x21c>)
 8001270:	f000 fc68 	bl	8001b44 <MCAL_GPIO_WritePin>
		vTaskDelay(1);
 8001274:	2001      	movs	r0, #1
 8001276:	f7ff f947 	bl	8000508 <vTaskDelay>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_8 , 1); //Pull the trigger high
 800127a:	2201      	movs	r2, #1
 800127c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001280:	487e      	ldr	r0, [pc, #504]	; (800147c <vReadUltraonicSensorHandler+0x21c>)
 8001282:	f000 fc5f 	bl	8001b44 <MCAL_GPIO_WritePin>
		vTaskDelay(1);
 8001286:	2001      	movs	r0, #1
 8001288:	f7ff f93e 	bl	8000508 <vTaskDelay>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_8 , 0); //Pull the trigger low
 800128c:	2200      	movs	r2, #0
 800128e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001292:	487a      	ldr	r0, [pc, #488]	; (800147c <vReadUltraonicSensorHandler+0x21c>)
 8001294:	f000 fc56 	bl	8001b44 <MCAL_GPIO_WritePin>

		while ( ! MCAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) ); //Wait for echo to go high
 8001298:	bf00      	nop
 800129a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800129e:	4877      	ldr	r0, [pc, #476]	; (800147c <vReadUltraonicSensorHandler+0x21c>)
 80012a0:	f000 fc39 	bl	8001b16 <MCAL_GPIO_ReadPin>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0f7      	beq.n	800129a <vReadUltraonicSensorHandler+0x3a>

		MCAL_TIM_Start(TIM3); //Timer 3 Start to count
 80012aa:	4875      	ldr	r0, [pc, #468]	; (8001480 <vReadUltraonicSensorHandler+0x220>)
 80012ac:	f001 fbb4 	bl	8002a18 <MCAL_TIM_Start>

		while ( MCAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) ); //Wait for echo to go low
 80012b0:	bf00      	nop
 80012b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012b6:	4871      	ldr	r0, [pc, #452]	; (800147c <vReadUltraonicSensorHandler+0x21c>)
 80012b8:	f000 fc2d 	bl	8001b16 <MCAL_GPIO_ReadPin>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f7      	bne.n	80012b2 <vReadUltraonicSensorHandler+0x52>

		Sensor1_time = TIM3->CNT ; //Get the value of timer 3
 80012c2:	4b6f      	ldr	r3, [pc, #444]	; (8001480 <vReadUltraonicSensorHandler+0x220>)
 80012c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c6:	4a6f      	ldr	r2, [pc, #444]	; (8001484 <vReadUltraonicSensorHandler+0x224>)
 80012c8:	6013      	str	r3, [r2, #0]

		MCAL_TIM_Stop(TIM3); //stop timer 3
 80012ca:	486d      	ldr	r0, [pc, #436]	; (8001480 <vReadUltraonicSensorHandler+0x220>)
 80012cc:	f001 fbb9 	bl	8002a42 <MCAL_TIM_Stop>
		MCAL_TIM_Count_Reset(TIM3); // reset timer 3
 80012d0:	486b      	ldr	r0, [pc, #428]	; (8001480 <vReadUltraonicSensorHandler+0x220>)
 80012d2:	f001 fbcb 	bl	8002a6c <MCAL_TIM_Count_Reset>

		Sensor1_distance = (Sensor1_time/58) ; // calculate the distance
 80012d6:	4b6b      	ldr	r3, [pc, #428]	; (8001484 <vReadUltraonicSensorHandler+0x224>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a6b      	ldr	r2, [pc, #428]	; (8001488 <vReadUltraonicSensorHandler+0x228>)
 80012dc:	fba2 2303 	umull	r2, r3, r2, r3
 80012e0:	095b      	lsrs	r3, r3, #5
 80012e2:	4a6a      	ldr	r2, [pc, #424]	; (800148c <vReadUltraonicSensorHandler+0x22c>)
 80012e4:	6013      	str	r3, [r2, #0]

		vTaskDelay(5);
 80012e6:	2005      	movs	r0, #5
 80012e8:	f7ff f90e 	bl	8000508 <vTaskDelay>


		//////////////////////*//////////////////////////

		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_14 , 0); //Pull the trigger low
 80012ec:	2200      	movs	r2, #0
 80012ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012f2:	4862      	ldr	r0, [pc, #392]	; (800147c <vReadUltraonicSensorHandler+0x21c>)
 80012f4:	f000 fc26 	bl	8001b44 <MCAL_GPIO_WritePin>
		vTaskDelay(1);
 80012f8:	2001      	movs	r0, #1
 80012fa:	f7ff f905 	bl	8000508 <vTaskDelay>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_14 , 1); //Pull the trigger high
 80012fe:	2201      	movs	r2, #1
 8001300:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001304:	485d      	ldr	r0, [pc, #372]	; (800147c <vReadUltraonicSensorHandler+0x21c>)
 8001306:	f000 fc1d 	bl	8001b44 <MCAL_GPIO_WritePin>
		vTaskDelay(1);
 800130a:	2001      	movs	r0, #1
 800130c:	f7ff f8fc 	bl	8000508 <vTaskDelay>

		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_14 , 0); //Pull the trigger low
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001316:	4859      	ldr	r0, [pc, #356]	; (800147c <vReadUltraonicSensorHandler+0x21c>)
 8001318:	f000 fc14 	bl	8001b44 <MCAL_GPIO_WritePin>

		while ( ! MCAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) ); //Wait for echo to go high
 800131c:	bf00      	nop
 800131e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001322:	4856      	ldr	r0, [pc, #344]	; (800147c <vReadUltraonicSensorHandler+0x21c>)
 8001324:	f000 fbf7 	bl	8001b16 <MCAL_GPIO_ReadPin>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0f7      	beq.n	800131e <vReadUltraonicSensorHandler+0xbe>

		MCAL_TIM_Start(TIM3); //Timer 3 Start to count
 800132e:	4854      	ldr	r0, [pc, #336]	; (8001480 <vReadUltraonicSensorHandler+0x220>)
 8001330:	f001 fb72 	bl	8002a18 <MCAL_TIM_Start>

		while ( MCAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) ); //Wait for echo to go low
 8001334:	bf00      	nop
 8001336:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800133a:	4850      	ldr	r0, [pc, #320]	; (800147c <vReadUltraonicSensorHandler+0x21c>)
 800133c:	f000 fbeb 	bl	8001b16 <MCAL_GPIO_ReadPin>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f7      	bne.n	8001336 <vReadUltraonicSensorHandler+0xd6>

		Sensor2_time = TIM3->CNT ; //Get the value of timer 3
 8001346:	4b4e      	ldr	r3, [pc, #312]	; (8001480 <vReadUltraonicSensorHandler+0x220>)
 8001348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134a:	4a51      	ldr	r2, [pc, #324]	; (8001490 <vReadUltraonicSensorHandler+0x230>)
 800134c:	6013      	str	r3, [r2, #0]

		MCAL_TIM_Stop(TIM3); //stop timer 3
 800134e:	484c      	ldr	r0, [pc, #304]	; (8001480 <vReadUltraonicSensorHandler+0x220>)
 8001350:	f001 fb77 	bl	8002a42 <MCAL_TIM_Stop>
		MCAL_TIM_Count_Reset(TIM3); // reset timer 3
 8001354:	484a      	ldr	r0, [pc, #296]	; (8001480 <vReadUltraonicSensorHandler+0x220>)
 8001356:	f001 fb89 	bl	8002a6c <MCAL_TIM_Count_Reset>

		Sensor2_distance = (Sensor2_time/58) ; // calculate the distance
 800135a:	4b4d      	ldr	r3, [pc, #308]	; (8001490 <vReadUltraonicSensorHandler+0x230>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a4a      	ldr	r2, [pc, #296]	; (8001488 <vReadUltraonicSensorHandler+0x228>)
 8001360:	fba2 2303 	umull	r2, r3, r2, r3
 8001364:	095b      	lsrs	r3, r3, #5
 8001366:	4a4b      	ldr	r2, [pc, #300]	; (8001494 <vReadUltraonicSensorHandler+0x234>)
 8001368:	6013      	str	r3, [r2, #0]

		vTaskDelay(5);
 800136a:	2005      	movs	r0, #5
 800136c:	f7ff f8cc 	bl	8000508 <vTaskDelay>


		//////////////////////*//////////////////////////

		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 , 0); //Pull the trigger low
 8001370:	2200      	movs	r2, #0
 8001372:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001376:	4841      	ldr	r0, [pc, #260]	; (800147c <vReadUltraonicSensorHandler+0x21c>)
 8001378:	f000 fbe4 	bl	8001b44 <MCAL_GPIO_WritePin>
		vTaskDelay(1);
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff f8c3 	bl	8000508 <vTaskDelay>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 , 1); //Pull the trigger high
 8001382:	2201      	movs	r2, #1
 8001384:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001388:	483c      	ldr	r0, [pc, #240]	; (800147c <vReadUltraonicSensorHandler+0x21c>)
 800138a:	f000 fbdb 	bl	8001b44 <MCAL_GPIO_WritePin>
		vTaskDelay(1);
 800138e:	2001      	movs	r0, #1
 8001390:	f7ff f8ba 	bl	8000508 <vTaskDelay>

		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 , 0); //Pull the trigger low
 8001394:	2200      	movs	r2, #0
 8001396:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800139a:	4838      	ldr	r0, [pc, #224]	; (800147c <vReadUltraonicSensorHandler+0x21c>)
 800139c:	f000 fbd2 	bl	8001b44 <MCAL_GPIO_WritePin>

		while ( ! MCAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) ); //Wait for echo to go high
 80013a0:	bf00      	nop
 80013a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013a6:	4835      	ldr	r0, [pc, #212]	; (800147c <vReadUltraonicSensorHandler+0x21c>)
 80013a8:	f000 fbb5 	bl	8001b16 <MCAL_GPIO_ReadPin>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f7      	beq.n	80013a2 <vReadUltraonicSensorHandler+0x142>

		MCAL_TIM_Start(TIM3); //Timer 3 Start to count
 80013b2:	4833      	ldr	r0, [pc, #204]	; (8001480 <vReadUltraonicSensorHandler+0x220>)
 80013b4:	f001 fb30 	bl	8002a18 <MCAL_TIM_Start>

		while ( MCAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) ); //Wait for echo to go low
 80013b8:	bf00      	nop
 80013ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013be:	482f      	ldr	r0, [pc, #188]	; (800147c <vReadUltraonicSensorHandler+0x21c>)
 80013c0:	f000 fba9 	bl	8001b16 <MCAL_GPIO_ReadPin>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f7      	bne.n	80013ba <vReadUltraonicSensorHandler+0x15a>

		Sensor3_time = TIM3->CNT ; //Get the value of timer 3
 80013ca:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <vReadUltraonicSensorHandler+0x220>)
 80013cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ce:	4a32      	ldr	r2, [pc, #200]	; (8001498 <vReadUltraonicSensorHandler+0x238>)
 80013d0:	6013      	str	r3, [r2, #0]

		MCAL_TIM_Stop(TIM3); //stop timer 3
 80013d2:	482b      	ldr	r0, [pc, #172]	; (8001480 <vReadUltraonicSensorHandler+0x220>)
 80013d4:	f001 fb35 	bl	8002a42 <MCAL_TIM_Stop>
		MCAL_TIM_Count_Reset(TIM3); // reset timer 3
 80013d8:	4829      	ldr	r0, [pc, #164]	; (8001480 <vReadUltraonicSensorHandler+0x220>)
 80013da:	f001 fb47 	bl	8002a6c <MCAL_TIM_Count_Reset>

		Sensor3_distance = (Sensor3_time/58) ; // calculate the distance
 80013de:	4b2e      	ldr	r3, [pc, #184]	; (8001498 <vReadUltraonicSensorHandler+0x238>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a29      	ldr	r2, [pc, #164]	; (8001488 <vReadUltraonicSensorHandler+0x228>)
 80013e4:	fba2 2303 	umull	r2, r3, r2, r3
 80013e8:	095b      	lsrs	r3, r3, #5
 80013ea:	4a2c      	ldr	r2, [pc, #176]	; (800149c <vReadUltraonicSensorHandler+0x23c>)
 80013ec:	6013      	str	r3, [r2, #0]

		vTaskDelay(5);
 80013ee:	2005      	movs	r0, #5
 80013f0:	f7ff f88a 	bl	8000508 <vTaskDelay>

		//////////////////////*//////////////////////////

		MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11 , 0); //Pull the trigger low
 80013f4:	2200      	movs	r2, #0
 80013f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013fa:	4829      	ldr	r0, [pc, #164]	; (80014a0 <vReadUltraonicSensorHandler+0x240>)
 80013fc:	f000 fba2 	bl	8001b44 <MCAL_GPIO_WritePin>
		vTaskDelay(1);
 8001400:	2001      	movs	r0, #1
 8001402:	f7ff f881 	bl	8000508 <vTaskDelay>
		MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11 , 1); //Pull the trigger high
 8001406:	2201      	movs	r2, #1
 8001408:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800140c:	4824      	ldr	r0, [pc, #144]	; (80014a0 <vReadUltraonicSensorHandler+0x240>)
 800140e:	f000 fb99 	bl	8001b44 <MCAL_GPIO_WritePin>
		vTaskDelay(1);
 8001412:	2001      	movs	r0, #1
 8001414:	f7ff f878 	bl	8000508 <vTaskDelay>

		MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11 , 0); //Pull the trigger low
 8001418:	2200      	movs	r2, #0
 800141a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800141e:	4820      	ldr	r0, [pc, #128]	; (80014a0 <vReadUltraonicSensorHandler+0x240>)
 8001420:	f000 fb90 	bl	8001b44 <MCAL_GPIO_WritePin>

		while ( ! MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) ); //Wait for echo to go high
 8001424:	bf00      	nop
 8001426:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800142a:	481d      	ldr	r0, [pc, #116]	; (80014a0 <vReadUltraonicSensorHandler+0x240>)
 800142c:	f000 fb73 	bl	8001b16 <MCAL_GPIO_ReadPin>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0f7      	beq.n	8001426 <vReadUltraonicSensorHandler+0x1c6>

		MCAL_TIM_Start(TIM3); //Timer 3 Start to count
 8001436:	4812      	ldr	r0, [pc, #72]	; (8001480 <vReadUltraonicSensorHandler+0x220>)
 8001438:	f001 faee 	bl	8002a18 <MCAL_TIM_Start>

		while ( MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) ); //Wait for echo to go low
 800143c:	bf00      	nop
 800143e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001442:	4817      	ldr	r0, [pc, #92]	; (80014a0 <vReadUltraonicSensorHandler+0x240>)
 8001444:	f000 fb67 	bl	8001b16 <MCAL_GPIO_ReadPin>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f7      	bne.n	800143e <vReadUltraonicSensorHandler+0x1de>

		Sensor4_time = TIM3->CNT ; //Get the value of timer 3
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <vReadUltraonicSensorHandler+0x220>)
 8001450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001452:	4a14      	ldr	r2, [pc, #80]	; (80014a4 <vReadUltraonicSensorHandler+0x244>)
 8001454:	6013      	str	r3, [r2, #0]

		MCAL_TIM_Stop(TIM3); //stop timer 3
 8001456:	480a      	ldr	r0, [pc, #40]	; (8001480 <vReadUltraonicSensorHandler+0x220>)
 8001458:	f001 faf3 	bl	8002a42 <MCAL_TIM_Stop>
		MCAL_TIM_Count_Reset(TIM3); // reset timer 3
 800145c:	4808      	ldr	r0, [pc, #32]	; (8001480 <vReadUltraonicSensorHandler+0x220>)
 800145e:	f001 fb05 	bl	8002a6c <MCAL_TIM_Count_Reset>

		Sensor4_distance = (Sensor4_time/58) ; // calculate the distance
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <vReadUltraonicSensorHandler+0x244>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a08      	ldr	r2, [pc, #32]	; (8001488 <vReadUltraonicSensorHandler+0x228>)
 8001468:	fba2 2303 	umull	r2, r3, r2, r3
 800146c:	095b      	lsrs	r3, r3, #5
 800146e:	4a0e      	ldr	r2, [pc, #56]	; (80014a8 <vReadUltraonicSensorHandler+0x248>)
 8001470:	6013      	str	r3, [r2, #0]

		vTaskDelay(5);
 8001472:	2005      	movs	r0, #5
 8001474:	f7ff f848 	bl	8000508 <vTaskDelay>
		MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_8 , 0); //Pull the trigger low
 8001478:	e6f6      	b.n	8001268 <vReadUltraonicSensorHandler+0x8>
 800147a:	bf00      	nop
 800147c:	40010c00 	.word	0x40010c00
 8001480:	40000400 	.word	0x40000400
 8001484:	20003fc4 	.word	0x20003fc4
 8001488:	8d3dcb09 	.word	0x8d3dcb09
 800148c:	20003fb4 	.word	0x20003fb4
 8001490:	20003fc8 	.word	0x20003fc8
 8001494:	20003fb8 	.word	0x20003fb8
 8001498:	20003fcc 	.word	0x20003fcc
 800149c:	20003fbc 	.word	0x20003fbc
 80014a0:	40010800 	.word	0x40010800
 80014a4:	20003fd0 	.word	0x20003fd0
 80014a8:	20003fc0 	.word	0x20003fc0

080014ac <vI2C_CommunicateWithAtmega32Handler>:

///////////////////******///////////////////


void vI2C_CommunicateWithAtmega32Handler(void *parms)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af02      	add	r7, sp, #8
 80014b2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// Split the 32-bit number into four 8-bit chunks
		buffer[0] = (Sensor1_distance >> 24) & 0xFF; // Most significant byte
 80014b4:	4b48      	ldr	r3, [pc, #288]	; (80015d8 <vI2C_CommunicateWithAtmega32Handler+0x12c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	0e1b      	lsrs	r3, r3, #24
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	4b47      	ldr	r3, [pc, #284]	; (80015dc <vI2C_CommunicateWithAtmega32Handler+0x130>)
 80014be:	701a      	strb	r2, [r3, #0]
		buffer[1] = (Sensor1_distance >> 16) & 0xFF;
 80014c0:	4b45      	ldr	r3, [pc, #276]	; (80015d8 <vI2C_CommunicateWithAtmega32Handler+0x12c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	0c1b      	lsrs	r3, r3, #16
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	4b44      	ldr	r3, [pc, #272]	; (80015dc <vI2C_CommunicateWithAtmega32Handler+0x130>)
 80014ca:	705a      	strb	r2, [r3, #1]
		buffer[2] = (Sensor1_distance >> 8) & 0xFF;
 80014cc:	4b42      	ldr	r3, [pc, #264]	; (80015d8 <vI2C_CommunicateWithAtmega32Handler+0x12c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	0a1b      	lsrs	r3, r3, #8
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	4b41      	ldr	r3, [pc, #260]	; (80015dc <vI2C_CommunicateWithAtmega32Handler+0x130>)
 80014d6:	709a      	strb	r2, [r3, #2]
		buffer[3] = Sensor1_distance & 0xFF; // Least significant byte
 80014d8:	4b3f      	ldr	r3, [pc, #252]	; (80015d8 <vI2C_CommunicateWithAtmega32Handler+0x12c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4b3f      	ldr	r3, [pc, #252]	; (80015dc <vI2C_CommunicateWithAtmega32Handler+0x130>)
 80014e0:	70da      	strb	r2, [r3, #3]

		// Split the 32-bit number into four 8-bit chunks
		buffer[4] = (Sensor2_distance >> 24) & 0xFF; // Most significant byte
 80014e2:	4b3f      	ldr	r3, [pc, #252]	; (80015e0 <vI2C_CommunicateWithAtmega32Handler+0x134>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	0e1b      	lsrs	r3, r3, #24
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4b3c      	ldr	r3, [pc, #240]	; (80015dc <vI2C_CommunicateWithAtmega32Handler+0x130>)
 80014ec:	711a      	strb	r2, [r3, #4]
		buffer[5] = (Sensor2_distance >> 16) & 0xFF;
 80014ee:	4b3c      	ldr	r3, [pc, #240]	; (80015e0 <vI2C_CommunicateWithAtmega32Handler+0x134>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	0c1b      	lsrs	r3, r3, #16
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4b39      	ldr	r3, [pc, #228]	; (80015dc <vI2C_CommunicateWithAtmega32Handler+0x130>)
 80014f8:	715a      	strb	r2, [r3, #5]
		buffer[6] = (Sensor2_distance >> 8) & 0xFF;
 80014fa:	4b39      	ldr	r3, [pc, #228]	; (80015e0 <vI2C_CommunicateWithAtmega32Handler+0x134>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	0a1b      	lsrs	r3, r3, #8
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4b36      	ldr	r3, [pc, #216]	; (80015dc <vI2C_CommunicateWithAtmega32Handler+0x130>)
 8001504:	719a      	strb	r2, [r3, #6]
		buffer[7] = Sensor2_distance & 0xFF; // Least significant byte
 8001506:	4b36      	ldr	r3, [pc, #216]	; (80015e0 <vI2C_CommunicateWithAtmega32Handler+0x134>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	b2da      	uxtb	r2, r3
 800150c:	4b33      	ldr	r3, [pc, #204]	; (80015dc <vI2C_CommunicateWithAtmega32Handler+0x130>)
 800150e:	71da      	strb	r2, [r3, #7]

		// Split the 32-bit number into four 8-bit chunks
		buffer[8] = (Sensor3_distance >> 24) & 0xFF; // Most significant byte
 8001510:	4b34      	ldr	r3, [pc, #208]	; (80015e4 <vI2C_CommunicateWithAtmega32Handler+0x138>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	0e1b      	lsrs	r3, r3, #24
 8001516:	b2da      	uxtb	r2, r3
 8001518:	4b30      	ldr	r3, [pc, #192]	; (80015dc <vI2C_CommunicateWithAtmega32Handler+0x130>)
 800151a:	721a      	strb	r2, [r3, #8]
		buffer[9] = (Sensor3_distance >> 16) & 0xFF;
 800151c:	4b31      	ldr	r3, [pc, #196]	; (80015e4 <vI2C_CommunicateWithAtmega32Handler+0x138>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	0c1b      	lsrs	r3, r3, #16
 8001522:	b2da      	uxtb	r2, r3
 8001524:	4b2d      	ldr	r3, [pc, #180]	; (80015dc <vI2C_CommunicateWithAtmega32Handler+0x130>)
 8001526:	725a      	strb	r2, [r3, #9]
		buffer[10] = (Sensor3_distance >> 8) & 0xFF;
 8001528:	4b2e      	ldr	r3, [pc, #184]	; (80015e4 <vI2C_CommunicateWithAtmega32Handler+0x138>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	0a1b      	lsrs	r3, r3, #8
 800152e:	b2da      	uxtb	r2, r3
 8001530:	4b2a      	ldr	r3, [pc, #168]	; (80015dc <vI2C_CommunicateWithAtmega32Handler+0x130>)
 8001532:	729a      	strb	r2, [r3, #10]
		buffer[11] = Sensor3_distance & 0xFF; // Least significant byte
 8001534:	4b2b      	ldr	r3, [pc, #172]	; (80015e4 <vI2C_CommunicateWithAtmega32Handler+0x138>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	b2da      	uxtb	r2, r3
 800153a:	4b28      	ldr	r3, [pc, #160]	; (80015dc <vI2C_CommunicateWithAtmega32Handler+0x130>)
 800153c:	72da      	strb	r2, [r3, #11]

		// Split the 32-bit number into four 8-bit chunks
		buffer[12] = (Sensor4_distance >> 24) & 0xFF; // Most significant byte
 800153e:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <vI2C_CommunicateWithAtmega32Handler+0x13c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	0e1b      	lsrs	r3, r3, #24
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4b25      	ldr	r3, [pc, #148]	; (80015dc <vI2C_CommunicateWithAtmega32Handler+0x130>)
 8001548:	731a      	strb	r2, [r3, #12]
		buffer[13] = (Sensor4_distance >> 16) & 0xFF;
 800154a:	4b27      	ldr	r3, [pc, #156]	; (80015e8 <vI2C_CommunicateWithAtmega32Handler+0x13c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	0c1b      	lsrs	r3, r3, #16
 8001550:	b2da      	uxtb	r2, r3
 8001552:	4b22      	ldr	r3, [pc, #136]	; (80015dc <vI2C_CommunicateWithAtmega32Handler+0x130>)
 8001554:	735a      	strb	r2, [r3, #13]
		buffer[14] = (Sensor4_distance >> 8) & 0xFF;
 8001556:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <vI2C_CommunicateWithAtmega32Handler+0x13c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	0a1b      	lsrs	r3, r3, #8
 800155c:	b2da      	uxtb	r2, r3
 800155e:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <vI2C_CommunicateWithAtmega32Handler+0x130>)
 8001560:	739a      	strb	r2, [r3, #14]
		buffer[15] = Sensor4_distance & 0xFF; // Least significant byte
 8001562:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <vI2C_CommunicateWithAtmega32Handler+0x13c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <vI2C_CommunicateWithAtmega32Handler+0x130>)
 800156a:	73da      	strb	r2, [r3, #15]


		if( Recieved_Data == 'B' )
 800156c:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <vI2C_CommunicateWithAtmega32Handler+0x140>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b42      	cmp	r3, #66	; 0x42
 8001572:	d103      	bne.n	800157c <vI2C_CommunicateWithAtmega32Handler+0xd0>
		{
			Driver_State = 1 ;
 8001574:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <vI2C_CommunicateWithAtmega32Handler+0x144>)
 8001576:	2201      	movs	r2, #1
 8001578:	701a      	strb	r2, [r3, #0]
 800157a:	e006      	b.n	800158a <vI2C_CommunicateWithAtmega32Handler+0xde>
		}
		else if (Recieved_Data == 'A')
 800157c:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <vI2C_CommunicateWithAtmega32Handler+0x140>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b41      	cmp	r3, #65	; 0x41
 8001582:	d102      	bne.n	800158a <vI2C_CommunicateWithAtmega32Handler+0xde>
		{
			Driver_State = 0 ;
 8001584:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <vI2C_CommunicateWithAtmega32Handler+0x144>)
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
		}


		buffer[16] = Driver_State ;
 800158a:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <vI2C_CommunicateWithAtmega32Handler+0x144>)
 800158c:	781a      	ldrb	r2, [r3, #0]
 800158e:	4b13      	ldr	r3, [pc, #76]	; (80015dc <vI2C_CommunicateWithAtmega32Handler+0x130>)
 8001590:	741a      	strb	r2, [r3, #16]


		MCAL_I2C_Master_TX(I2C1, 0x10,buffer,17, WithStop, Start);// Write the data at the Slave address
 8001592:	2300      	movs	r3, #0
 8001594:	9301      	str	r3, [sp, #4]
 8001596:	2300      	movs	r3, #0
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2311      	movs	r3, #17
 800159c:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <vI2C_CommunicateWithAtmega32Handler+0x130>)
 800159e:	2110      	movs	r1, #16
 80015a0:	4814      	ldr	r0, [pc, #80]	; (80015f4 <vI2C_CommunicateWithAtmega32Handler+0x148>)
 80015a2:	f000 fdad 	bl	8002100 <MCAL_I2C_Master_TX>

		if (Sensor1_distance <= 20 ||  Sensor2_distance <= 20  )
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <vI2C_CommunicateWithAtmega32Handler+0x12c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b14      	cmp	r3, #20
 80015ac:	d903      	bls.n	80015b6 <vI2C_CommunicateWithAtmega32Handler+0x10a>
 80015ae:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <vI2C_CommunicateWithAtmega32Handler+0x134>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b14      	cmp	r3, #20
 80015b4:	d806      	bhi.n	80015c4 <vI2C_CommunicateWithAtmega32Handler+0x118>
		{
			MCAL_GPIO_WritePin(GPIOC, GPIO_PIN_13 , 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015bc:	480e      	ldr	r0, [pc, #56]	; (80015f8 <vI2C_CommunicateWithAtmega32Handler+0x14c>)
 80015be:	f000 fac1 	bl	8001b44 <MCAL_GPIO_WritePin>
 80015c2:	e005      	b.n	80015d0 <vI2C_CommunicateWithAtmega32Handler+0x124>
		}

		else
		{
			MCAL_GPIO_WritePin(GPIOC, GPIO_PIN_13 , 1);
 80015c4:	2201      	movs	r2, #1
 80015c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015ca:	480b      	ldr	r0, [pc, #44]	; (80015f8 <vI2C_CommunicateWithAtmega32Handler+0x14c>)
 80015cc:	f000 faba 	bl	8001b44 <MCAL_GPIO_WritePin>
		}

		vTaskDelay(30);
 80015d0:	201e      	movs	r0, #30
 80015d2:	f7fe ff99 	bl	8000508 <vTaskDelay>
		buffer[0] = (Sensor1_distance >> 24) & 0xFF; // Most significant byte
 80015d6:	e76d      	b.n	80014b4 <vI2C_CommunicateWithAtmega32Handler+0x8>
 80015d8:	20003fb4 	.word	0x20003fb4
 80015dc:	20003fd4 	.word	0x20003fd4
 80015e0:	20003fb8 	.word	0x20003fb8
 80015e4:	20003fbc 	.word	0x20003fbc
 80015e8:	20003fc0 	.word	0x20003fc0
 80015ec:	20000008 	.word	0x20000008
 80015f0:	20000009 	.word	0x20000009
 80015f4:	40005400 	.word	0x40005400
 80015f8:	40011000 	.word	0x40011000

080015fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015fc:	480d      	ldr	r0, [pc, #52]	; (8001634 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015fe:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001600:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001604:	480c      	ldr	r0, [pc, #48]	; (8001638 <LoopForever+0x6>)
  ldr r1, =_edata
 8001606:	490d      	ldr	r1, [pc, #52]	; (800163c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001608:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <LoopForever+0xe>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800160c:	e002      	b.n	8001614 <LoopCopyDataInit>

0800160e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001612:	3304      	adds	r3, #4

08001614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001618:	d3f9      	bcc.n	800160e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161a:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <LoopForever+0x12>)
  ldr r4, =_ebss
 800161c:	4c0a      	ldr	r4, [pc, #40]	; (8001648 <LoopForever+0x16>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001620:	e001      	b.n	8001626 <LoopFillZerobss>

08001622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001624:	3204      	adds	r2, #4

08001626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001628:	d3fb      	bcc.n	8001622 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800162a:	f001 fc43 	bl	8002eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800162e:	f7ff fdcb 	bl	80011c8 <main>

08001632 <LoopForever>:

LoopForever:
    b LoopForever
 8001632:	e7fe      	b.n	8001632 <LoopForever>
  ldr   r0, =_estack
 8001634:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800163c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001640:	08002f5c 	.word	0x08002f5c
  ldr r2, =_sbss
 8001644:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001648:	20004170 	.word	0x20004170

0800164c <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800164c:	e7fe      	b.n	800164c <ADC3_IRQHandler>
	...

08001650 <ADC1_2_IRQHandler>:
 * 						ISR
 * ===============================================
 */

void ADC1_2_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
	/* ADC global interrupt */
	Data_for_IRQ = ADC1->DR ;
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <ADC1_2_IRQHandler+0x28>)
 8001656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001658:	b29a      	uxth	r2, r3
 800165a:	4b08      	ldr	r3, [pc, #32]	; (800167c <ADC1_2_IRQHandler+0x2c>)
 800165c:	801a      	strh	r2, [r3, #0]
	Global_ADC_Cfg.channels[Rank-1].Channel_IRQ_callback(Data_for_IRQ);
 800165e:	4b08      	ldr	r3, [pc, #32]	; (8001680 <ADC1_2_IRQHandler+0x30>)
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	3b01      	subs	r3, #1
 8001664:	4a07      	ldr	r2, [pc, #28]	; (8001684 <ADC1_2_IRQHandler+0x34>)
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	4413      	add	r3, r2
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	4a03      	ldr	r2, [pc, #12]	; (800167c <ADC1_2_IRQHandler+0x2c>)
 800166e:	8812      	ldrh	r2, [r2, #0]
 8001670:	4610      	mov	r0, r2
 8001672:	4798      	blx	r3
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40012400 	.word	0x40012400
 800167c:	20004050 	.word	0x20004050
 8001680:	2000000a 	.word	0x2000000a
 8001684:	20003ff4 	.word	0x20003ff4

08001688 <EXTI0_IRQHandler>:
 * =====================================================================================
 */


void EXTI0_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	// cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= 1<<0;
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <EXTI0_IRQHandler+0x1c>)
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	4a04      	ldr	r2, [pc, #16]	; (80016a4 <EXTI0_IRQHandler+0x1c>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6153      	str	r3, [r2, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[0]();
 8001698:	4b03      	ldr	r3, [pc, #12]	; (80016a8 <EXTI0_IRQHandler+0x20>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4798      	blx	r3
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40010400 	.word	0x40010400
 80016a8:	20004054 	.word	0x20004054

080016ac <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <EXTI1_IRQHandler+0x1c>)
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <EXTI1_IRQHandler+0x1c>)
 80016b6:	f043 0302 	orr.w	r3, r3, #2
 80016ba:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 80016bc:	4b03      	ldr	r3, [pc, #12]	; (80016cc <EXTI1_IRQHandler+0x20>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	4798      	blx	r3
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40010400 	.word	0x40010400
 80016cc:	20004054 	.word	0x20004054

080016d0 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <EXTI2_IRQHandler+0x1c>)
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	4a04      	ldr	r2, [pc, #16]	; (80016ec <EXTI2_IRQHandler+0x1c>)
 80016da:	f043 0304 	orr.w	r3, r3, #4
 80016de:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 80016e0:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <EXTI2_IRQHandler+0x20>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	4798      	blx	r3
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40010400 	.word	0x40010400
 80016f0:	20004054 	.word	0x20004054

080016f4 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <EXTI3_IRQHandler+0x1c>)
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	4a04      	ldr	r2, [pc, #16]	; (8001710 <EXTI3_IRQHandler+0x1c>)
 80016fe:	f043 0308 	orr.w	r3, r3, #8
 8001702:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 8001704:	4b03      	ldr	r3, [pc, #12]	; (8001714 <EXTI3_IRQHandler+0x20>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	4798      	blx	r3
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40010400 	.word	0x40010400
 8001714:	20004054 	.word	0x20004054

08001718 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <EXTI4_IRQHandler+0x1c>)
 800171e:	695b      	ldr	r3, [r3, #20]
 8001720:	4a04      	ldr	r2, [pc, #16]	; (8001734 <EXTI4_IRQHandler+0x1c>)
 8001722:	f043 0310 	orr.w	r3, r3, #16
 8001726:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 8001728:	4b03      	ldr	r3, [pc, #12]	; (8001738 <EXTI4_IRQHandler+0x20>)
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	4798      	blx	r3
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40010400 	.word	0x40010400
 8001738:	20004054 	.word	0x20004054

0800173c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<5 ) { EXTI->PR |= 1<<5; GP_IRQ_CallBack[5](); }
 8001740:	4b26      	ldr	r3, [pc, #152]	; (80017dc <EXTI9_5_IRQHandler+0xa0>)
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	f003 0320 	and.w	r3, r3, #32
 8001748:	2b00      	cmp	r3, #0
 800174a:	d008      	beq.n	800175e <EXTI9_5_IRQHandler+0x22>
 800174c:	4b23      	ldr	r3, [pc, #140]	; (80017dc <EXTI9_5_IRQHandler+0xa0>)
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	4a22      	ldr	r2, [pc, #136]	; (80017dc <EXTI9_5_IRQHandler+0xa0>)
 8001752:	f043 0320 	orr.w	r3, r3, #32
 8001756:	6153      	str	r3, [r2, #20]
 8001758:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <EXTI9_5_IRQHandler+0xa4>)
 800175a:	695b      	ldr	r3, [r3, #20]
 800175c:	4798      	blx	r3
	if( EXTI->PR & 1<<6 ) { EXTI->PR |= 1<<6; GP_IRQ_CallBack[6](); }
 800175e:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <EXTI9_5_IRQHandler+0xa0>)
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001766:	2b00      	cmp	r3, #0
 8001768:	d008      	beq.n	800177c <EXTI9_5_IRQHandler+0x40>
 800176a:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <EXTI9_5_IRQHandler+0xa0>)
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	4a1b      	ldr	r2, [pc, #108]	; (80017dc <EXTI9_5_IRQHandler+0xa0>)
 8001770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001774:	6153      	str	r3, [r2, #20]
 8001776:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <EXTI9_5_IRQHandler+0xa4>)
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	4798      	blx	r3
	if( EXTI->PR & 1<<7 ) { EXTI->PR |= 1<<7; GP_IRQ_CallBack[7](); }
 800177c:	4b17      	ldr	r3, [pc, #92]	; (80017dc <EXTI9_5_IRQHandler+0xa0>)
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001784:	2b00      	cmp	r3, #0
 8001786:	d008      	beq.n	800179a <EXTI9_5_IRQHandler+0x5e>
 8001788:	4b14      	ldr	r3, [pc, #80]	; (80017dc <EXTI9_5_IRQHandler+0xa0>)
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	4a13      	ldr	r2, [pc, #76]	; (80017dc <EXTI9_5_IRQHandler+0xa0>)
 800178e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001792:	6153      	str	r3, [r2, #20]
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <EXTI9_5_IRQHandler+0xa4>)
 8001796:	69db      	ldr	r3, [r3, #28]
 8001798:	4798      	blx	r3
	if( EXTI->PR & 1<<8 ) { EXTI->PR |= 1<<8; GP_IRQ_CallBack[8](); }
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <EXTI9_5_IRQHandler+0xa0>)
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d008      	beq.n	80017b8 <EXTI9_5_IRQHandler+0x7c>
 80017a6:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <EXTI9_5_IRQHandler+0xa0>)
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	4a0c      	ldr	r2, [pc, #48]	; (80017dc <EXTI9_5_IRQHandler+0xa0>)
 80017ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b0:	6153      	str	r3, [r2, #20]
 80017b2:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <EXTI9_5_IRQHandler+0xa4>)
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	4798      	blx	r3
	if( EXTI->PR & 1<<9 ) { EXTI->PR |= 1<<9; GP_IRQ_CallBack[9](); }
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <EXTI9_5_IRQHandler+0xa0>)
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d008      	beq.n	80017d6 <EXTI9_5_IRQHandler+0x9a>
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <EXTI9_5_IRQHandler+0xa0>)
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	4a04      	ldr	r2, [pc, #16]	; (80017dc <EXTI9_5_IRQHandler+0xa0>)
 80017ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ce:	6153      	str	r3, [r2, #20]
 80017d0:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <EXTI9_5_IRQHandler+0xa4>)
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	4798      	blx	r3
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40010400 	.word	0x40010400
 80017e0:	20004054 	.word	0x20004054

080017e4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<10 ) { EXTI->PR |= 1<<10; GP_IRQ_CallBack[10](); }
 80017e8:	4b2d      	ldr	r3, [pc, #180]	; (80018a0 <EXTI15_10_IRQHandler+0xbc>)
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d008      	beq.n	8001806 <EXTI15_10_IRQHandler+0x22>
 80017f4:	4b2a      	ldr	r3, [pc, #168]	; (80018a0 <EXTI15_10_IRQHandler+0xbc>)
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	4a29      	ldr	r2, [pc, #164]	; (80018a0 <EXTI15_10_IRQHandler+0xbc>)
 80017fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017fe:	6153      	str	r3, [r2, #20]
 8001800:	4b28      	ldr	r3, [pc, #160]	; (80018a4 <EXTI15_10_IRQHandler+0xc0>)
 8001802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001804:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= 1<<11; GP_IRQ_CallBack[11](); }
 8001806:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <EXTI15_10_IRQHandler+0xbc>)
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800180e:	2b00      	cmp	r3, #0
 8001810:	d008      	beq.n	8001824 <EXTI15_10_IRQHandler+0x40>
 8001812:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <EXTI15_10_IRQHandler+0xbc>)
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	4a22      	ldr	r2, [pc, #136]	; (80018a0 <EXTI15_10_IRQHandler+0xbc>)
 8001818:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800181c:	6153      	str	r3, [r2, #20]
 800181e:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <EXTI15_10_IRQHandler+0xc0>)
 8001820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001822:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= 1<<12; GP_IRQ_CallBack[12](); }
 8001824:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <EXTI15_10_IRQHandler+0xbc>)
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d008      	beq.n	8001842 <EXTI15_10_IRQHandler+0x5e>
 8001830:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <EXTI15_10_IRQHandler+0xbc>)
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	4a1a      	ldr	r2, [pc, #104]	; (80018a0 <EXTI15_10_IRQHandler+0xbc>)
 8001836:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800183a:	6153      	str	r3, [r2, #20]
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <EXTI15_10_IRQHandler+0xc0>)
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= 1<<13; GP_IRQ_CallBack[13](); }
 8001842:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <EXTI15_10_IRQHandler+0xbc>)
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d008      	beq.n	8001860 <EXTI15_10_IRQHandler+0x7c>
 800184e:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <EXTI15_10_IRQHandler+0xbc>)
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	4a13      	ldr	r2, [pc, #76]	; (80018a0 <EXTI15_10_IRQHandler+0xbc>)
 8001854:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001858:	6153      	str	r3, [r2, #20]
 800185a:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <EXTI15_10_IRQHandler+0xc0>)
 800185c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800185e:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<14; GP_IRQ_CallBack[14](); }
 8001860:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <EXTI15_10_IRQHandler+0xbc>)
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d008      	beq.n	800187e <EXTI15_10_IRQHandler+0x9a>
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <EXTI15_10_IRQHandler+0xbc>)
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	4a0b      	ldr	r2, [pc, #44]	; (80018a0 <EXTI15_10_IRQHandler+0xbc>)
 8001872:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001876:	6153      	str	r3, [r2, #20]
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <EXTI15_10_IRQHandler+0xc0>)
 800187a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800187c:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<15; GP_IRQ_CallBack[15](); }
 800187e:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <EXTI15_10_IRQHandler+0xbc>)
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d008      	beq.n	800189c <EXTI15_10_IRQHandler+0xb8>
 800188a:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <EXTI15_10_IRQHandler+0xbc>)
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <EXTI15_10_IRQHandler+0xbc>)
 8001890:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001894:	6153      	str	r3, [r2, #20]
 8001896:	4b03      	ldr	r3, [pc, #12]	; (80018a4 <EXTI15_10_IRQHandler+0xc0>)
 8001898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800189a:	4798      	blx	r3
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40010400 	.word	0x40010400
 80018a4:	20004054 	.word	0x20004054

080018a8 <Get_CRLH_Position>:

#include "Stm32_F103C6_GPIO_Driver.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 80018b2:	88fb      	ldrh	r3, [r7, #6]
 80018b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018b8:	f000 80a5 	beq.w	8001a06 <Get_CRLH_Position+0x15e>
 80018bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018c0:	f300 80a3 	bgt.w	8001a0a <Get_CRLH_Position+0x162>
 80018c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018c8:	f000 809b 	beq.w	8001a02 <Get_CRLH_Position+0x15a>
 80018cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018d0:	f300 809b 	bgt.w	8001a0a <Get_CRLH_Position+0x162>
 80018d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018d8:	f000 8091 	beq.w	80019fe <Get_CRLH_Position+0x156>
 80018dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018e0:	f300 8093 	bgt.w	8001a0a <Get_CRLH_Position+0x162>
 80018e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018e8:	f000 8087 	beq.w	80019fa <Get_CRLH_Position+0x152>
 80018ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018f0:	f300 808b 	bgt.w	8001a0a <Get_CRLH_Position+0x162>
 80018f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018f8:	d07d      	beq.n	80019f6 <Get_CRLH_Position+0x14e>
 80018fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018fe:	f300 8084 	bgt.w	8001a0a <Get_CRLH_Position+0x162>
 8001902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001906:	d074      	beq.n	80019f2 <Get_CRLH_Position+0x14a>
 8001908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800190c:	dc7d      	bgt.n	8001a0a <Get_CRLH_Position+0x162>
 800190e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001912:	d06c      	beq.n	80019ee <Get_CRLH_Position+0x146>
 8001914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001918:	dc77      	bgt.n	8001a0a <Get_CRLH_Position+0x162>
 800191a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800191e:	d064      	beq.n	80019ea <Get_CRLH_Position+0x142>
 8001920:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001924:	dc71      	bgt.n	8001a0a <Get_CRLH_Position+0x162>
 8001926:	2b80      	cmp	r3, #128	; 0x80
 8001928:	d05d      	beq.n	80019e6 <Get_CRLH_Position+0x13e>
 800192a:	2b80      	cmp	r3, #128	; 0x80
 800192c:	dc6d      	bgt.n	8001a0a <Get_CRLH_Position+0x162>
 800192e:	2b20      	cmp	r3, #32
 8001930:	dc48      	bgt.n	80019c4 <Get_CRLH_Position+0x11c>
 8001932:	2b00      	cmp	r3, #0
 8001934:	dd69      	ble.n	8001a0a <Get_CRLH_Position+0x162>
 8001936:	3b01      	subs	r3, #1
 8001938:	2b1f      	cmp	r3, #31
 800193a:	d866      	bhi.n	8001a0a <Get_CRLH_Position+0x162>
 800193c:	a201      	add	r2, pc, #4	; (adr r2, 8001944 <Get_CRLH_Position+0x9c>)
 800193e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001942:	bf00      	nop
 8001944:	080019cb 	.word	0x080019cb
 8001948:	080019cf 	.word	0x080019cf
 800194c:	08001a0b 	.word	0x08001a0b
 8001950:	080019d3 	.word	0x080019d3
 8001954:	08001a0b 	.word	0x08001a0b
 8001958:	08001a0b 	.word	0x08001a0b
 800195c:	08001a0b 	.word	0x08001a0b
 8001960:	080019d7 	.word	0x080019d7
 8001964:	08001a0b 	.word	0x08001a0b
 8001968:	08001a0b 	.word	0x08001a0b
 800196c:	08001a0b 	.word	0x08001a0b
 8001970:	08001a0b 	.word	0x08001a0b
 8001974:	08001a0b 	.word	0x08001a0b
 8001978:	08001a0b 	.word	0x08001a0b
 800197c:	08001a0b 	.word	0x08001a0b
 8001980:	080019db 	.word	0x080019db
 8001984:	08001a0b 	.word	0x08001a0b
 8001988:	08001a0b 	.word	0x08001a0b
 800198c:	08001a0b 	.word	0x08001a0b
 8001990:	08001a0b 	.word	0x08001a0b
 8001994:	08001a0b 	.word	0x08001a0b
 8001998:	08001a0b 	.word	0x08001a0b
 800199c:	08001a0b 	.word	0x08001a0b
 80019a0:	08001a0b 	.word	0x08001a0b
 80019a4:	08001a0b 	.word	0x08001a0b
 80019a8:	08001a0b 	.word	0x08001a0b
 80019ac:	08001a0b 	.word	0x08001a0b
 80019b0:	08001a0b 	.word	0x08001a0b
 80019b4:	08001a0b 	.word	0x08001a0b
 80019b8:	08001a0b 	.word	0x08001a0b
 80019bc:	08001a0b 	.word	0x08001a0b
 80019c0:	080019df 	.word	0x080019df
 80019c4:	2b40      	cmp	r3, #64	; 0x40
 80019c6:	d00c      	beq.n	80019e2 <Get_CRLH_Position+0x13a>
 80019c8:	e01f      	b.n	8001a0a <Get_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	e01e      	b.n	8001a0c <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_1:
		return 4;
 80019ce:	2304      	movs	r3, #4
 80019d0:	e01c      	b.n	8001a0c <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_2:
		return 8;
 80019d2:	2308      	movs	r3, #8
 80019d4:	e01a      	b.n	8001a0c <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_3:
		return 12;
 80019d6:	230c      	movs	r3, #12
 80019d8:	e018      	b.n	8001a0c <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_4:
		return 16;
 80019da:	2310      	movs	r3, #16
 80019dc:	e016      	b.n	8001a0c <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_5:
		return 20;
 80019de:	2314      	movs	r3, #20
 80019e0:	e014      	b.n	8001a0c <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_6:
		return 24;
 80019e2:	2318      	movs	r3, #24
 80019e4:	e012      	b.n	8001a0c <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_7:
		return 28;
 80019e6:	231c      	movs	r3, #28
 80019e8:	e010      	b.n	8001a0c <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_8:
		return 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e00e      	b.n	8001a0c <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_9:
		return 4;
 80019ee:	2304      	movs	r3, #4
 80019f0:	e00c      	b.n	8001a0c <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_10:
		return 8;
 80019f2:	2308      	movs	r3, #8
 80019f4:	e00a      	b.n	8001a0c <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_11:
		return 12;
 80019f6:	230c      	movs	r3, #12
 80019f8:	e008      	b.n	8001a0c <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_12:
		return 16;
 80019fa:	2310      	movs	r3, #16
 80019fc:	e006      	b.n	8001a0c <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_13:
		return 20;
 80019fe:	2314      	movs	r3, #20
 8001a00:	e004      	b.n	8001a0c <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_14:
		return 24;
 8001a02:	2318      	movs	r3, #24
 8001a04:	e002      	b.n	8001a0c <Get_CRLH_Position+0x164>
		break;

	case GPIO_PIN_15:
		return 28;
 8001a06:	231c      	movs	r3, #28
 8001a08:	e000      	b.n	8001a0c <Get_CRLH_Position+0x164>
		break;

	default:
		return 0;
 8001a0a:	2300      	movs	r3, #0
		break;
	}
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop

08001a18 <MCAL_GPIO_Init>:
 * @retval			- none
 * Note				- stm32F103c6 MCU has GPIO A,B,C,D,E Modules
 * 					  But LQFP48 package has only GPIO A,B,Part of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx,GPIO_PinConfig_t *PinConfig)
{
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
	// Port configuration register low  (GPIOx_CRL) configure PINS from 0 ==> 7
	// Port configuration register high (GPIOx_CRH) configure PINS from 8 ==> 15

	volatile uint32_t* configregister = NULL ;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_CONFIG = 0 ;
 8001a26:	2300      	movs	r3, #0
 8001a28:	73fb      	strb	r3, [r7, #15]
	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ?  &GPIOx->CRL : &GPIOx->CRH ;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	2bff      	cmp	r3, #255	; 0xff
 8001a30:	d801      	bhi.n	8001a36 <MCAL_GPIO_Init+0x1e>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	e001      	b.n	8001a3a <MCAL_GPIO_Init+0x22>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	60bb      	str	r3, [r7, #8]

	//clear CNF MODE
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff31 	bl	80018a8 <Get_CRLH_Position>
 8001a46:	4603      	mov	r3, r0
 8001a48:	461a      	mov	r2, r3
 8001a4a:	230f      	movs	r3, #15
 8001a4c:	4093      	lsls	r3, r2
 8001a4e:	43da      	mvns	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	401a      	ands	r2, r3
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	601a      	str	r2, [r3, #0]

	//if PIN is output
	if ( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)|| (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) )
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	789b      	ldrb	r3, [r3, #2]
 8001a5e:	2b07      	cmp	r3, #7
 8001a60:	d00b      	beq.n	8001a7a <MCAL_GPIO_Init+0x62>
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	789b      	ldrb	r3, [r3, #2]
 8001a66:	2b06      	cmp	r3, #6
 8001a68:	d007      	beq.n	8001a7a <MCAL_GPIO_Init+0x62>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	789b      	ldrb	r3, [r3, #2]
 8001a6e:	2b05      	cmp	r3, #5
 8001a70:	d003      	beq.n	8001a7a <MCAL_GPIO_Init+0x62>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	789b      	ldrb	r3, [r3, #2]
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d10e      	bne.n	8001a98 <MCAL_GPIO_Init+0x80>
	{
		//Set CNF MODE
		PIN_CONFIG = ( (((PinConfig->GPIO_MODE -4 ) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0f) ;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	789b      	ldrb	r3, [r3, #2]
 8001a7e:	3b04      	subs	r3, #4
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	b25a      	sxtb	r2, r3
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	78db      	ldrb	r3, [r3, #3]
 8001a88:	b25b      	sxtb	r3, r3
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	b25b      	sxtb	r3, r3
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	f003 030f 	and.w	r3, r3, #15
 8001a94:	73fb      	strb	r3, [r7, #15]
 8001a96:	e02c      	b.n	8001af2 <MCAL_GPIO_Init+0xda>
	}

	else
	{
		if ( (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog) )
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	789b      	ldrb	r3, [r3, #2]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d003      	beq.n	8001aa8 <MCAL_GPIO_Init+0x90>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	789b      	ldrb	r3, [r3, #2]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d107      	bne.n	8001ab8 <MCAL_GPIO_Init+0xa0>
		{
			//set CNF
			PIN_CONFIG = ( (((PinConfig->GPIO_MODE ) << 2) | (0x00)) & 0x0f) ;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	789b      	ldrb	r3, [r3, #2]
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	f003 030f 	and.w	r3, r3, #15
 8001ab4:	73fb      	strb	r3, [r7, #15]
 8001ab6:	e01c      	b.n	8001af2 <MCAL_GPIO_Init+0xda>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF ) //Consider it as input floating
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	789b      	ldrb	r3, [r3, #2]
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d102      	bne.n	8001ac6 <MCAL_GPIO_Init+0xae>
		{
			PIN_CONFIG = ( (((GPIO_MODE_INPUT_FLO) << 2) | (0x00)) & 0x0f) ;
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	73fb      	strb	r3, [r7, #15]
 8001ac4:	e015      	b.n	8001af2 <MCAL_GPIO_Init+0xda>
		}
		else //PU PD
		{
			PIN_CONFIG = ( (((GPIO_MODE_INPUT_PU) << 2) | (0x00)) & 0x0f) ;
 8001ac6:	2308      	movs	r3, #8
 8001ac8:	73fb      	strb	r3, [r7, #15]

			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	789b      	ldrb	r3, [r3, #2]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d107      	bne.n	8001ae2 <MCAL_GPIO_Init+0xca>
			{
				// PXODR = 1 Input pull up
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	8812      	ldrh	r2, [r2, #0]
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	60da      	str	r2, [r3, #12]
 8001ae0:	e007      	b.n	8001af2 <MCAL_GPIO_Init+0xda>
			}

			else
			{
				// PXODR = 0 Input pull down
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	8812      	ldrh	r2, [r2, #0]
 8001aea:	43d2      	mvns	r2, r2
 8001aec:	401a      	ands	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//write on CRL or CRH
	(*configregister) |= ( (PIN_CONFIG) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;
 8001af2:	7bfc      	ldrb	r4, [r7, #15]
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff fed5 	bl	80018a8 <Get_CRLH_Position>
 8001afe:	4603      	mov	r3, r0
 8001b00:	fa04 f203 	lsl.w	r2, r4, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	601a      	str	r2, [r3, #0]


}
 8001b0e:	bf00      	nop
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd90      	pop	{r4, r7, pc}

08001b16 <MCAL_GPIO_ReadPin>:
 * @param [in] 		- PinNumber : Set PinNumber according @ref GPIO_PINS_define
 * @retval			- the input PIN value (two values based on @ref GPIO_PIN_state)
 * Note				- none
 */
uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx,uint16_t PinNumber )
{
 8001b16:	b480      	push	{r7}
 8001b18:	b085      	sub	sp, #20
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	460b      	mov	r3, r1
 8001b20:	807b      	strh	r3, [r7, #2]
	uint8_t BitStatus ;
	if ( ((GPIOx->IDR) & PinNumber ) != (uint32_t)GPIO_PIN_RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	887b      	ldrh	r3, [r7, #2]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <MCAL_GPIO_ReadPin+0x1e>
	{
		BitStatus = GPIO_PIN_SET ;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	73fb      	strb	r3, [r7, #15]
 8001b32:	e001      	b.n	8001b38 <MCAL_GPIO_ReadPin+0x22>
	}
	else
	{
		BitStatus = GPIO_PIN_RESET ;
 8001b34:	2300      	movs	r3, #0
 8001b36:	73fb      	strb	r3, [r7, #15]
	}

	return BitStatus ;
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <MCAL_GPIO_WritePin>:
 * @param [in] 		- Value : Pin Value
 * @retval			- none
 * Note				- none
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx,uint16_t PinNumber, uint8_t Value)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	807b      	strh	r3, [r7, #2]
 8001b50:	4613      	mov	r3, r2
 8001b52:	707b      	strb	r3, [r7, #1]
	if ( Value != GPIO_PIN_RESET)
 8001b54:	787b      	ldrb	r3, [r7, #1]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <MCAL_GPIO_WritePin+0x1e>
		// OR
		//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		//		These bits are write-only and can be accessed in Word mode only.
		//		0: No action on the corresponding ODRx bit
		//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber ;
 8001b5a:	887a      	ldrh	r2, [r7, #2]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	611a      	str	r2, [r3, #16]
		//		These bits are write-only and can be accessed in Word mode only.
		//		0: No action on the corresponding ODRx bit
		//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber ;
	}
}
 8001b60:	e002      	b.n	8001b68 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber ;
 8001b62:	887a      	ldrh	r2, [r7, #2]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	615a      	str	r2, [r3, #20]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr
	...

08001b74 <I2C_GetFlagSTATUS>:
 * 							Generic Functions
 * =====================================================================================
 */

FlagSTATUS I2C_GetFlagSTATUS(I2C_TypeDef *I2Cx, Status Flag)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	; 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
	volatile uint32_t dummyRead;
	uint32_t flag1 = 0 ,flag2 = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61bb      	str	r3, [r7, #24]
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
	uint32_t lastevent = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
	FlagSTATUS bitstatus = RESET;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	77fb      	strb	r3, [r7, #31]

	switch(Flag)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	2b06      	cmp	r3, #6
 8001b92:	d813      	bhi.n	8001bbc <I2C_GetFlagSTATUS+0x48>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	2b06      	cmp	r3, #6
 8001b98:	d87e      	bhi.n	8001c98 <I2C_GetFlagSTATUS+0x124>
 8001b9a:	a201      	add	r2, pc, #4	; (adr r2, 8001ba0 <I2C_GetFlagSTATUS+0x2c>)
 8001b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba0:	08001bc7 	.word	0x08001bc7
 8001ba4:	08001bdf 	.word	0x08001bdf
 8001ba8:	08001bf7 	.word	0x08001bf7
 8001bac:	08001c81 	.word	0x08001c81
 8001bb0:	08001c45 	.word	0x08001c45
 8001bb4:	08001c45 	.word	0x08001c45
 8001bb8:	08001c5d 	.word	0x08001c5d
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	4a39      	ldr	r2, [pc, #228]	; (8001ca4 <I2C_GetFlagSTATUS+0x130>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d024      	beq.n	8001c0e <I2C_GetFlagSTATUS+0x9a>
 8001bc4:	e068      	b.n	8001c98 <I2C_GetFlagSTATUS+0x124>
		//		1: Communication ongoing on the bus
		//		– Set by hardware on detection of SDA or SCL low
		//		– cleared by hardware on detection of a Stop condition.
		//		It indicates a communication in progress on the bus. This information is still updated when
		//		the interface is disabled (PE=0).
		if((I2Cx->SR2) & (I2C_SR2_BUSY))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d002      	beq.n	8001bd8 <I2C_GetFlagSTATUS+0x64>
			bitstatus = SET ;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;
		break;
 8001bd6:	e05f      	b.n	8001c98 <I2C_GetFlagSTATUS+0x124>
			bitstatus = RESET;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	77fb      	strb	r3, [r7, #31]
		break;
 8001bdc:	e05c      	b.n	8001c98 <I2C_GetFlagSTATUS+0x124>
		//		0: No Start condition
		//		1: Start condition generated.
		//		– Set when a Start condition generated.
		//		– Cleared by software by reading the SR1 register followed by writing the DR register, or by
		//		hardware when PE=0
		if((I2Cx->SR1) & (I2C_SR1_SB))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d002      	beq.n	8001bf0 <I2C_GetFlagSTATUS+0x7c>
			bitstatus = SET ;
 8001bea:	2301      	movs	r3, #1
 8001bec:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;
		break;
 8001bee:	e053      	b.n	8001c98 <I2C_GetFlagSTATUS+0x124>
			bitstatus = RESET;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	77fb      	strb	r3, [r7, #31]
		break;
 8001bf4:	e050      	b.n	8001c98 <I2C_GetFlagSTATUS+0x124>
		//		This bit is cleared by software reading SR1 register followed reading SR2, or by hardware
		//		when PE=0.
		//		Address matched (Slave)
		//		0: Address mismatched or not received.
		//		1: Received address matched
		if( (I2Cx->SR1) & (I2C_SR1_ADDR))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d002      	beq.n	8001c08 <I2C_GetFlagSTATUS+0x94>
			bitstatus = SET ;
 8001c02:	2301      	movs	r3, #1
 8001c04:	77fb      	strb	r3, [r7, #31]
		else
			bitstatus = RESET;
		break;
 8001c06:	e047      	b.n	8001c98 <I2C_GetFlagSTATUS+0x124>
			bitstatus = RESET;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	77fb      	strb	r3, [r7, #31]
		break;
 8001c0c:	e044      	b.n	8001c98 <I2C_GetFlagSTATUS+0x124>
	}
	case MASTER_BYTE_TRANSMITTING:
	{
		// Read I2C Status Register
		flag1 = I2Cx->SR1;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	61bb      	str	r3, [r7, #24]
		flag2 = I2Cx->SR2;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	617b      	str	r3, [r7, #20]
		flag2 = flag2 << 16;
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	041b      	lsls	r3, r3, #16
 8001c1e:	617b      	str	r3, [r7, #20]
		// Get the last event value from I2C Status Register
		lastevent = ((flag2 | flag1) & (uint32_t)0x00FFFFFF);
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001c2a:	613b      	str	r3, [r7, #16]
		//Check whether the last event contains the I2C_EVENT
		if( (lastevent & MASTER_BYTE_TRANSMITTING) == MASTER_BYTE_TRANSMITTING)
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ca4 <I2C_GetFlagSTATUS+0x130>)
 8001c30:	4013      	ands	r3, r2
 8001c32:	4a1c      	ldr	r2, [pc, #112]	; (8001ca4 <I2C_GetFlagSTATUS+0x130>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d102      	bne.n	8001c3e <I2C_GetFlagSTATUS+0xca>
		{
			/* SUCCESS: last event is equal to I2C_EVENT */
			bitstatus = SET ;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	77fb      	strb	r3, [r7, #31]
		else
		{
			/* ERROR: last event is different from I2C_EVENT */
			bitstatus = RESET;
		}
		break;
 8001c3c:	e02c      	b.n	8001c98 <I2C_GetFlagSTATUS+0x124>
			bitstatus = RESET;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	77fb      	strb	r3, [r7, #31]
		break;
 8001c42:	e029      	b.n	8001c98 <I2C_GetFlagSTATUS+0x124>
	case EV8://EV8: TxE=1, shift register not empty, d. ata register empty, cleared by writing DR register
	{
		//		Bit 7 TxE: Data register empty (transmitters)
		//		0: Data register not empty
		//		1: Data register empty
		if(I2Cx->SR1 & (I2C_SR1_TXE))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d002      	beq.n	8001c56 <I2C_GetFlagSTATUS+0xe2>
		{
			bitstatus = SET ;
 8001c50:	2301      	movs	r3, #1
 8001c52:	77fb      	strb	r3, [r7, #31]
		}
		else
		{
			bitstatus = RESET;
		}
		break;
 8001c54:	e020      	b.n	8001c98 <I2C_GetFlagSTATUS+0x124>
			bitstatus = RESET;
 8001c56:	2300      	movs	r3, #0
 8001c58:	77fb      	strb	r3, [r7, #31]
		break;
 8001c5a:	e01d      	b.n	8001c98 <I2C_GetFlagSTATUS+0x124>
		//		1: Data register empty
		//----------------------------------------------
		//		Bit 2 BTF: Byte transfer finished
		//		0: Data byte transfer not done
		//		1: Data byte transfer succeeded
		if( (I2Cx->SR1 & (I2C_SR1_TXE))  &&  (I2Cx->SR1 & (I2C_SR1_BTF)))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d008      	beq.n	8001c7a <I2C_GetFlagSTATUS+0x106>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d002      	beq.n	8001c7a <I2C_GetFlagSTATUS+0x106>
		{
			bitstatus = SET ;
 8001c74:	2301      	movs	r3, #1
 8001c76:	77fb      	strb	r3, [r7, #31]
		}
		else
		{
			bitstatus = RESET;
		}
		break;
 8001c78:	e00e      	b.n	8001c98 <I2C_GetFlagSTATUS+0x124>
			bitstatus = RESET;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	77fb      	strb	r3, [r7, #31]
		break;
 8001c7e:	e00b      	b.n	8001c98 <I2C_GetFlagSTATUS+0x124>
	case EV7://EV5: RxNE = 1 Cleared by Reading DR Register
	{
		//		Bit 6 RxNE: Data register not empty (receivers)
		//		0: Data register empty
		//		1: Data register not empty
		if(I2Cx->SR1 & (I2C_SR1_RXNE))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d002      	beq.n	8001c92 <I2C_GetFlagSTATUS+0x11e>
		{
			bitstatus = SET ;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	77fb      	strb	r3, [r7, #31]
		}
		else
		{
			bitstatus = RESET;
		}
		break;
 8001c90:	e001      	b.n	8001c96 <I2C_GetFlagSTATUS+0x122>
			bitstatus = RESET;
 8001c92:	2300      	movs	r3, #0
 8001c94:	77fb      	strb	r3, [r7, #31]
		break;
 8001c96:	bf00      	nop
	}
	}
	return bitstatus;
 8001c98:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3724      	adds	r7, #36	; 0x24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr
 8001ca4:	00070080 	.word	0x00070080

08001ca8 <I2C_GenerateSTART>:
		I2Cx->CR1 &= ~(I2C_CR1_ACK);
	}
}

void I2C_GenerateSTART(I2C_TypeDef *I2Cx, Fuctional_State NewState, Repeated_Start Start)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	70fb      	strb	r3, [r7, #3]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	70bb      	strb	r3, [r7, #2]
	if(Start != RepeatedStart)
 8001cb8:	78bb      	ldrb	r3, [r7, #2]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d007      	beq.n	8001cce <I2C_GenerateSTART+0x26>
	{
		//Check if bus is idle
	while(I2C_GetFlagSTATUS(I2Cx, I2C_BUS_BUSY));
 8001cbe:	bf00      	nop
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff ff56 	bl	8001b74 <I2C_GetFlagSTATUS>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f8      	bne.n	8001cc0 <I2C_GenerateSTART+0x18>
	//	0: No Start generation
	//	1: Repeated start generation
	//	In Slave mode:
	//	0: No Start generation
	//	1: Start generation when the bus is free
	if(NewState == ENABLE)
 8001cce:	78fb      	ldrb	r3, [r7, #3]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d106      	bne.n	8001ce2 <I2C_GenerateSTART+0x3a>
	{
		/*Generate a START Condition*/
		I2Cx->CR1 |= I2C_CR1_START;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	601a      	str	r2, [r3, #0]
	else
	{
		/*Disable The START Condition Generation*/
		I2Cx->CR1 &= ~(I2C_CR1_START);
	}
}
 8001ce0:	e005      	b.n	8001cee <I2C_GenerateSTART+0x46>
		I2Cx->CR1 &= ~(I2C_CR1_START);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	601a      	str	r2, [r3, #0]
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <I2C_GenerateSTOP>:

void I2C_GenerateSTOP(I2C_TypeDef *I2Cx, Fuctional_State NewState)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	70fb      	strb	r3, [r7, #3]
	if(NewState == ENABLE)
 8001d02:	78fb      	ldrb	r3, [r7, #3]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d106      	bne.n	8001d16 <I2C_GenerateSTOP+0x20>
	{
		/*Generate a START Condition*/
		I2Cx->CR1 |= I2C_CR1_STOP;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	601a      	str	r2, [r3, #0]
	else
	{
		/*Disable The START Condition Generation*/
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
	}
}
 8001d14:	e005      	b.n	8001d22 <I2C_GenerateSTOP+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	601a      	str	r2, [r3, #0]
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <I2C_SendAddress>:

void I2C_SendAddress(I2C_TypeDef *I2Cx, uint16_t Address, I2C_Direction Direction)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	807b      	strh	r3, [r7, #2]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	707b      	strb	r3, [r7, #1]
	Address = (Address << 1);
 8001d3c:	887b      	ldrh	r3, [r7, #2]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	807b      	strh	r3, [r7, #2]

	if(Direction == I2C_Direction_Transmitter)
 8001d42:	787b      	ldrb	r3, [r7, #1]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d104      	bne.n	8001d52 <I2C_SendAddress+0x26>
	{
		/*Reset the address bit0 for write*/
		Address &= ~(1<<0);
 8001d48:	887b      	ldrh	r3, [r7, #2]
 8001d4a:	f023 0301 	bic.w	r3, r3, #1
 8001d4e:	807b      	strh	r3, [r7, #2]
 8001d50:	e003      	b.n	8001d5a <I2C_SendAddress+0x2e>
	}
	else  //I2C_Direction_Receiver
	{
		/*Set the address bit0 for Read*/
		Address |= (1<<0);
 8001d52:	887b      	ldrh	r3, [r7, #2]
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	807b      	strh	r3, [r7, #2]
	}
	/*Send The Address*/
	I2Cx->DR = Address ;
 8001d5a:	887a      	ldrh	r2, [r7, #2]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	611a      	str	r2, [r3, #16]
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr
	...

08001d6c <Slave_States>:

void Slave_States(I2C_TypeDef *I2Cx,Slave_State State)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	70fb      	strb	r3, [r7, #3]
	uint8_t index = (I2Cx == I2C1) ? I2C1_INDEX : I2C2_INDEX ;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a32      	ldr	r2, [pc, #200]	; (8001e44 <Slave_States+0xd8>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	bf14      	ite	ne
 8001d80:	2301      	movne	r3, #1
 8001d82:	2300      	moveq	r3, #0
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	73fb      	strb	r3, [r7, #15]

	switch(State)
 8001d88:	78fb      	ldrb	r3, [r7, #3]
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d856      	bhi.n	8001e3c <Slave_States+0xd0>
 8001d8e:	a201      	add	r2, pc, #4	; (adr r2, 8001d94 <Slave_States+0x28>)
 8001d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d94:	08001daf 	.word	0x08001daf
 8001d98:	08001da9 	.word	0x08001da9
 8001d9c:	08001dd3 	.word	0x08001dd3
 8001da0:	08001deb 	.word	0x08001deb
 8001da4:	08001e0f 	.word	0x08001e0f
	{
	case I2C_ERROR_AF:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	699b      	ldr	r3, [r3, #24]
		{
			//Slave shouldn't send anything else
		}
		break;
 8001dac:	e046      	b.n	8001e3c <Slave_States+0xd0>

	case I2C_EV_STOP:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d03b      	beq.n	8001e32 <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is Sent by the master
			Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_STOP);
 8001dba:	7bfa      	ldrb	r2, [r7, #15]
 8001dbc:	4922      	ldr	r1, [pc, #136]	; (8001e48 <Slave_States+0xdc>)
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	3320      	adds	r3, #32
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2000      	movs	r0, #0
 8001dce:	4798      	blx	r3
		}
		break;
 8001dd0:	e02f      	b.n	8001e32 <Slave_States+0xc6>

	case I2C_EV_ADDR_Matched:
		//Notify APP that The address is matched with The slave address
		Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_ADDR_Matched);
 8001dd2:	7bfa      	ldrb	r2, [r7, #15]
 8001dd4:	491c      	ldr	r1, [pc, #112]	; (8001e48 <Slave_States+0xdc>)
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	4413      	add	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	440b      	add	r3, r1
 8001de0:	3320      	adds	r3, #32
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2002      	movs	r0, #2
 8001de6:	4798      	blx	r3
		break;
 8001de8:	e028      	b.n	8001e3c <Slave_States+0xd0>

	case I2C_EV_DATA_REQ:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d01f      	beq.n	8001e36 <Slave_States+0xca>
		{
			//The APP Layer should send the data (MCAL_I2C_SlaveSendData)in this state
			Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_DATA_REQ);
 8001df6:	7bfa      	ldrb	r2, [r7, #15]
 8001df8:	4913      	ldr	r1, [pc, #76]	; (8001e48 <Slave_States+0xdc>)
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4413      	add	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	440b      	add	r3, r1
 8001e04:	3320      	adds	r3, #32
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2003      	movs	r0, #3
 8001e0a:	4798      	blx	r3
		}

		break;
 8001e0c:	e013      	b.n	8001e36 <Slave_States+0xca>

	case I2C_EV_DATA_RCV:
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & (I2C_SR2_TRA)) )
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10f      	bne.n	8001e3a <Slave_States+0xce>
		{
			//The APP Layer should read the data (MCAL_I2C_SlaveReceiveData)in this state
			Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_DATA_RCV);
 8001e1a:	7bfa      	ldrb	r2, [r7, #15]
 8001e1c:	490a      	ldr	r1, [pc, #40]	; (8001e48 <Slave_States+0xdc>)
 8001e1e:	4613      	mov	r3, r2
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	4413      	add	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	440b      	add	r3, r1
 8001e28:	3320      	adds	r3, #32
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2004      	movs	r0, #4
 8001e2e:	4798      	blx	r3
		}

		break;
 8001e30:	e003      	b.n	8001e3a <Slave_States+0xce>
		break;
 8001e32:	bf00      	nop
 8001e34:	e002      	b.n	8001e3c <Slave_States+0xd0>
		break;
 8001e36:	bf00      	nop
 8001e38:	e000      	b.n	8001e3c <Slave_States+0xd0>
		break;
 8001e3a:	bf00      	nop
	}
}
 8001e3c:	bf00      	nop
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40005400 	.word	0x40005400
 8001e48:	20004090 	.word	0x20004090

08001e4c <MCAL_I2C_Init>:
 * Retval            -None.
 * Note              -Supported for I2C SM mode only.
 * 					-Support only 7-bit address mode.
 */
void MCAL_I2C_Init(I2C_TypeDef *I2Cx , I2C_Config_t *I2C_Config)
{
 8001e4c:	b5b0      	push	{r4, r5, r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
	uint16_t tempreg = 0  , freqrange = 0 ;
 8001e56:	2300      	movs	r3, #0
 8001e58:	82fb      	strh	r3, [r7, #22]
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	82bb      	strh	r3, [r7, #20]
	uint32_t pclk1 = 8000000 ;
 8001e5e:	4b7a      	ldr	r3, [pc, #488]	; (8002048 <MCAL_I2C_Init+0x1fc>)
 8001e60:	613b      	str	r3, [r7, #16]
	uint16_t result = 0 ;
 8001e62:	2300      	movs	r3, #0
 8001e64:	81fb      	strh	r3, [r7, #14]

	//Enable RCC Clock

	if (I2Cx == I2C1)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a78      	ldr	r2, [pc, #480]	; (800204c <MCAL_I2C_Init+0x200>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d110      	bne.n	8001e90 <MCAL_I2C_Init+0x44>
	{
		Global_I2C_Config[I2C1_INDEX] = *I2C_Config;
 8001e6e:	4a78      	ldr	r2, [pc, #480]	; (8002050 <MCAL_I2C_Init+0x204>)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	4614      	mov	r4, r2
 8001e74:	461d      	mov	r5, r3
 8001e76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e7e:	682b      	ldr	r3, [r5, #0]
 8001e80:	6023      	str	r3, [r4, #0]
		RCC_I2C1_CLK_EN() ;
 8001e82:	4b74      	ldr	r3, [pc, #464]	; (8002054 <MCAL_I2C_Init+0x208>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	4a73      	ldr	r2, [pc, #460]	; (8002054 <MCAL_I2C_Init+0x208>)
 8001e88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e8c:	61d3      	str	r3, [r2, #28]
 8001e8e:	e010      	b.n	8001eb2 <MCAL_I2C_Init+0x66>
	}
	else
	{
		Global_I2C_Config[I2C2_INDEX] = *I2C_Config;
 8001e90:	4b6f      	ldr	r3, [pc, #444]	; (8002050 <MCAL_I2C_Init+0x204>)
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8001e98:	4615      	mov	r5, r2
 8001e9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ea0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ea2:	682b      	ldr	r3, [r5, #0]
 8001ea4:	6023      	str	r3, [r4, #0]
		RCC_I2C2_CLK_EN() ;
 8001ea6:	4b6b      	ldr	r3, [pc, #428]	; (8002054 <MCAL_I2C_Init+0x208>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	4a6a      	ldr	r2, [pc, #424]	; (8002054 <MCAL_I2C_Init+0x208>)
 8001eac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001eb0:	61d3      	str	r3, [r2, #28]
	}


	if(I2C_Config->I2C_Mode == I2C_Mode_I2C)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d17f      	bne.n	8001fba <MCAL_I2C_Init+0x16e>
	{
		/*----------------- INIT Timing --------------------*/

		//--I2C_CR2.FREQ[5:0]: Peripheral clock frequency
		//get I2C_CR2 Register value
		tempreg = I2Cx->CR2 ;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	82fb      	strh	r3, [r7, #22]
		// clear Frequency FREQ[5:0] bits
		tempreg &= ~(I2C_CR2_FREQ_Msk);
 8001ec0:	8afb      	ldrh	r3, [r7, #22]
 8001ec2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ec6:	82fb      	strh	r3, [r7, #22]
		//get pclk1 frequency value
		pclk1 = MCAL_RCC_GetPCLK1Freq();
 8001ec8:	f000 fa30 	bl	800232c <MCAL_RCC_GetPCLK1Freq>
 8001ecc:	6138      	str	r0, [r7, #16]
		//set frequency bits depending on pclk1 value
		freqrange = (uint16_t)(pclk1/1000000);
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4a61      	ldr	r2, [pc, #388]	; (8002058 <MCAL_I2C_Init+0x20c>)
 8001ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed6:	0c9b      	lsrs	r3, r3, #18
 8001ed8:	82bb      	strh	r3, [r7, #20]

		tempreg |= freqrange ;
 8001eda:	8afa      	ldrh	r2, [r7, #22]
 8001edc:	8abb      	ldrh	r3, [r7, #20]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	82fb      	strh	r3, [r7, #22]
		//Write to I2Cx->CR2
		I2Cx->CR2 = tempreg;
 8001ee2:	8afa      	ldrh	r2, [r7, #22]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	605a      	str	r2, [r3, #4]

		//• Configure the clock control registers I2Cx->CCR

		// Disable the selected I2C peripheral to configure Time
		I2Cx->CR1 &= ~(I2C_CR1_PE);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f023 0201 	bic.w	r2, r3, #1
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	601a      	str	r2, [r3, #0]

		tempreg = 0	;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	82fb      	strh	r3, [r7, #22]

		if (I2C_Config->I2C_ClockSpeed == I2C_SCLK_SM_50K || I2C_Config->I2C_ClockSpeed == I2C_SCLK_SM_100K)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d004      	beq.n	8001f0e <MCAL_I2C_Init+0xc2>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a54      	ldr	r2, [pc, #336]	; (800205c <MCAL_I2C_Init+0x210>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d112      	bne.n	8001f34 <MCAL_I2C_Init+0xe8>
			// Thigh = CCR * TPCLK1
			// Thigh = Tclk /2
			// CCR = Tclk / (2 * TPCLK1)
			// CCR = Fpclk1 / (2 * I2C_Clock_Frequency)

			result = (uint16_t)(pclk1 / (I2C_Config->I2C_ClockSpeed <<1 )) ;
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1a:	81fb      	strh	r3, [r7, #14]

			tempreg |= result ;
 8001f1c:	8afa      	ldrh	r2, [r7, #22]
 8001f1e:	89fb      	ldrh	r3, [r7, #14]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	82fb      	strh	r3, [r7, #22]


			// Write To I2Cx CCR

			I2Cx->CCR = tempreg ;
 8001f24:	8afa      	ldrh	r2, [r7, #22]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	61da      	str	r2, [r3, #28]
			/*--------------I2C_TRISE Configuration--------------*/
			//For instance: in Sm mode, the maximum allowed SCL rise time is 1000 ns.
			//If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLK1 = 125 ns
			//therefore the TRISE[5:0] bits must be programmed with 09h
			//(1000 ns / 125 ns = 8 + 1)
			I2Cx->TRISE = freqrange + 1 ;
 8001f2a:	8abb      	ldrh	r3, [r7, #20]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	461a      	mov	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	621a      	str	r2, [r3, #32]
		{
			// Fast Mode Not Supported
		}

		//Get I2Cx->CR1 value
		tempreg = I2Cx->CR1 ;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	82fb      	strh	r3, [r7, #22]

		tempreg |= (uint16_t)(I2C_Config->I2C_ACK_Control | I2C_Config->StrechMode | I2C_Config->General_Call_Adress_Detection | I2C_Config->I2C_Mode);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	4313      	orrs	r3, r2
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	4313      	orrs	r3, r2
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	8afb      	ldrh	r3, [r7, #22]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	82fb      	strh	r3, [r7, #22]


		//Write to I2Cx->CR1
		I2Cx->CR1 = tempreg ;
 8001f64:	8afa      	ldrh	r2, [r7, #22]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	601a      	str	r2, [r3, #0]

		/*--------------I2C_OAR1 & I2C_OAR2 Configuration--------------*/
		tempreg = 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	82fb      	strh	r3, [r7, #22]

		if(I2C_Config->I2C_Slave_Address.Enable_Dual_ADD == 1)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	899b      	ldrh	r3, [r3, #12]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d10d      	bne.n	8001f92 <MCAL_I2C_Init+0x146>
		{
			tempreg = I2C_OAR2_ENDUAL ;
 8001f76:	2301      	movs	r3, #1
 8001f78:	82fb      	strh	r3, [r7, #22]
			tempreg |= I2C_Config->I2C_Slave_Address.secondary_slave_address << I2C_OAR2_ADD2_Pos;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	8a1b      	ldrh	r3, [r3, #16]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	b21a      	sxth	r2, r3
 8001f82:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	b21b      	sxth	r3, r3
 8001f8a:	82fb      	strh	r3, [r7, #22]
			I2Cx->OAR2 = tempreg ;
 8001f8c:	8afa      	ldrh	r2, [r7, #22]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	60da      	str	r2, [r3, #12]
		}

		tempreg = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	82fb      	strh	r3, [r7, #22]
		tempreg |= I2C_Config->I2C_Slave_Address.primary_slave_address << 1;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	89db      	ldrh	r3, [r3, #14]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	b21a      	sxth	r2, r3
 8001f9e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	b21b      	sxth	r3, r3
 8001fa6:	82fb      	strh	r3, [r7, #22]
		tempreg |= I2C_Config->I2C_Slave_Address.I2C_Addressing_Slave_Mode ;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	8afb      	ldrh	r3, [r7, #22]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	82fb      	strh	r3, [r7, #22]
		I2Cx->OAR1 = tempreg ;
 8001fb4:	8afa      	ldrh	r2, [r7, #22]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
	{
		// I2C Mode SMBUS is not spported yet
	}

	// Interrupt Mode (Slave Mode) //check callback pointer != NULL
	if( I2C_Config->P_Slave_Event_CallBack != NULL) // that enable IRQ States Mode
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d038      	beq.n	8002034 <MCAL_I2C_Init+0x1e8>
	{
		//Enable IRQ
		I2Cx->CR2 |= (I2C_CR2_ITBUFEN);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= (I2C_CR2_ITERREN);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= (I2C_CR2_ITEVTEN);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	605a      	str	r2, [r3, #4]

		if(I2Cx == I2C1)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a18      	ldr	r2, [pc, #96]	; (800204c <MCAL_I2C_Init+0x200>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d10c      	bne.n	8002008 <MCAL_I2C_Init+0x1bc>
		{
			NVIC_IQR31_I2C1_EV_Enable();
 8001fee:	4b1c      	ldr	r3, [pc, #112]	; (8002060 <MCAL_I2C_Init+0x214>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a1b      	ldr	r2, [pc, #108]	; (8002060 <MCAL_I2C_Init+0x214>)
 8001ff4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ff8:	6013      	str	r3, [r2, #0]
			NVIC_IQR32_I2C1_ER_Enable();
 8001ffa:	4b1a      	ldr	r3, [pc, #104]	; (8002064 <MCAL_I2C_Init+0x218>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a19      	ldr	r2, [pc, #100]	; (8002064 <MCAL_I2C_Init+0x218>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	e00f      	b.n	8002028 <MCAL_I2C_Init+0x1dc>
		}
		else if(I2Cx == I2C2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a17      	ldr	r2, [pc, #92]	; (8002068 <MCAL_I2C_Init+0x21c>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d10b      	bne.n	8002028 <MCAL_I2C_Init+0x1dc>
		{
			NVIC_IQR33_I2C2_EV_Enable();
 8002010:	4b14      	ldr	r3, [pc, #80]	; (8002064 <MCAL_I2C_Init+0x218>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a13      	ldr	r2, [pc, #76]	; (8002064 <MCAL_I2C_Init+0x218>)
 8002016:	f043 0302 	orr.w	r3, r3, #2
 800201a:	6013      	str	r3, [r2, #0]
			NVIC_IQR34_I2C2_ER_Enable();
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <MCAL_I2C_Init+0x218>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a10      	ldr	r2, [pc, #64]	; (8002064 <MCAL_I2C_Init+0x218>)
 8002022:	f043 0304 	orr.w	r3, r3, #4
 8002026:	6013      	str	r3, [r2, #0]
		}
		I2Cx->SR1 = 0;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	615a      	str	r2, [r3, #20]
		I2Cx->SR2 = 0;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	619a      	str	r2, [r3, #24]
	}
	// Enable The selecte I2C Peripheral
	I2Cx->CR1 |= I2C_CR1_PE ;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f043 0201 	orr.w	r2, r3, #1
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	601a      	str	r2, [r3, #0]

}
 8002040:	bf00      	nop
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bdb0      	pop	{r4, r5, r7, pc}
 8002048:	007a1200 	.word	0x007a1200
 800204c:	40005400 	.word	0x40005400
 8002050:	20004090 	.word	0x20004090
 8002054:	40021000 	.word	0x40021000
 8002058:	431bde83 	.word	0x431bde83
 800205c:	000186a0 	.word	0x000186a0
 8002060:	e000e100 	.word	0xe000e100
 8002064:	e000e104 	.word	0xe000e104
 8002068:	40005800 	.word	0x40005800

0800206c <MCAL_I2C_GPIO_Set_Pins>:
 * @retval 			- None
 * Note 			- Must open clock for AFIO & GPIO After GPIO Initialization
 * 					- Supported for I2C SM MODE only
 */
void MCAL_I2C_GPIO_Set_Pins(I2C_TypeDef *I2Cx)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg;

	if(I2Cx == I2C1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a1f      	ldr	r2, [pc, #124]	; (80020f4 <MCAL_I2C_GPIO_Set_Pins+0x88>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d118      	bne.n	80020ae <MCAL_I2C_GPIO_Set_Pins+0x42>
	{
		// PB6: I2C1_SCL --> Open drain
		// PB7: I2C1_SDA --> Open drain

		PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 800207c:	2340      	movs	r3, #64	; 0x40
 800207e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8002080:	2307      	movs	r3, #7
 8002082:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_50M;
 8002084:	2303      	movs	r3, #3
 8002086:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8002088:	f107 030c 	add.w	r3, r7, #12
 800208c:	4619      	mov	r1, r3
 800208e:	481a      	ldr	r0, [pc, #104]	; (80020f8 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8002090:	f7ff fcc2 	bl	8001a18 <MCAL_GPIO_Init>


		PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8002094:	2380      	movs	r3, #128	; 0x80
 8002096:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8002098:	2307      	movs	r3, #7
 800209a:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_50M;
 800209c:	2303      	movs	r3, #3
 800209e:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80020a0:	f107 030c 	add.w	r3, r7, #12
 80020a4:	4619      	mov	r1, r3
 80020a6:	4814      	ldr	r0, [pc, #80]	; (80020f8 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 80020a8:	f7ff fcb6 	bl	8001a18 <MCAL_GPIO_Init>
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
		MCAL_GPIO_Init(GPIOB, &PinCfg);

	}

}
 80020ac:	e01d      	b.n	80020ea <MCAL_I2C_GPIO_Set_Pins+0x7e>
	}else if(I2Cx == I2C2)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a12      	ldr	r2, [pc, #72]	; (80020fc <MCAL_I2C_GPIO_Set_Pins+0x90>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d119      	bne.n	80020ea <MCAL_I2C_GPIO_Set_Pins+0x7e>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 80020b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ba:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 80020bc:	2307      	movs	r3, #7
 80020be:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80020c0:	2301      	movs	r3, #1
 80020c2:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80020c4:	f107 030c 	add.w	r3, r7, #12
 80020c8:	4619      	mov	r1, r3
 80020ca:	480b      	ldr	r0, [pc, #44]	; (80020f8 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 80020cc:	f7ff fca4 	bl	8001a18 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 80020d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020d4:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 80020d6:	2307      	movs	r3, #7
 80020d8:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80020da:	2301      	movs	r3, #1
 80020dc:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80020de:	f107 030c 	add.w	r3, r7, #12
 80020e2:	4619      	mov	r1, r3
 80020e4:	4804      	ldr	r0, [pc, #16]	; (80020f8 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 80020e6:	f7ff fc97 	bl	8001a18 <MCAL_GPIO_Init>
}
 80020ea:	bf00      	nop
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40005400 	.word	0x40005400
 80020f8:	40010c00 	.word	0x40010c00
 80020fc:	40005800 	.word	0x40005800

08002100 <MCAL_I2C_Master_TX>:
 * @param [in] 		- Start : select send start or repeated start
 * @retval 			- None
 * Note 			- None
 */
void MCAL_I2C_Master_TX(I2C_TypeDef *I2Cx, uint16_t DevAddr ,uint8_t* dataOut , uint32_t datalen , Stop_Condition Stop , Repeated_Start Start)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	607a      	str	r2, [r7, #4]
 800210a:	603b      	str	r3, [r7, #0]
 800210c:	460b      	mov	r3, r1
 800210e:	817b      	strh	r3, [r7, #10]
	int i = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]
	//todo: support timeout(configure timer working for specific duration rise interrupt
	//timer_interrupt(){ flag = 1 }
	//so any code exist in while(check flag || any polling conditions)

	//1. Set The START bit in the I2C_CR1 register to generate a start condition
	I2C_GenerateSTART(I2Cx, ENABLE, Start);
 8002114:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002118:	461a      	mov	r2, r3
 800211a:	2101      	movs	r1, #1
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f7ff fdc3 	bl	8001ca8 <I2C_GenerateSTART>

	//2. Wait for EV5
	//EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	while(!I2C_GetFlagSTATUS(I2Cx, EV5));
 8002122:	bf00      	nop
 8002124:	2101      	movs	r1, #1
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f7ff fd24 	bl	8001b74 <I2C_GetFlagSTATUS>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0f8      	beq.n	8002124 <MCAL_I2C_Master_TX+0x24>

	//3. Send Address
	I2C_SendAddress(I2Cx, DevAddr, I2C_Direction_Transmitter);
 8002132:	897b      	ldrh	r3, [r7, #10]
 8002134:	2200      	movs	r2, #0
 8002136:	4619      	mov	r1, r3
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f7ff fdf7 	bl	8001d2c <I2C_SendAddress>

	//4. Wait for EV6
	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!I2C_GetFlagSTATUS(I2Cx, EV6));
 800213e:	bf00      	nop
 8002140:	2102      	movs	r1, #2
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f7ff fd16 	bl	8001b74 <I2C_GetFlagSTATUS>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0f8      	beq.n	8002140 <MCAL_I2C_Master_TX+0x40>

	//5. /* TRA(Transmit/Receive) ,BUSY ,MSL(Master/Receive) , TXE Flags(Transmit is empty) */
	while(!I2C_GetFlagSTATUS(I2Cx, MASTER_BYTE_TRANSMITTING));
 800214e:	bf00      	nop
 8002150:	4919      	ldr	r1, [pc, #100]	; (80021b8 <MCAL_I2C_Master_TX+0xb8>)
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f7ff fd0e 	bl	8001b74 <I2C_GetFlagSTATUS>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f8      	beq.n	8002150 <MCAL_I2C_Master_TX+0x50>

	for(i=0;i<datalen;i++)
 800215e:	2300      	movs	r3, #0
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	e011      	b.n	8002188 <MCAL_I2C_Master_TX+0x88>
	{
		/* Write on the Data Register the data to be sent */
		I2Cx->DR = dataOut[i];
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	4413      	add	r3, r2
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	461a      	mov	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	611a      	str	r2, [r3, #16]
		//6. Wait for EV8
		//EV8: TxE=1, shift register not empty, data register empty, cleared by writing DR register
		while(!I2C_GetFlagSTATUS(I2Cx, EV8));
 8002172:	bf00      	nop
 8002174:	2104      	movs	r1, #4
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f7ff fcfc 	bl	8001b74 <I2C_GetFlagSTATUS>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0f8      	beq.n	8002174 <MCAL_I2C_Master_TX+0x74>
	for(i=0;i<datalen;i++)
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	3301      	adds	r3, #1
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d8e9      	bhi.n	8002164 <MCAL_I2C_Master_TX+0x64>
	}

	//7. Wait for EV8_2
	//EV8_2: TxE=1, BTF = 1, Program Stop request. TxE and BTF are cleared by hardware by the Stop condition
	while(!I2C_GetFlagSTATUS(I2Cx, EV8_2));
 8002190:	bf00      	nop
 8002192:	2106      	movs	r1, #6
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f7ff fced 	bl	8001b74 <I2C_GetFlagSTATUS>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0f8      	beq.n	8002192 <MCAL_I2C_Master_TX+0x92>

	if(Stop == WithStop)
 80021a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d103      	bne.n	80021b0 <MCAL_I2C_Master_TX+0xb0>
	{
		//8. Send Stop Condition
		I2C_GenerateSTOP(I2Cx,ENABLE);
 80021a8:	2101      	movs	r1, #1
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f7ff fda3 	bl	8001cf6 <I2C_GenerateSTOP>
	}

}
 80021b0:	bf00      	nop
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	00070080 	.word	0x00070080

080021bc <I2C1_EV_IRQHandler>:
 * 							ISR Functions
 * =====================================================================================
 */

void I2C1_EV_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
	volatile uint32_t dummyRead = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	607b      	str	r3, [r7, #4]
	I2C_TypeDef* I2Cx =I2C1 ;
 80021c6:	4b35      	ldr	r3, [pc, #212]	; (800229c <I2C1_EV_IRQHandler+0xe0>)
 80021c8:	617b      	str	r3, [r7, #20]
	//Interrupt Handler for both master and slave mode of a device
	uint32_t temp1, temp2, temp3;

	temp1 = I2Cx->CR2 & (I2C_CR2_ITEVTEN);
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021d2:	613b      	str	r3, [r7, #16]
	temp2 = I2Cx->CR2 & (I2C_CR2_ITBUFEN);
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021dc:	60fb      	str	r3, [r7, #12]

	temp3 = I2Cx->SR1 & (I2C_SR1_STOPF);
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	f003 0310 	and.w	r3, r3, #16
 80021e6:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by STOPF event
	//Note : Stop detection flag is applicable only slave mode
	if(temp1 && temp3)
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00c      	beq.n	8002208 <I2C1_EV_IRQHandler+0x4c>
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d009      	beq.n	8002208 <I2C1_EV_IRQHandler+0x4c>
	{
		// STOP Flag is Set
		// Clear the STOPF by reading SR1 register followed by writing to CR1 register
		dummyRead = I2Cx->SR1;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	607b      	str	r3, [r7, #4]
		I2Cx->CR1 = 0x0000;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
		Slave_States(I2Cx,I2C_EV_STOP);
 8002200:	2100      	movs	r1, #0
 8002202:	6978      	ldr	r0, [r7, #20]
 8002204:	f7ff fdb2 	bl	8001d6c <Slave_States>
	}

	/*---------------------------------------------------*/
	temp3 = I2Cx->SR1 & (I2C_SR1_ADDR);
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by ADDR event
	//Note :When master mode : Address is sent
	//		When slave mode  : Address is matched with own address
	if(temp1 && temp3)
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d012      	beq.n	800223e <I2C1_EV_IRQHandler+0x82>
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00f      	beq.n	800223e <I2C1_EV_IRQHandler+0x82>
	{
		// Interrupt is generated because of ADDR event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d109      	bne.n	800223e <I2C1_EV_IRQHandler+0x82>
		}
		else
		{
			//Slave mode
			//Clear the ADDR flag (Read SR1 , Read SR2)
			dummyRead = I2Cx->SR1;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	607b      	str	r3, [r7, #4]
			dummyRead = I2Cx->SR2;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	607b      	str	r3, [r7, #4]
			Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 8002236:	2102      	movs	r1, #2
 8002238:	6978      	ldr	r0, [r7, #20]
 800223a:	f7ff fd97 	bl	8001d6c <Slave_States>
		}
	}

	/*---------------------------------------------------*/
	temp3 = I2Cx->SR1 & (I2C_SR1_TXE);
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002246:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by TXE event
	if(temp1 && temp3)
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00c      	beq.n	8002268 <I2C1_EV_IRQHandler+0xac>
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d009      	beq.n	8002268 <I2C1_EV_IRQHandler+0xac>
	{
		// Interrupt is generated because of TXE event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d103      	bne.n	8002268 <I2C1_EV_IRQHandler+0xac>
			//Master mode
		}
		else
		{
			//Slave mode
			Slave_States(I2Cx,I2C_EV_DATA_REQ);
 8002260:	2103      	movs	r1, #3
 8002262:	6978      	ldr	r0, [r7, #20]
 8002264:	f7ff fd82 	bl	8001d6c <Slave_States>
		}
	}
	/*---------------------------------------------------*/
	temp3 = I2Cx->SR1 & (I2C_SR1_RXNE);
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002270:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by RXNE event
	if(temp1 && temp3)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00c      	beq.n	8002292 <I2C1_EV_IRQHandler+0xd6>
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d009      	beq.n	8002292 <I2C1_EV_IRQHandler+0xd6>
	{
		// Interrupt is generated because of RXNE event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d103      	bne.n	8002292 <I2C1_EV_IRQHandler+0xd6>
			//Master mode
		}
		else
		{
			//Slave mode
			Slave_States(I2Cx,I2C_EV_DATA_RCV);
 800228a:	2104      	movs	r1, #4
 800228c:	6978      	ldr	r0, [r7, #20]
 800228e:	f7ff fd6d 	bl	8001d6c <Slave_States>
		}
	}
}
 8002292:	bf00      	nop
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40005400 	.word	0x40005400

080022a0 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0

}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr

080022ac <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
//			//Slave mode
//			Slave_States(I2Cx,I2C_EV_DATA_RCV);
//		}
//	}

}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr

080022b8 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0

}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <MCAL_RCC_GetSYS_CLCKFreq>:
 * 							Generic Functions
 * =======================================================================================
 */

uint32_t MCAL_RCC_GetSYS_CLCKFreq(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
//	Set and cleared by hardware to indicate which clock source is used as system clock.
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: Not applicable
	switch  ( (RCC->CFGR  >> 2  ) & 0b11 )
 80022c8:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <MCAL_RCC_GetSYS_CLCKFreq+0x34>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	089b      	lsrs	r3, r3, #2
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d00a      	beq.n	80022ec <MCAL_RCC_GetSYS_CLCKFreq+0x28>
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d80a      	bhi.n	80022f0 <MCAL_RCC_GetSYS_CLCKFreq+0x2c>
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d002      	beq.n	80022e4 <MCAL_RCC_GetSYS_CLCKFreq+0x20>
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d002      	beq.n	80022e8 <MCAL_RCC_GetSYS_CLCKFreq+0x24>
 80022e2:	e005      	b.n	80022f0 <MCAL_RCC_GetSYS_CLCKFreq+0x2c>
	{
	case 0:

		return HSI_RC_Clk ;
 80022e4:	4b05      	ldr	r3, [pc, #20]	; (80022fc <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 80022e6:	e003      	b.n	80022f0 <MCAL_RCC_GetSYS_CLCKFreq+0x2c>
		break ;

	case 1:

		//todo need to calculate  it //HSE User Should Specify it
		return HSE_Clock ;
 80022e8:	4b05      	ldr	r3, [pc, #20]	; (8002300 <MCAL_RCC_GetSYS_CLCKFreq+0x3c>)
 80022ea:	e001      	b.n	80022f0 <MCAL_RCC_GetSYS_CLCKFreq+0x2c>
		break ;

	case 2:

		//todo need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000 ;
 80022ec:	4b04      	ldr	r3, [pc, #16]	; (8002300 <MCAL_RCC_GetSYS_CLCKFreq+0x3c>)
 80022ee:	e7ff      	b.n	80022f0 <MCAL_RCC_GetSYS_CLCKFreq+0x2c>
		break ;

	}

}
 80022f0:	4618      	mov	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr
 80022f8:	40021000 	.word	0x40021000
 80022fc:	007a1200 	.word	0x007a1200
 8002300:	00f42400 	.word	0x00f42400

08002304 <MCAL_RCC_GetHCLKFreq>:


uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetSYS_CLCKFreq() >> AHBPrescTable[ ( (RCC->CFGR >> 4 ) & 0xF) ]  ); //the first shift is multiplication}
 8002308:	f7ff ffdc 	bl	80022c4 <MCAL_RCC_GetSYS_CLCKFreq>
 800230c:	4602      	mov	r2, r0
 800230e:	4b05      	ldr	r3, [pc, #20]	; (8002324 <MCAL_RCC_GetHCLKFreq+0x20>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	091b      	lsrs	r3, r3, #4
 8002314:	f003 030f 	and.w	r3, r3, #15
 8002318:	4903      	ldr	r1, [pc, #12]	; (8002328 <MCAL_RCC_GetHCLKFreq+0x24>)
 800231a:	5ccb      	ldrb	r3, [r1, r3]
 800231c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002320:	4618      	mov	r0, r3
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40021000 	.word	0x40021000
 8002328:	08002f44 	.word	0x08002f44

0800232c <MCAL_RCC_GetPCLK1Freq>:

//APB Low speed clock (PCLK1).
//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 8 ) & 0b111) ]  ); //the first shift is multiplication
 8002330:	f7ff ffe8 	bl	8002304 <MCAL_RCC_GetHCLKFreq>
 8002334:	4602      	mov	r2, r0
 8002336:	4b05      	ldr	r3, [pc, #20]	; (800234c <MCAL_RCC_GetPCLK1Freq+0x20>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	0a1b      	lsrs	r3, r3, #8
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	4903      	ldr	r1, [pc, #12]	; (8002350 <MCAL_RCC_GetPCLK1Freq+0x24>)
 8002342:	5ccb      	ldrb	r3, [r1, r3]
 8002344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002348:	4618      	mov	r0, r3
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40021000 	.word	0x40021000
 8002350:	08002f3c 	.word	0x08002f3c

08002354 <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 11 ) & 0b111) ]  ); //the first shift is multiplication
 8002358:	f7ff ffd4 	bl	8002304 <MCAL_RCC_GetHCLKFreq>
 800235c:	4602      	mov	r2, r0
 800235e:	4b05      	ldr	r3, [pc, #20]	; (8002374 <MCAL_RCC_GetPCLK2Freq+0x20>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	0adb      	lsrs	r3, r3, #11
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	4903      	ldr	r1, [pc, #12]	; (8002378 <MCAL_RCC_GetPCLK2Freq+0x24>)
 800236a:	5ccb      	ldrb	r3, [r1, r3]
 800236c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002370:	4618      	mov	r0, r3
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40021000 	.word	0x40021000
 8002378:	08002f3c 	.word	0x08002f3c

0800237c <SPI1_IRQHandler>:
 * 							ISR Functions
 * =====================================================================================
 */

void SPI1_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;

	irq_src.TXE  = ( ( SPI1->SPI_SR  & (1<<1)) >> 1 ) ;
 8002382:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <SPI1_IRQHandler+0x54>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	085b      	lsrs	r3, r3, #1
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	b2da      	uxtb	r2, r3
 800238e:	793b      	ldrb	r3, [r7, #4]
 8002390:	f362 0300 	bfi	r3, r2, #0, #1
 8002394:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI1->SPI_SR  & (1<<0)) >> 0 ) ;
 8002396:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <SPI1_IRQHandler+0x54>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	793b      	ldrb	r3, [r7, #4]
 80023a2:	f362 0341 	bfi	r3, r2, #1, #1
 80023a6:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI1->SPI_SR  & (1<<4)) >> 4 ) ;
 80023a8:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <SPI1_IRQHandler+0x54>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	091b      	lsrs	r3, r3, #4
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	793b      	ldrb	r3, [r7, #4]
 80023b6:	f362 0382 	bfi	r3, r2, #2, #1
 80023ba:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(irq_src);
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <SPI1_IRQHandler+0x58>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	7938      	ldrb	r0, [r7, #4]
 80023c4:	4798      	blx	r3
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40013000 	.word	0x40013000
 80023d4:	200040d8 	.word	0x200040d8

080023d8 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;

	irq_src.TXE  = ( ( SPI1->SPI_SR  & (1<<1)) >> 1 ) ;
 80023de:	4b13      	ldr	r3, [pc, #76]	; (800242c <SPI2_IRQHandler+0x54>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	085b      	lsrs	r3, r3, #1
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	793b      	ldrb	r3, [r7, #4]
 80023ec:	f362 0300 	bfi	r3, r2, #0, #1
 80023f0:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI1->SPI_SR  & (1<<0)) >> 0 ) ;
 80023f2:	4b0e      	ldr	r3, [pc, #56]	; (800242c <SPI2_IRQHandler+0x54>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	793b      	ldrb	r3, [r7, #4]
 80023fe:	f362 0341 	bfi	r3, r2, #1, #1
 8002402:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI1->SPI_SR  & (1<<4)) >> 4 ) ;
 8002404:	4b09      	ldr	r3, [pc, #36]	; (800242c <SPI2_IRQHandler+0x54>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	091b      	lsrs	r3, r3, #4
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	b2da      	uxtb	r2, r3
 8002410:	793b      	ldrb	r3, [r7, #4]
 8002412:	f362 0382 	bfi	r3, r2, #2, #1
 8002416:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(irq_src);
 8002418:	4b05      	ldr	r3, [pc, #20]	; (8002430 <SPI2_IRQHandler+0x58>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	7938      	ldrb	r0, [r7, #4]
 8002420:	4798      	blx	r3
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40013000 	.word	0x40013000
 8002430:	200040d8 	.word	0x200040d8

08002434 <MCAL_TIM_Init>:
 * @retval		 -none
 * Note			 -none
 */

Error_status MCAL_TIM_Init(TIM_TypeDef *TIMx,TIM_Config_t *TIM_Config)
{
 8002434:	b4b0      	push	{r4, r5, r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]


	//Clock & Configurations
	if (TIMx == TIM2)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002444:	d116      	bne.n	8002474 <MCAL_TIM_Init+0x40>
	{
		RCC_TIM2_CLK_EN();
 8002446:	4b91      	ldr	r3, [pc, #580]	; (800268c <MCAL_TIM_Init+0x258>)
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	4a90      	ldr	r2, [pc, #576]	; (800268c <MCAL_TIM_Init+0x258>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	61d3      	str	r3, [r2, #28]
		Global_TIM_Config[0] = *TIM_Config ;
 8002452:	4a8f      	ldr	r2, [pc, #572]	; (8002690 <MCAL_TIM_Init+0x25c>)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	4614      	mov	r4, r2
 8002458:	461d      	mov	r5, r3
 800245a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800245c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800245e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002462:	e884 0003 	stmia.w	r4, {r0, r1}
		NVIC_IQR28_TIM2_Enable();
 8002466:	4b8b      	ldr	r3, [pc, #556]	; (8002694 <MCAL_TIM_Init+0x260>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a8a      	ldr	r2, [pc, #552]	; (8002694 <MCAL_TIM_Init+0x260>)
 800246c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	e039      	b.n	80024e8 <MCAL_TIM_Init+0xb4>
	}
	else if (TIMx == TIM3)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a88      	ldr	r2, [pc, #544]	; (8002698 <MCAL_TIM_Init+0x264>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d117      	bne.n	80024ac <MCAL_TIM_Init+0x78>
	{
		RCC_TIM3_CLK_EN();
 800247c:	4b83      	ldr	r3, [pc, #524]	; (800268c <MCAL_TIM_Init+0x258>)
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	4a82      	ldr	r2, [pc, #520]	; (800268c <MCAL_TIM_Init+0x258>)
 8002482:	f043 0302 	orr.w	r3, r3, #2
 8002486:	61d3      	str	r3, [r2, #28]
		Global_TIM_Config[1] = *TIM_Config ;
 8002488:	4b81      	ldr	r3, [pc, #516]	; (8002690 <MCAL_TIM_Init+0x25c>)
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	f103 0418 	add.w	r4, r3, #24
 8002490:	4615      	mov	r5, r2
 8002492:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002494:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002496:	e895 0003 	ldmia.w	r5, {r0, r1}
 800249a:	e884 0003 	stmia.w	r4, {r0, r1}
		NVIC_IQR29_TIM3_Enable();
 800249e:	4b7d      	ldr	r3, [pc, #500]	; (8002694 <MCAL_TIM_Init+0x260>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a7c      	ldr	r2, [pc, #496]	; (8002694 <MCAL_TIM_Init+0x260>)
 80024a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e01d      	b.n	80024e8 <MCAL_TIM_Init+0xb4>

	}
	else if (TIMx == TIM4)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a7b      	ldr	r2, [pc, #492]	; (800269c <MCAL_TIM_Init+0x268>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d117      	bne.n	80024e4 <MCAL_TIM_Init+0xb0>
	{
		RCC_TIM4_CLK_EN();
 80024b4:	4b75      	ldr	r3, [pc, #468]	; (800268c <MCAL_TIM_Init+0x258>)
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	4a74      	ldr	r2, [pc, #464]	; (800268c <MCAL_TIM_Init+0x258>)
 80024ba:	f043 0304 	orr.w	r3, r3, #4
 80024be:	61d3      	str	r3, [r2, #28]
		Global_TIM_Config[2] = *TIM_Config ;
 80024c0:	4b73      	ldr	r3, [pc, #460]	; (8002690 <MCAL_TIM_Init+0x25c>)
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80024c8:	4615      	mov	r5, r2
 80024ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80024d2:	e884 0003 	stmia.w	r4, {r0, r1}
		NVIC_IQR30_TIM4_Enable();
 80024d6:	4b6f      	ldr	r3, [pc, #444]	; (8002694 <MCAL_TIM_Init+0x260>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a6e      	ldr	r2, [pc, #440]	; (8002694 <MCAL_TIM_Init+0x260>)
 80024dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	e001      	b.n	80024e8 <MCAL_TIM_Init+0xb4>
	}
	else
	{
		return TIMx_NOT_Found ;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e291      	b.n	8002a0c <MCAL_TIM_Init+0x5d8>



	//Mode Selection

	switch(TIM_Config->TIM_Mode)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d002      	beq.n	80024f6 <MCAL_TIM_Init+0xc2>
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d034      	beq.n	800255e <MCAL_TIM_Init+0x12a>
 80024f4:	e231      	b.n	800295a <MCAL_TIM_Init+0x526>

		//TIM_Auto_Reload_Not_Bufferd
		//	Bit 7 ARPE: Auto-reload preload enable
		//	0: TIMx_ARR register is not buffered
		//	1: TIMx_ARR register is buffered
		CLR_BIT(TIMx->CR1,7);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	601a      	str	r2, [r3, #0]



		if(TIM_Config->Counter.Count_Direction == Count_Direction_UP)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	7a1b      	ldrb	r3, [r3, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10c      	bne.n	8002524 <MCAL_TIM_Init+0xf0>
– Update generation through the slave mode controller
1: Only counter overflow/underflow generates an update interrupt or DMA request if
enabled.
			 */

			SET_BIT(TIMx->CR1,2) ;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f043 0204 	orr.w	r2, r3, #4
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	601a      	str	r2, [r3, #0]

			//Bit 4 DIR: Direction Selection [Upcount]
			CLR_BIT(TIMx->CR1,4) ;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f023 0210 	bic.w	r2, r3, #16
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	601a      	str	r2, [r3, #0]
		{
			//Bit 2 URS: Update request source
			SET_BIT(TIMx->CR1,2) ;
		}

		break;
 8002522:	e222      	b.n	800296a <MCAL_TIM_Init+0x536>
		else if(TIM_Config->Counter.Count_Direction == Count_Direction_DOWN)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	7a1b      	ldrb	r3, [r3, #8]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d10c      	bne.n	8002546 <MCAL_TIM_Init+0x112>
			SET_BIT(TIMx->CR1,2) ;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f043 0204 	orr.w	r2, r3, #4
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	601a      	str	r2, [r3, #0]
			SET_BIT(TIMx->CR1,4) ;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f043 0210 	orr.w	r2, r3, #16
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	601a      	str	r2, [r3, #0]
		break;
 8002544:	e211      	b.n	800296a <MCAL_TIM_Init+0x536>
		else if(TIM_Config->Counter.Count_Direction == Count_Direction_UP_DOWN)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	7a1b      	ldrb	r3, [r3, #8]
 800254a:	2b02      	cmp	r3, #2
 800254c:	f040 820d 	bne.w	800296a <MCAL_TIM_Init+0x536>
			SET_BIT(TIMx->CR1,2) ;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f043 0204 	orr.w	r2, r3, #4
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	601a      	str	r2, [r3, #0]
		break;
 800255c:	e205      	b.n	800296a <MCAL_TIM_Init+0x536>

		//TIM_Auto_Reload_Bufferd
		//	Bit 7 ARPE: Auto-reload preload enable
		//	0: TIMx_ARR register is not buffered
		//	1: TIMx_ARR register is buffered
		SET_BIT(TIMx->CR1,7);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	601a      	str	r2, [r3, #0]
1: Re-initialize the counter and generates an update of the registers. Note that the prescaler
counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if
the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload
value (TIMx_ARR) if DIR=1 (downcounting).
		 */
		SET_BIT(TIMx->EGR,0);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	f043 0201 	orr.w	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	615a      	str	r2, [r3, #20]


		/******************** Channel Configuration ********************/

		if(TIM_Config->PWM.Channel == TIM_CHANNEL_1 ){
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	7a9b      	ldrb	r3, [r3, #10]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d175      	bne.n	800266a <MCAL_TIM_Init+0x236>
			/*
			 Bits 1:0 CC1S: Capture/Compare 1 selection
			This bit-field defines the direction of the channel (input/output) as well as the used input.
			00: CC1 channel is configured as output.
			 */
			TIMx->CCMR1 |= (0b00 << 0);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699a      	ldr	r2, [r3, #24]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	619a      	str	r2, [r3, #24]




			/****** Mode Configuration ********/
			if(TIM_Config->PWM.Mode == PWM_Mode_FROZEN){
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	7adb      	ldrb	r3, [r3, #11]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d104      	bne.n	8002598 <MCAL_TIM_Init+0x164>
Note: In PWM mode 1 or 2, the OCREF level changes only when the result of the
comparison changes or when the output compare mode switches from “frozen” mode to “PWM” mode.

				 */
				//000: Frozen
				TIMx->CCMR1 |= (0b000 << 4);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699a      	ldr	r2, [r3, #24]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	619a      	str	r2, [r3, #24]
 8002596:	e04e      	b.n	8002636 <MCAL_TIM_Init+0x202>

			}else if(TIM_Config->PWM.Mode == PWM_Mode_EDGE_UP){
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	7adb      	ldrb	r3, [r3, #11]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d123      	bne.n	80025e8 <MCAL_TIM_Init+0x1b4>
	– Update generation through the slave mode controller
	1: Only counter overflow/underflow generates an update interrupt or DMA request if
	enabled.
				 */
				// Update request source Enable
				CLR_BIT(TIMx->CR1,2) ;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f023 0204 	bic.w	r2, r3, #4
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	601a      	str	r2, [r3, #0]

				//Bit 4 DIR: Direction Selection [Upcount]
				CLR_BIT(TIMx->CR1,4) ;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f023 0210 	bic.w	r2, r3, #16
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	601a      	str	r2, [r3, #0]

				//****************************************************************************

				if(TIM_Config->PWM.Ouptut_On_Compare_Match == PWM_Compare_Match_High){
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	7b9b      	ldrb	r3, [r3, #14]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d106      	bne.n	80025ce <MCAL_TIM_Init+0x19a>

					//111: PWM mode 2
					TIMx->CCMR1 |= (0b111 << 4);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	f043 0270 	orr.w	r2, r3, #112	; 0x70
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	619a      	str	r2, [r3, #24]
 80025cc:	e005      	b.n	80025da <MCAL_TIM_Init+0x1a6>

				}else{
					//110: PWM mode 1
					TIMx->CCMR1 |= (0b110 << 4);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	619a      	str	r2, [r3, #24]
				}

				//0: CCxP: Capture/Compare output polarity OCx active high
				CLR_BIT(TIMx->CCER,1);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	f023 0202 	bic.w	r2, r3, #2
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	621a      	str	r2, [r3, #32]
 80025e6:	e026      	b.n	8002636 <MCAL_TIM_Init+0x202>


			}else if(TIM_Config->PWM.Mode == PWM_Mode_EDGE_DOWN){
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	7adb      	ldrb	r3, [r3, #11]
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d122      	bne.n	8002636 <MCAL_TIM_Init+0x202>

				//Bit 2 URS: Update request source
				CLR_BIT(TIMx->CR1,2) ;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f023 0204 	bic.w	r2, r3, #4
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	601a      	str	r2, [r3, #0]

				//Bit 4 DIR: Direction [DOWN_Count]
				SET_BIT(TIMx->CR1,4) ;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f043 0210 	orr.w	r2, r3, #16
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	601a      	str	r2, [r3, #0]

				//****************************************

				if(TIM_Config->PWM.Ouptut_On_Compare_Match == PWM_Compare_Match_High){
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	7b9b      	ldrb	r3, [r3, #14]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d106      	bne.n	800261e <MCAL_TIM_Init+0x1ea>

					//110: PWM mode 1
					TIMx->CCMR1 |= (0b110 << 4);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	619a      	str	r2, [r3, #24]
 800261c:	e005      	b.n	800262a <MCAL_TIM_Init+0x1f6>

				}else{
					//111: PWM mode 2
					TIMx->CCMR1 |= (0b111 << 4);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	f043 0270 	orr.w	r2, r3, #112	; 0x70
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	619a      	str	r2, [r3, #24]
				}

				//0: CCxP: Capture/Compare output polarity OCx active high
				CLR_BIT(TIMx->CCER,1);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	f023 0202 	bic.w	r2, r3, #2
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	621a      	str	r2, [r3, #32]
It is loaded permanently if the preload feature is not selected in the TIMx_CCMR1 register
(bit OC1PE). Else the preload value is copied in the active capture/compare 1 register when an update event occurs.
The active capture/compare register contains the value to be compared to the counter
TIMx_CNT and signaled on OC1 output.
			 */
			if(TIM_Config->PWM.Compare_value <= TIM_Config->Auto_Reload_Value){
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	899a      	ldrh	r2, [r3, #12]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	88db      	ldrh	r3, [r3, #6]
 800263e:	429a      	cmp	r2, r3
 8002640:	d811      	bhi.n	8002666 <MCAL_TIM_Init+0x232>

				TIMx->CCR1 = TIM_Config->PWM.Compare_value ;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	899b      	ldrh	r3, [r3, #12]
 8002646:	461a      	mov	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	635a      	str	r2, [r3, #52]	; 0x34
1: These bits can not be modified as long as LOCK level 3 has been programmed
(LOCK bits in TIMx_BDTR register) and CC1S=00 (the channel is configured in output).
2: The PWM mode can be used without validating the preload register only
in one pulse mode (OPM bit set in TIMx_CR1 register). Else the behavior is not guaranteed.
			 */
			SET_BIT(TIMx->CCMR1,3);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	f043 0208 	orr.w	r2, r3, #8
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	619a      	str	r2, [r3, #24]
0: Off - OC1 is not active.
1: On - OC1 signal is output on the corresponding output pin.
			 */

			//Capture/Compare output enable
			SET_BIT(TIMx->CCER,0);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	f043 0201 	orr.w	r2, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	621a      	str	r2, [r3, #32]
		}




		break;
 8002664:	e183      	b.n	800296e <MCAL_TIM_Init+0x53a>
				return TIM_PWM_Auto_Reload_Value_Exceeded;
 8002666:	2305      	movs	r3, #5
 8002668:	e1d0      	b.n	8002a0c <MCAL_TIM_Init+0x5d8>
		}else if(TIM_Config->PWM.Channel == TIM_CHANNEL_2){
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	7a9b      	ldrb	r3, [r3, #10]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d17f      	bne.n	8002772 <MCAL_TIM_Init+0x33e>
			TIMx->CCMR1 |= (0x00 << 8);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699a      	ldr	r2, [r3, #24]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	619a      	str	r2, [r3, #24]
			if(TIM_Config->PWM.Mode == PWM_Mode_FROZEN){
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	7adb      	ldrb	r3, [r3, #11]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10e      	bne.n	80026a0 <MCAL_TIM_Init+0x26c>
				TIMx->CCMR1 |= (0x000 << 12);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699a      	ldr	r2, [r3, #24]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	619a      	str	r2, [r3, #24]
 800268a:	e058      	b.n	800273e <MCAL_TIM_Init+0x30a>
 800268c:	40021000 	.word	0x40021000
 8002690:	200040e0 	.word	0x200040e0
 8002694:	e000e100 	.word	0xe000e100
 8002698:	40000400 	.word	0x40000400
 800269c:	40000800 	.word	0x40000800
			}else if(TIM_Config->PWM.Mode == PWM_Mode_EDGE_UP){
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	7adb      	ldrb	r3, [r3, #11]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d123      	bne.n	80026f0 <MCAL_TIM_Init+0x2bc>
				CLR_BIT(TIMx->CR1,2) ;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f023 0204 	bic.w	r2, r3, #4
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	601a      	str	r2, [r3, #0]
				CLR_BIT(TIMx->CR1,4) ;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f023 0210 	bic.w	r2, r3, #16
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	601a      	str	r2, [r3, #0]
				if(TIM_Config->PWM.Ouptut_On_Compare_Match == PWM_Compare_Match_High){
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	7b9b      	ldrb	r3, [r3, #14]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d106      	bne.n	80026d6 <MCAL_TIM_Init+0x2a2>
					TIMx->CCMR1 |= (0b111 << 12);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	619a      	str	r2, [r3, #24]
 80026d4:	e005      	b.n	80026e2 <MCAL_TIM_Init+0x2ae>
					TIMx->CCMR1 |= (0b110 << 12);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	619a      	str	r2, [r3, #24]
				CLR_BIT(TIMx->CCER,5);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	f023 0220 	bic.w	r2, r3, #32
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	621a      	str	r2, [r3, #32]
 80026ee:	e026      	b.n	800273e <MCAL_TIM_Init+0x30a>
			}else if(TIM_Config->PWM.Mode == PWM_Mode_EDGE_DOWN){
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	7adb      	ldrb	r3, [r3, #11]
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d122      	bne.n	800273e <MCAL_TIM_Init+0x30a>
				CLR_BIT(TIMx->CR1,2) ;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f023 0204 	bic.w	r2, r3, #4
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	601a      	str	r2, [r3, #0]
				SET_BIT(TIMx->CR1,4) ;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f043 0210 	orr.w	r2, r3, #16
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	601a      	str	r2, [r3, #0]
				if(TIM_Config->PWM.Ouptut_On_Compare_Match == PWM_Compare_Match_High){
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	7b9b      	ldrb	r3, [r3, #14]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d106      	bne.n	8002726 <MCAL_TIM_Init+0x2f2>
					TIMx->CCMR1 |= (0b110 << 12);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	619a      	str	r2, [r3, #24]
 8002724:	e005      	b.n	8002732 <MCAL_TIM_Init+0x2fe>
					TIMx->CCMR1 |= (0b111 << 12);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	619a      	str	r2, [r3, #24]
				CLR_BIT(TIMx->CCER,5);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	f023 0220 	bic.w	r2, r3, #32
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	621a      	str	r2, [r3, #32]
			if(TIM_Config->PWM.Compare_value <= TIM_Config->Auto_Reload_Value){
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	899a      	ldrh	r2, [r3, #12]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	88db      	ldrh	r3, [r3, #6]
 8002746:	429a      	cmp	r2, r3
 8002748:	d811      	bhi.n	800276e <MCAL_TIM_Init+0x33a>
				TIMx->CCR2 = TIM_Config->PWM.Compare_value ;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	899b      	ldrh	r3, [r3, #12]
 800274e:	461a      	mov	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	639a      	str	r2, [r3, #56]	; 0x38
			SET_BIT(TIMx->CCMR1,11);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	619a      	str	r2, [r3, #24]
			SET_BIT(TIMx->CCER,4);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	f043 0210 	orr.w	r2, r3, #16
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	621a      	str	r2, [r3, #32]
		break;
 800276c:	e0ff      	b.n	800296e <MCAL_TIM_Init+0x53a>
				return TIM_PWM_Auto_Reload_Value_Exceeded;
 800276e:	2305      	movs	r3, #5
 8002770:	e14c      	b.n	8002a0c <MCAL_TIM_Init+0x5d8>
		}else if(TIM_Config->PWM.Channel == TIM_CHANNEL_3){
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	7a9b      	ldrb	r3, [r3, #10]
 8002776:	2b03      	cmp	r3, #3
 8002778:	d175      	bne.n	8002866 <MCAL_TIM_Init+0x432>
			TIMx->CCMR2 |= (0x00 << 0);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69da      	ldr	r2, [r3, #28]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	61da      	str	r2, [r3, #28]
			if(TIM_Config->PWM.Mode == PWM_Mode_FROZEN){
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	7adb      	ldrb	r3, [r3, #11]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d104      	bne.n	8002794 <MCAL_TIM_Init+0x360>
				TIMx->CCMR2 |= (0x000 << 4);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69da      	ldr	r2, [r3, #28]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	61da      	str	r2, [r3, #28]
 8002792:	e04e      	b.n	8002832 <MCAL_TIM_Init+0x3fe>
			}else if(TIM_Config->PWM.Mode == PWM_Mode_EDGE_UP){
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	7adb      	ldrb	r3, [r3, #11]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d123      	bne.n	80027e4 <MCAL_TIM_Init+0x3b0>
				CLR_BIT(TIMx->CR1,2) ;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f023 0204 	bic.w	r2, r3, #4
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	601a      	str	r2, [r3, #0]
				CLR_BIT(TIMx->CR1,4) ;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f023 0210 	bic.w	r2, r3, #16
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	601a      	str	r2, [r3, #0]
				if(TIM_Config->PWM.Ouptut_On_Compare_Match == PWM_Compare_Match_High){
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	7b9b      	ldrb	r3, [r3, #14]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d106      	bne.n	80027ca <MCAL_TIM_Init+0x396>
					TIMx->CCMR2 |= (0b111 << 4);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	f043 0270 	orr.w	r2, r3, #112	; 0x70
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	61da      	str	r2, [r3, #28]
 80027c8:	e005      	b.n	80027d6 <MCAL_TIM_Init+0x3a2>
					TIMx->CCMR2 |= (0b110 << 4);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	61da      	str	r2, [r3, #28]
				CLR_BIT(TIMx->CCER,9);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	621a      	str	r2, [r3, #32]
 80027e2:	e026      	b.n	8002832 <MCAL_TIM_Init+0x3fe>
			}else if(TIM_Config->PWM.Mode == PWM_Mode_EDGE_DOWN){
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	7adb      	ldrb	r3, [r3, #11]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d122      	bne.n	8002832 <MCAL_TIM_Init+0x3fe>
				CLR_BIT(TIMx->CR1,2) ;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f023 0204 	bic.w	r2, r3, #4
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	601a      	str	r2, [r3, #0]
				SET_BIT(TIMx->CR1,4) ;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f043 0210 	orr.w	r2, r3, #16
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	601a      	str	r2, [r3, #0]
				if(TIM_Config->PWM.Ouptut_On_Compare_Match == PWM_Compare_Match_High){
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	7b9b      	ldrb	r3, [r3, #14]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d106      	bne.n	800281a <MCAL_TIM_Init+0x3e6>
					TIMx->CCMR2 |= (0b110 << 4);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	61da      	str	r2, [r3, #28]
 8002818:	e005      	b.n	8002826 <MCAL_TIM_Init+0x3f2>
					TIMx->CCMR2 |= (0b111 << 4);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	f043 0270 	orr.w	r2, r3, #112	; 0x70
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	61da      	str	r2, [r3, #28]
				CLR_BIT(TIMx->CCER,9);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	621a      	str	r2, [r3, #32]
			if(TIM_Config->PWM.Compare_value <= TIM_Config->Auto_Reload_Value){
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	899a      	ldrh	r2, [r3, #12]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	88db      	ldrh	r3, [r3, #6]
 800283a:	429a      	cmp	r2, r3
 800283c:	d811      	bhi.n	8002862 <MCAL_TIM_Init+0x42e>
				TIMx->CCR3 = TIM_Config->PWM.Compare_value ;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	899b      	ldrh	r3, [r3, #12]
 8002842:	461a      	mov	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	63da      	str	r2, [r3, #60]	; 0x3c
			SET_BIT(TIMx->CCMR2,3);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	f043 0208 	orr.w	r2, r3, #8
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	61da      	str	r2, [r3, #28]
			SET_BIT(TIMx->CCER,8);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	621a      	str	r2, [r3, #32]
		break;
 8002860:	e085      	b.n	800296e <MCAL_TIM_Init+0x53a>
				return TIM_PWM_Auto_Reload_Value_Exceeded;
 8002862:	2305      	movs	r3, #5
 8002864:	e0d2      	b.n	8002a0c <MCAL_TIM_Init+0x5d8>
		}else if(TIM_Config->PWM.Channel == TIM_CHANNEL_4){
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	7a9b      	ldrb	r3, [r3, #10]
 800286a:	2b04      	cmp	r3, #4
 800286c:	d17f      	bne.n	800296e <MCAL_TIM_Init+0x53a>
			TIMx->CCMR2 |= (0x00 << 8);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69da      	ldr	r2, [r3, #28]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	61da      	str	r2, [r3, #28]
			if(TIM_Config->PWM.Mode == PWM_Mode_FROZEN){
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	7adb      	ldrb	r3, [r3, #11]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d104      	bne.n	8002888 <MCAL_TIM_Init+0x454>
				TIMx->CCMR2 |= (0x000 << 12);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69da      	ldr	r2, [r3, #28]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	61da      	str	r2, [r3, #28]
 8002886:	e04e      	b.n	8002926 <MCAL_TIM_Init+0x4f2>
			}else if(TIM_Config->PWM.Mode == PWM_Mode_EDGE_UP){
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	7adb      	ldrb	r3, [r3, #11]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d123      	bne.n	80028d8 <MCAL_TIM_Init+0x4a4>
				CLR_BIT(TIMx->CR1,2) ;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f023 0204 	bic.w	r2, r3, #4
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	601a      	str	r2, [r3, #0]
				CLR_BIT(TIMx->CR1,4) ;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f023 0210 	bic.w	r2, r3, #16
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	601a      	str	r2, [r3, #0]
				if(TIM_Config->PWM.Ouptut_On_Compare_Match == PWM_Compare_Match_High){
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	7b9b      	ldrb	r3, [r3, #14]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d106      	bne.n	80028be <MCAL_TIM_Init+0x48a>
					TIMx->CCMR2 |= (0b111 << 12);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	61da      	str	r2, [r3, #28]
 80028bc:	e005      	b.n	80028ca <MCAL_TIM_Init+0x496>
					TIMx->CCMR2 |= (0b110 << 12);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	61da      	str	r2, [r3, #28]
				CLR_BIT(TIMx->CCER,13);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	621a      	str	r2, [r3, #32]
 80028d6:	e026      	b.n	8002926 <MCAL_TIM_Init+0x4f2>
			}else if(TIM_Config->PWM.Mode == PWM_Mode_EDGE_DOWN){
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	7adb      	ldrb	r3, [r3, #11]
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d122      	bne.n	8002926 <MCAL_TIM_Init+0x4f2>
				CLR_BIT(TIMx->CR1,2) ;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f023 0204 	bic.w	r2, r3, #4
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	601a      	str	r2, [r3, #0]
				SET_BIT(TIMx->CR1,4) ;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f043 0210 	orr.w	r2, r3, #16
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	601a      	str	r2, [r3, #0]
				if(TIM_Config->PWM.Ouptut_On_Compare_Match == PWM_Compare_Match_High){
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	7b9b      	ldrb	r3, [r3, #14]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d106      	bne.n	800290e <MCAL_TIM_Init+0x4da>
					TIMx->CCMR2 |= (0b110 << 12);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	61da      	str	r2, [r3, #28]
 800290c:	e005      	b.n	800291a <MCAL_TIM_Init+0x4e6>
					TIMx->CCMR2 |= (0b111 << 12);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	61da      	str	r2, [r3, #28]
				CLR_BIT(TIMx->CCER,13);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	621a      	str	r2, [r3, #32]
			if(TIM_Config->PWM.Compare_value <= TIM_Config->Auto_Reload_Value){
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	899a      	ldrh	r2, [r3, #12]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	88db      	ldrh	r3, [r3, #6]
 800292e:	429a      	cmp	r2, r3
 8002930:	d811      	bhi.n	8002956 <MCAL_TIM_Init+0x522>
				TIMx->CCR4 = TIM_Config->PWM.Compare_value ;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	899b      	ldrh	r3, [r3, #12]
 8002936:	461a      	mov	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	641a      	str	r2, [r3, #64]	; 0x40
			SET_BIT(TIMx->CCMR2,11);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	61da      	str	r2, [r3, #28]
			SET_BIT(TIMx->CCER,12);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	621a      	str	r2, [r3, #32]
		break;
 8002954:	e00b      	b.n	800296e <MCAL_TIM_Init+0x53a>
				return TIM_PWM_Auto_Reload_Value_Exceeded;
 8002956:	2305      	movs	r3, #5
 8002958:	e058      	b.n	8002a0c <MCAL_TIM_Init+0x5d8>


	default:
		CLR_BIT(TIMx->CR1,2) ;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 0204 	bic.w	r2, r3, #4
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	601a      	str	r2, [r3, #0]
		return TIM_MODE_NOT_Found ;
 8002966:	2302      	movs	r3, #2
 8002968:	e050      	b.n	8002a0c <MCAL_TIM_Init+0x5d8>
		break;
 800296a:	bf00      	nop
 800296c:	e000      	b.n	8002970 <MCAL_TIM_Init+0x53c>
		break;
 800296e:	bf00      	nop
		break;

	}


	CLR_BIT(TIMx->CR1,1) ; //Update enable Bit 1 UDIS: Update disable
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f023 0202 	bic.w	r2, r3, #2
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	601a      	str	r2, [r3, #0]


	// Prescaler set
	TIMx->PSC = (uint16_t)(TIM_Config->Prescaler-1) ;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	885b      	ldrh	r3, [r3, #2]
 8002980:	3b01      	subs	r3, #1
 8002982:	b29b      	uxth	r3, r3
 8002984:	461a      	mov	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	629a      	str	r2, [r3, #40]	; 0x28


	if (TIM_Config->Auto_Reload_Value < 0xffff)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	88db      	ldrh	r3, [r3, #6]
 800298e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002992:	4293      	cmp	r3, r2
 8002994:	d009      	beq.n	80029aa <MCAL_TIM_Init+0x576>
	{
		TIMx->ARR = (uint16_t) (TIM_Config->Auto_Reload_Value); //Auto reload Value
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	88db      	ldrh	r3, [r3, #6]
 800299a:	461a      	mov	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	62da      	str	r2, [r3, #44]	; 0x2c
	{
		return TIM_Auto_Reload_Value_Exceeded ;

	}

	if (TIM_Config->IRQ_Enable == TIM_IRQ_MODE_None )
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	8a1b      	ldrh	r3, [r3, #16]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10f      	bne.n	80029c8 <MCAL_TIM_Init+0x594>
 80029a8:	e001      	b.n	80029ae <MCAL_TIM_Init+0x57a>
		return TIM_Auto_Reload_Value_Exceeded ;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e02e      	b.n	8002a0c <MCAL_TIM_Init+0x5d8>
	{
		CLR_BIT(TIMx->DIER,0);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f023 0201 	bic.w	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	60da      	str	r2, [r3, #12]
		SET_BIT(TIMx->CR1,1);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f043 0202 	orr.w	r2, r3, #2
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	e020      	b.n	8002a0a <MCAL_TIM_Init+0x5d6>
	}
	else if (TIM_Config->IRQ_Enable == TIM_IRQ_MODE_OverFlow )
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	8a1b      	ldrh	r3, [r3, #16]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d10c      	bne.n	80029ea <MCAL_TIM_Init+0x5b6>
	{
		SET_BIT(TIMx->DIER,0);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f043 0201 	orr.w	r2, r3, #1
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	60da      	str	r2, [r3, #12]
		CLR_BIT(TIMx->CR1,1);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f023 0202 	bic.w	r2, r3, #2
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	e00f      	b.n	8002a0a <MCAL_TIM_Init+0x5d6>
	}
	else if (TIM_Config->IRQ_Enable == TIM_IRQ_MODE_UnderFlow )
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	8a1b      	ldrh	r3, [r3, #16]
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d10b      	bne.n	8002a0a <MCAL_TIM_Init+0x5d6>
	{
		SET_BIT(TIMx->DIER,0);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f043 0201 	orr.w	r2, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	60da      	str	r2, [r3, #12]
		CLR_BIT(TIMx->CR1,1);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f023 0202 	bic.w	r2, r3, #2
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	601a      	str	r2, [r3, #0]
	}



return 0;
 8002a0a:	2300      	movs	r3, #0

}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bcb0      	pop	{r4, r5, r7}
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop

08002a18 <MCAL_TIM_Start>:
 * @param [in]   -TIMx :  were x can be (1,2,3,4 depending on device used)to select the Timer Peripheral
 * @retval		 -none
 * Note			 -none
 */
Error_status MCAL_TIM_Start(TIM_TypeDef *TIMx)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
previously set by software. However trigger mode can set the CEN bit automatically by
hardware.
CEN is cleared automatically in one-pulse mode, when an update event occurs.
	 */

	if(TIMx != NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d007      	beq.n	8002a36 <MCAL_TIM_Start+0x1e>
	{
		SET_BIT(TIMx->CR1,0) ; //Timer Enable
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f043 0201 	orr.w	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	601a      	str	r2, [r3, #0]
	else
	{
		return TIMx_NOT_Found;
	}

	return 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	e000      	b.n	8002a38 <MCAL_TIM_Start+0x20>
		return TIMx_NOT_Found;
 8002a36:	2301      	movs	r3, #1

}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr

08002a42 <MCAL_TIM_Stop>:
 * @param [in]   -TIMx :  were x can be (1,2,3,4 depending on device used)to select the Timer Peripheral
 * @retval		 -none
 * Note			 -none
 */
Error_status MCAL_TIM_Stop(TIM_TypeDef *TIMx)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
	previously set by software. However trigger mode can set the CEN bit automatically by
	hardware.
	CEN is cleared automatically in one-pulse mode, when an update event occurs.
	 */

	if(TIMx != NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d007      	beq.n	8002a60 <MCAL_TIM_Stop+0x1e>
	{
		CLR_BIT(TIMx->CR1,0) ; //Timer Enable
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f023 0201 	bic.w	r2, r3, #1
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	601a      	str	r2, [r3, #0]
	{
		return TIMx_NOT_Found;
	}


	return 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	e000      	b.n	8002a62 <MCAL_TIM_Stop+0x20>
		return TIMx_NOT_Found;
 8002a60:	2301      	movs	r3, #1

}
 8002a62:	4618      	mov	r0, r3
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr

08002a6c <MCAL_TIM_Count_Reset>:
 * @param [in]   -TIMx :  were x can be (1,2,3,4 depending on device used)to select the Timer Peripheral
 * @retval		 -none
 * Note			 -none
 */
Error_status MCAL_TIM_Count_Reset(TIM_TypeDef *TIMx)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]


	if(TIMx != NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d004      	beq.n	8002a84 <MCAL_TIM_Count_Reset+0x18>
	{
		TIMx->CNT = 0x0000;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	625a      	str	r2, [r3, #36]	; 0x24
		return TIMx_No_Error;
 8002a80:	2300      	movs	r3, #0
 8002a82:	e000      	b.n	8002a86 <MCAL_TIM_Count_Reset+0x1a>
	}


	return TIMx_NOT_Found;
 8002a84:	2301      	movs	r3, #1

}
 8002a86:	4618      	mov	r0, r3
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <TIM2_IRQHandler>:
 * 							IRQHandler Functions
 * =====================================================================================
 */

void TIM2_IRQHandler()
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
	TIM2->SR = 0x00 ;
 8002a94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a98:	2200      	movs	r2, #0
 8002a9a:	611a      	str	r2, [r3, #16]
	Global_TIM_Config[0].P_IRQ_CallBack();
 8002a9c:	4b02      	ldr	r3, [pc, #8]	; (8002aa8 <TIM2_IRQHandler+0x18>)
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	4798      	blx	r3


}
 8002aa2:	bf00      	nop
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	200040e0 	.word	0x200040e0

08002aac <TIM3_IRQHandler>:
void TIM3_IRQHandler()
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
	TIM3->SR = 0x00 ;
 8002ab0:	4b03      	ldr	r3, [pc, #12]	; (8002ac0 <TIM3_IRQHandler+0x14>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	611a      	str	r2, [r3, #16]
	Global_TIM_Config[1].P_IRQ_CallBack();
 8002ab6:	4b03      	ldr	r3, [pc, #12]	; (8002ac4 <TIM3_IRQHandler+0x18>)
 8002ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aba:	4798      	blx	r3
}
 8002abc:	bf00      	nop
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40000400 	.word	0x40000400
 8002ac4:	200040e0 	.word	0x200040e0

08002ac8 <TIM4_IRQHandler>:
void TIM4_IRQHandler()
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
	TIM4->SR = 0x00 ;
 8002acc:	4b03      	ldr	r3, [pc, #12]	; (8002adc <TIM4_IRQHandler+0x14>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	611a      	str	r2, [r3, #16]
	Global_TIM_Config[2].P_IRQ_CallBack();
 8002ad2:	4b03      	ldr	r3, [pc, #12]	; (8002ae0 <TIM4_IRQHandler+0x18>)
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	4798      	blx	r3
}
 8002ad8:	bf00      	nop
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40000800 	.word	0x40000800
 8002ae0:	200040e0 	.word	0x200040e0

08002ae4 <MCAL_UART_Init>:
 * @param [in] 			- UARTCfg: All the UART configurations
 * @retval 				- None
 * Note					- The driver supports Asynchronous mode & HSI clock 8 Mhz
 */
void MCAL_UART_Init(USART_TypeDef* USARTx, USART_Config_t* UART_Config)
{
 8002ae4:	b5b0      	push	{r4, r5, r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]

	uint32_t PCLK , BRR ;

	//set GLOBAL_UART_Config for USARTx used
	if(USARTx == USART1){
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a68      	ldr	r2, [pc, #416]	; (8002c94 <MCAL_UART_Init+0x1b0>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d108      	bne.n	8002b08 <MCAL_UART_Init+0x24>
		GLOBAL_UART_Config[0] = *UART_Config;
 8002af6:	4a68      	ldr	r2, [pc, #416]	; (8002c98 <MCAL_UART_Init+0x1b4>)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	4614      	mov	r4, r2
 8002afc:	461d      	mov	r5, r3
 8002afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b02:	682b      	ldr	r3, [r5, #0]
 8002b04:	6023      	str	r3, [r4, #0]
 8002b06:	e01a      	b.n	8002b3e <MCAL_UART_Init+0x5a>

	}else if(USARTx == USART2){
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a64      	ldr	r2, [pc, #400]	; (8002c9c <MCAL_UART_Init+0x1b8>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d109      	bne.n	8002b24 <MCAL_UART_Init+0x40>
		GLOBAL_UART_Config[1] = *UART_Config;
 8002b10:	4b61      	ldr	r3, [pc, #388]	; (8002c98 <MCAL_UART_Init+0x1b4>)
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	f103 0414 	add.w	r4, r3, #20
 8002b18:	4615      	mov	r5, r2
 8002b1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b1e:	682b      	ldr	r3, [r5, #0]
 8002b20:	6023      	str	r3, [r4, #0]
 8002b22:	e00c      	b.n	8002b3e <MCAL_UART_Init+0x5a>

	}else if(USARTx == USART3){
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a5e      	ldr	r2, [pc, #376]	; (8002ca0 <MCAL_UART_Init+0x1bc>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d108      	bne.n	8002b3e <MCAL_UART_Init+0x5a>
		GLOBAL_UART_Config[2] = *UART_Config;
 8002b2c:	4b5a      	ldr	r3, [pc, #360]	; (8002c98 <MCAL_UART_Init+0x1b4>)
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8002b34:	4615      	mov	r5, r2
 8002b36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b3a:	682b      	ldr	r3, [r5, #0]
 8002b3c:	6023      	str	r3, [r4, #0]
	}

	// Enable the clock for given USART peripheral
	if(USARTx == USART1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a54      	ldr	r2, [pc, #336]	; (8002c94 <MCAL_UART_Init+0x1b0>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d106      	bne.n	8002b54 <MCAL_UART_Init+0x70>
			RCC_USART1_CLK_EN();
 8002b46:	4b57      	ldr	r3, [pc, #348]	; (8002ca4 <MCAL_UART_Init+0x1c0>)
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	4a56      	ldr	r2, [pc, #344]	; (8002ca4 <MCAL_UART_Init+0x1c0>)
 8002b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b50:	6193      	str	r3, [r2, #24]
 8002b52:	e014      	b.n	8002b7e <MCAL_UART_Init+0x9a>
		else if(USARTx == USART2)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a51      	ldr	r2, [pc, #324]	; (8002c9c <MCAL_UART_Init+0x1b8>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d106      	bne.n	8002b6a <MCAL_UART_Init+0x86>
			RCC_USART2_CLK_EN();
 8002b5c:	4b51      	ldr	r3, [pc, #324]	; (8002ca4 <MCAL_UART_Init+0x1c0>)
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	4a50      	ldr	r2, [pc, #320]	; (8002ca4 <MCAL_UART_Init+0x1c0>)
 8002b62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b66:	61d3      	str	r3, [r2, #28]
 8002b68:	e009      	b.n	8002b7e <MCAL_UART_Init+0x9a>
		else if(USARTx == USART3)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a4c      	ldr	r2, [pc, #304]	; (8002ca0 <MCAL_UART_Init+0x1bc>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d105      	bne.n	8002b7e <MCAL_UART_Init+0x9a>
			RCC_USART3_CLK_EN();
 8002b72:	4b4c      	ldr	r3, [pc, #304]	; (8002ca4 <MCAL_UART_Init+0x1c0>)
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	4a4b      	ldr	r2, [pc, #300]	; (8002ca4 <MCAL_UART_Init+0x1c0>)
 8002b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b7c:	61d3      	str	r3, [r2, #28]

	// Enable the USART Module (Bit 13 UE: USART enable)
	USARTx->CR1 |= (1<<13) ;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	60da      	str	r2, [r3, #12]

	//Enable TX / RX according to the USART_MODE configuration item
	//USART1_CR1 >> Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable
	USARTx->CR1 |=  UART_Config->USART_Mode ;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	7812      	ldrb	r2, [r2, #0]
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	60da      	str	r2, [r3, #12]

	//Payload length 8 or 9 bit
	//USART1_CR1 >> Bit 12 M: Word length
	USARTx->CR1 |=  UART_Config->Payload_Length ;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	7a12      	ldrb	r2, [r2, #8]
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	60da      	str	r2, [r3, #12]

	//configure of parity control bit field
	//USART1_CR1 >> Bit 10 PCE: Parity control enable & Bit 9 PS: Parity selection
	USARTx->CR1 |=  UART_Config->Parity ;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	7a52      	ldrb	r2, [r2, #9]
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	60da      	str	r2, [r3, #12]

	//configure stop bits	USART_CR2  Bits 13:12 STOP: STOP bits
	USARTx->CR1 |=  UART_Config->StopBits ;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	7a92      	ldrb	r2, [r2, #10]
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	60da      	str	r2, [r3, #12]

	//USART Hardware Flow Control
	//USART_CR3 >> Bit 8 RTSE: RTS enable & Bit 9 CTSE: CTS enable
	USARTx->CR1 |=  UART_Config->HwFlowCtl ;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	7ad2      	ldrb	r2, [r2, #11]
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	60da      	str	r2, [r3, #12]

	// Configuration BoadRate
	// PCLK1 for USART2 , 3
	// PCLK2 for USART1

	if (USARTx == USART1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a30      	ldr	r2, [pc, #192]	; (8002c94 <MCAL_UART_Init+0x1b0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d103      	bne.n	8002be0 <MCAL_UART_Init+0xfc>
		{
			PCLK = MCAL_RCC_GetPCLK2Freq();
 8002bd8:	f7ff fbbc 	bl	8002354 <MCAL_RCC_GetPCLK2Freq>
 8002bdc:	60f8      	str	r0, [r7, #12]
 8002bde:	e002      	b.n	8002be6 <MCAL_UART_Init+0x102>
		}
		else
		{
			PCLK = MCAL_RCC_GetPCLK1Freq();
 8002be0:	f7ff fba4 	bl	800232c <MCAL_RCC_GetPCLK1Freq>
 8002be4:	60f8      	str	r0, [r7, #12]
		}

  BRR = UART_BRR_Register(PCLK , UART_Config->BaudRate) ;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf2:	0119      	lsls	r1, r3, #4
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009a      	lsls	r2, r3, #2
 8002bfe:	441a      	add	r2, r3
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c16:	2064      	movs	r0, #100	; 0x64
 8002c18:	fb00 f303 	mul.w	r3, r0, r3
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	011b      	lsls	r3, r3, #4
 8002c20:	4a21      	ldr	r2, [pc, #132]	; (8002ca8 <MCAL_UART_Init+0x1c4>)
 8002c22:	fba2 2303 	umull	r2, r3, r2, r3
 8002c26:	095b      	lsrs	r3, r3, #5
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	430b      	orrs	r3, r1
 8002c2e:	60bb      	str	r3, [r7, #8]
  USARTx->BRR = BRR ;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	609a      	str	r2, [r3, #8]

  if(UART_Config->IRQ_Enable != UART_IRQ_Enable_NONE)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	7b1b      	ldrb	r3, [r3, #12]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d026      	beq.n	8002c8c <MCAL_UART_Init+0x1a8>
  	{
  		USARTx->CR1 |= UART_Config->IRQ_Enable ;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	7b12      	ldrb	r2, [r2, #12]
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	60da      	str	r2, [r3, #12]
  		//Enable E=interrupt on NVIC
  		if (USARTx == USART1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a11      	ldr	r2, [pc, #68]	; (8002c94 <MCAL_UART_Init+0x1b0>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d106      	bne.n	8002c62 <MCAL_UART_Init+0x17e>
  			NVIC_IRQ37_USART1_Enable() ;
 8002c54:	4b15      	ldr	r3, [pc, #84]	; (8002cac <MCAL_UART_Init+0x1c8>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a14      	ldr	r2, [pc, #80]	; (8002cac <MCAL_UART_Init+0x1c8>)
 8002c5a:	f043 0320 	orr.w	r3, r3, #32
 8002c5e:	6013      	str	r3, [r2, #0]
  			NVIC_IRQ38_USART2_Enable() ;
  		else if (USARTx == USART3)
  			NVIC_IRQ39_USART3_Enable() ;
  	}

}
 8002c60:	e014      	b.n	8002c8c <MCAL_UART_Init+0x1a8>
  		else if (USARTx == USART2)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a0d      	ldr	r2, [pc, #52]	; (8002c9c <MCAL_UART_Init+0x1b8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d106      	bne.n	8002c78 <MCAL_UART_Init+0x194>
  			NVIC_IRQ38_USART2_Enable() ;
 8002c6a:	4b10      	ldr	r3, [pc, #64]	; (8002cac <MCAL_UART_Init+0x1c8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a0f      	ldr	r2, [pc, #60]	; (8002cac <MCAL_UART_Init+0x1c8>)
 8002c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c74:	6013      	str	r3, [r2, #0]
}
 8002c76:	e009      	b.n	8002c8c <MCAL_UART_Init+0x1a8>
  		else if (USARTx == USART3)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a09      	ldr	r2, [pc, #36]	; (8002ca0 <MCAL_UART_Init+0x1bc>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d105      	bne.n	8002c8c <MCAL_UART_Init+0x1a8>
  			NVIC_IRQ39_USART3_Enable() ;
 8002c80:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <MCAL_UART_Init+0x1c8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a09      	ldr	r2, [pc, #36]	; (8002cac <MCAL_UART_Init+0x1c8>)
 8002c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c8a:	6013      	str	r3, [r2, #0]
}
 8002c8c:	bf00      	nop
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bdb0      	pop	{r4, r5, r7, pc}
 8002c94:	40013800 	.word	0x40013800
 8002c98:	20004128 	.word	0x20004128
 8002c9c:	40004400 	.word	0x40004400
 8002ca0:	40004800 	.word	0x40004800
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	51eb851f 	.word	0x51eb851f
 8002cac:	e000e104 	.word	0xe000e104

08002cb0 <MCAL_UART_ReceiveData>:
 *		param[in]          -PollingEn enable or disable the polling
 * 		@retval           -none
 * 		Note              -none																										*
 ********************************************************************************************************************/
void MCAL_UART_ReceiveData(USART_TypeDef* USARTx,uint16_t* pRxBuffer , enum Polling_Mechanism PollingEN)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	71fb      	strb	r3, [r7, #7]
	USART_Config_t* Temp_UART_Config = NULL;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	617b      	str	r3, [r7, #20]

		//poll for RXNE Pin
		if(PollingEN == enable){
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d106      	bne.n	8002cd6 <MCAL_UART_ReceiveData+0x26>
			writing a zero to it. This clearing sequence is recommended only for multibuffer
			communication.
			0: Data is not received
			1: Received data is ready to be read.*/

			while( GET_BIT(USARTx->SR,5) == 0 ) ; //Wait
 8002cc8:	bf00      	nop
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0f9      	beq.n	8002cca <MCAL_UART_ReceiveData+0x1a>
		}

		//set GLOBAL_UART_Config for USARTx used
		if(USARTx == USART1){
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	4a15      	ldr	r2, [pc, #84]	; (8002d30 <MCAL_UART_ReceiveData+0x80>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d102      	bne.n	8002ce4 <MCAL_UART_ReceiveData+0x34>
			Temp_UART_Config =	&GLOBAL_UART_Config[0] ;
 8002cde:	4b15      	ldr	r3, [pc, #84]	; (8002d34 <MCAL_UART_ReceiveData+0x84>)
 8002ce0:	617b      	str	r3, [r7, #20]
 8002ce2:	e00c      	b.n	8002cfe <MCAL_UART_ReceiveData+0x4e>

		}else if(USARTx == USART2){
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4a14      	ldr	r2, [pc, #80]	; (8002d38 <MCAL_UART_ReceiveData+0x88>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d102      	bne.n	8002cf2 <MCAL_UART_ReceiveData+0x42>
			Temp_UART_Config =	&GLOBAL_UART_Config[1] ;
 8002cec:	4b13      	ldr	r3, [pc, #76]	; (8002d3c <MCAL_UART_ReceiveData+0x8c>)
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	e005      	b.n	8002cfe <MCAL_UART_ReceiveData+0x4e>

		}else if(USARTx == USART3){
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	4a12      	ldr	r2, [pc, #72]	; (8002d40 <MCAL_UART_ReceiveData+0x90>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d101      	bne.n	8002cfe <MCAL_UART_ReceiveData+0x4e>
			Temp_UART_Config =	&GLOBAL_UART_Config[2] ;
 8002cfa:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <MCAL_UART_ReceiveData+0x94>)
 8002cfc:	617b      	str	r3, [r7, #20]


		}else{

			//Check if parity is Enabled
			if(Temp_UART_Config->Parity == UART_Parity_NONE){
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	7a5b      	ldrb	r3, [r3, #9]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d107      	bne.n	8002d16 <MCAL_UART_ReceiveData+0x66>

				//Read Least 8Bit from data register content
				*pRxBuffer	= (USARTx->DR & (uint16_t)0xFF);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	801a      	strh	r2, [r3, #0]
				//Parity is on, Read only Least 7Bit from data register content
				*pRxBuffer	= (USARTx->DR & (uint16_t)0x7F);
			}

		}
}
 8002d14:	e007      	b.n	8002d26 <MCAL_UART_ReceiveData+0x76>
				*pRxBuffer	= (USARTx->DR & (uint16_t)0x7F);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	801a      	strh	r2, [r3, #0]
}
 8002d26:	bf00      	nop
 8002d28:	371c      	adds	r7, #28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr
 8002d30:	40013800 	.word	0x40013800
 8002d34:	20004128 	.word	0x20004128
 8002d38:	40004400 	.word	0x40004400
 8002d3c:	2000413c 	.word	0x2000413c
 8002d40:	40004800 	.word	0x40004800
 8002d44:	20004150 	.word	0x20004150

08002d48 <MCAL_UART_GPIO_Set_Pins>:
 * @param[in]					- USARTx: where x can be (1..3 depending on device used).
 * @retval						- NONE
 * Note							- Sould Enable the corresponding AFIO & GPIO in RCC clock also called after MCAL_UART_Init()
 * */
void MCAL_UART_GPIO_Set_Pins(USART_TypeDef* USARTx)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]

	GPIO_PinConfig_t PinCfg ;

		if(USARTx == USART1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a2b      	ldr	r2, [pc, #172]	; (8002e00 <MCAL_UART_GPIO_Set_Pins+0xb8>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d118      	bne.n	8002d8a <MCAL_UART_GPIO_Set_Pins+0x42>
			//PA10 >>	RX
			//PA11 >>	CTS
			//PA12 >>	RTS

			//PA9  >>	TX
			PinCfg.GPIO_PinNumber = GPIO_PIN_9 ;
 8002d58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d5c:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE =	GPIO_MODE_OUTPUT_AF_PP ;
 8002d5e:	2306      	movs	r3, #6
 8002d60:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8002d62:	2301      	movs	r3, #1
 8002d64:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8002d66:	f107 030c 	add.w	r3, r7, #12
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4825      	ldr	r0, [pc, #148]	; (8002e04 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8002d6e:	f7fe fe53 	bl	8001a18 <MCAL_GPIO_Init>

			//PA10 >>	RX
			PinCfg.GPIO_PinNumber = GPIO_PIN_10 ;
 8002d72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d76:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE =	GPIO_MODE_INPUT_AF;
 8002d78:	2308      	movs	r3, #8
 8002d7a:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8002d7c:	f107 030c 	add.w	r3, r7, #12
 8002d80:	4619      	mov	r1, r3
 8002d82:	4820      	ldr	r0, [pc, #128]	; (8002e04 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8002d84:	f7fe fe48 	bl	8001a18 <MCAL_GPIO_Init>
				MCAL_GPIO_Init(GPIOB, &PinCfg);
			}
		}


}
 8002d88:	e036      	b.n	8002df8 <MCAL_UART_GPIO_Set_Pins+0xb0>
		else if(USARTx == USART2)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a1e      	ldr	r2, [pc, #120]	; (8002e08 <MCAL_UART_GPIO_Set_Pins+0xc0>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d116      	bne.n	8002dc0 <MCAL_UART_GPIO_Set_Pins+0x78>
			PinCfg.GPIO_PinNumber = GPIO_PIN_2 ;
 8002d92:	2304      	movs	r3, #4
 8002d94:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE =	GPIO_MODE_OUTPUT_AF_PP ;
 8002d96:	2306      	movs	r3, #6
 8002d98:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8002d9e:	f107 030c 	add.w	r3, r7, #12
 8002da2:	4619      	mov	r1, r3
 8002da4:	4817      	ldr	r0, [pc, #92]	; (8002e04 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8002da6:	f7fe fe37 	bl	8001a18 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_3 ;
 8002daa:	2308      	movs	r3, #8
 8002dac:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE =	GPIO_MODE_INPUT_AF ;
 8002dae:	2308      	movs	r3, #8
 8002db0:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8002db2:	f107 030c 	add.w	r3, r7, #12
 8002db6:	4619      	mov	r1, r3
 8002db8:	4812      	ldr	r0, [pc, #72]	; (8002e04 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8002dba:	f7fe fe2d 	bl	8001a18 <MCAL_GPIO_Init>
}
 8002dbe:	e01b      	b.n	8002df8 <MCAL_UART_GPIO_Set_Pins+0xb0>
		else if(USARTx == USART3)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a12      	ldr	r2, [pc, #72]	; (8002e0c <MCAL_UART_GPIO_Set_Pins+0xc4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d117      	bne.n	8002df8 <MCAL_UART_GPIO_Set_Pins+0xb0>
			PinCfg.GPIO_PinNumber = GPIO_PIN_10 ;
 8002dc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dcc:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE =	GPIO_MODE_OUTPUT_AF_PP ;
 8002dce:	2306      	movs	r3, #6
 8002dd0:	73bb      	strb	r3, [r7, #14]
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M ;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8002dd6:	f107 030c 	add.w	r3, r7, #12
 8002dda:	4619      	mov	r1, r3
 8002ddc:	480c      	ldr	r0, [pc, #48]	; (8002e10 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8002dde:	f7fe fe1b 	bl	8001a18 <MCAL_GPIO_Init>
			PinCfg.GPIO_PinNumber = GPIO_PIN_11 ;
 8002de2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002de6:	81bb      	strh	r3, [r7, #12]
			PinCfg.GPIO_MODE =	GPIO_MODE_INPUT_FLO ;
 8002de8:	2301      	movs	r3, #1
 8002dea:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8002dec:	f107 030c 	add.w	r3, r7, #12
 8002df0:	4619      	mov	r1, r3
 8002df2:	4807      	ldr	r0, [pc, #28]	; (8002e10 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8002df4:	f7fe fe10 	bl	8001a18 <MCAL_GPIO_Init>
}
 8002df8:	bf00      	nop
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40013800 	.word	0x40013800
 8002e04:	40010800 	.word	0x40010800
 8002e08:	40004400 	.word	0x40004400
 8002e0c:	40004800 	.word	0x40004800
 8002e10:	40010c00 	.word	0x40010c00

08002e14 <USART1_IRQHandler>:
 * 							ISR Functions
 * =====================================================================================
 */

void USART1_IRQHandler (void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
	if( UART_STATUS_CHECK(USART1))
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <USART1_IRQHandler+0x1c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0320 	and.w	r3, r3, #32
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <USART1_IRQHandler+0x16>
	{
		GLOBAL_UART_Config[0].P_IRQ_CallBack();
 8002e24:	4b03      	ldr	r3, [pc, #12]	; (8002e34 <USART1_IRQHandler+0x20>)
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	4798      	blx	r3
	}
}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40013800 	.word	0x40013800
 8002e34:	20004128 	.word	0x20004128

08002e38 <USART2_IRQHandler>:
void USART2_IRQHandler (void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
	if( UART_STATUS_CHECK(USART2))
 8002e3c:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <USART2_IRQHandler+0x1c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <USART2_IRQHandler+0x16>
	{
		GLOBAL_UART_Config[1].P_IRQ_CallBack();
 8002e48:	4b03      	ldr	r3, [pc, #12]	; (8002e58 <USART2_IRQHandler+0x20>)
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	4798      	blx	r3
	}
}
 8002e4e:	bf00      	nop
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40004400 	.word	0x40004400
 8002e58:	20004128 	.word	0x20004128

08002e5c <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
	if( UART_STATUS_CHECK(USART3))
 8002e60:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <USART3_IRQHandler+0x1c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d002      	beq.n	8002e72 <USART3_IRQHandler+0x16>
	{
		GLOBAL_UART_Config[2].P_IRQ_CallBack();
 8002e6c:	4b03      	ldr	r3, [pc, #12]	; (8002e7c <USART3_IRQHandler+0x20>)
 8002e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e70:	4798      	blx	r3
	}
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40004800 	.word	0x40004800
 8002e7c:	20004128 	.word	0x20004128

08002e80 <WWDG_IRQHandler>:
}



void WWDG_IRQHandler ()
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
	CLR_BIT(WWDG->SR,0);
 8002e84:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <WWDG_IRQHandler+0x1c>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	4a04      	ldr	r2, [pc, #16]	; (8002e9c <WWDG_IRQHandler+0x1c>)
 8002e8a:	f023 0301 	bic.w	r3, r3, #1
 8002e8e:	6093      	str	r3, [r2, #8]
	G_Config.P_IRQ_CallBack();
 8002e90:	4b03      	ldr	r3, [pc, #12]	; (8002ea0 <WWDG_IRQHandler+0x20>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	4798      	blx	r3

}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40002c00 	.word	0x40002c00
 8002ea0:	20004164 	.word	0x20004164

08002ea4 <memset>:
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	4402      	add	r2, r0
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d100      	bne.n	8002eae <memset+0xa>
 8002eac:	4770      	bx	lr
 8002eae:	f803 1b01 	strb.w	r1, [r3], #1
 8002eb2:	e7f9      	b.n	8002ea8 <memset+0x4>

08002eb4 <__libc_init_array>:
 8002eb4:	b570      	push	{r4, r5, r6, lr}
 8002eb6:	2600      	movs	r6, #0
 8002eb8:	4d0c      	ldr	r5, [pc, #48]	; (8002eec <__libc_init_array+0x38>)
 8002eba:	4c0d      	ldr	r4, [pc, #52]	; (8002ef0 <__libc_init_array+0x3c>)
 8002ebc:	1b64      	subs	r4, r4, r5
 8002ebe:	10a4      	asrs	r4, r4, #2
 8002ec0:	42a6      	cmp	r6, r4
 8002ec2:	d109      	bne.n	8002ed8 <__libc_init_array+0x24>
 8002ec4:	f000 f81a 	bl	8002efc <_init>
 8002ec8:	2600      	movs	r6, #0
 8002eca:	4d0a      	ldr	r5, [pc, #40]	; (8002ef4 <__libc_init_array+0x40>)
 8002ecc:	4c0a      	ldr	r4, [pc, #40]	; (8002ef8 <__libc_init_array+0x44>)
 8002ece:	1b64      	subs	r4, r4, r5
 8002ed0:	10a4      	asrs	r4, r4, #2
 8002ed2:	42a6      	cmp	r6, r4
 8002ed4:	d105      	bne.n	8002ee2 <__libc_init_array+0x2e>
 8002ed6:	bd70      	pop	{r4, r5, r6, pc}
 8002ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002edc:	4798      	blx	r3
 8002ede:	3601      	adds	r6, #1
 8002ee0:	e7ee      	b.n	8002ec0 <__libc_init_array+0xc>
 8002ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ee6:	4798      	blx	r3
 8002ee8:	3601      	adds	r6, #1
 8002eea:	e7f2      	b.n	8002ed2 <__libc_init_array+0x1e>
 8002eec:	08002f54 	.word	0x08002f54
 8002ef0:	08002f54 	.word	0x08002f54
 8002ef4:	08002f54 	.word	0x08002f54
 8002ef8:	08002f58 	.word	0x08002f58

08002efc <_init>:
 8002efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002efe:	bf00      	nop
 8002f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f02:	bc08      	pop	{r3}
 8002f04:	469e      	mov	lr, r3
 8002f06:	4770      	bx	lr

08002f08 <_fini>:
 8002f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0a:	bf00      	nop
 8002f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f0e:	bc08      	pop	{r3}
 8002f10:	469e      	mov	lr, r3
 8002f12:	4770      	bx	lr
