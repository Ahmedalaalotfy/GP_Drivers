
GP_STM32_Drivers.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e94  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000fc4  08000fc4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000fc4  08000fc4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000fc4  08000fc4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fc4  08000fc4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fc4  08000fc4  00010fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fc8  08000fc8  00010fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000fcc  00020000  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000004  08000fd0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08000fd0  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ea0  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015ca  00000000  00000000  00027ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003c0  00000000  00000000  00029498  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000318  00000000  00000000  00029858  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004d92  00000000  00000000  00029b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004eff  00000000  00000000  0002e902  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00012e39  00000000  00000000  00033801  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0004663a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c8c  00000000  00000000  000466b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000fac 	.word	0x08000fac

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000fac 	.word	0x08000fac

08000170 <clock_init>:
#include "Delay.h"



void clock_init(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

	//Enable clock to AFIO
	AFIO_GPIO_CLK_EN();
 8000174:	4b0d      	ldr	r3, [pc, #52]	; (80001ac <clock_init+0x3c>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a0c      	ldr	r2, [pc, #48]	; (80001ac <clock_init+0x3c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6193      	str	r3, [r2, #24]
	//Enable clock to port A
	RCC_GPIOA_CLK_EN();
 8000180:	4b0a      	ldr	r3, [pc, #40]	; (80001ac <clock_init+0x3c>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a09      	ldr	r2, [pc, #36]	; (80001ac <clock_init+0x3c>)
 8000186:	f043 0304 	orr.w	r3, r3, #4
 800018a:	6193      	str	r3, [r2, #24]
	//Enable clock to port B
	RCC_GPIOB_CLK_EN();
 800018c:	4b07      	ldr	r3, [pc, #28]	; (80001ac <clock_init+0x3c>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a06      	ldr	r2, [pc, #24]	; (80001ac <clock_init+0x3c>)
 8000192:	f043 0308 	orr.w	r3, r3, #8
 8000196:	6193      	str	r3, [r2, #24]

	//Enable Clock To WWDG
	RCC_WWDG_CLK_EN();
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <clock_init+0x3c>)
 800019a:	69db      	ldr	r3, [r3, #28]
 800019c:	4a03      	ldr	r2, [pc, #12]	; (80001ac <clock_init+0x3c>)
 800019e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80001a2:	61d3      	str	r3, [r2, #28]

}
 80001a4:	bf00      	nop
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	40021000 	.word	0x40021000

080001b0 <main>:


int main(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b084      	sub	sp, #16
 80001b4:	af00      	add	r7, sp, #0
	clock_init();
 80001b6:	f7ff ffdb 	bl	8000170 <clock_init>

	WWDG_Config_t WWDG_Config ;

	WWDG_Config.Prescaler = WWDG_Counter_div_8;
 80001ba:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80001be:	80fb      	strh	r3, [r7, #6]
	WWDG_Config.Counter_Start_VAL = 95 ;
 80001c0:	235f      	movs	r3, #95	; 0x5f
 80001c2:	80bb      	strh	r3, [r7, #4]
	WWDG_Config.Window_Value = 80 ;
 80001c4:	2350      	movs	r3, #80	; 0x50
 80001c6:	813b      	strh	r3, [r7, #8]
	WWDG_Config.EWI_IRQ_Enable = WWDG_EWI_IRQ_None ;
 80001c8:	2300      	movs	r3, #0
 80001ca:	817b      	strh	r3, [r7, #10]
	WWDG_Config.P_IRQ_CallBack = NULL ;
 80001cc:	2300      	movs	r3, #0
 80001ce:	60fb      	str	r3, [r7, #12]

    MCAL_WWDG_Init(&WWDG_Config);
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	4618      	mov	r0, r3
 80001d4:	f000 fe3c 	bl	8000e50 <MCAL_WWDG_Init>

    HAL_Delay_Init();
 80001d8:	f000 f834 	bl	8000244 <HAL_Delay_Init>


	while (1)
	{

		MCAL_WWDG_Start();
 80001dc:	f000 fe8c 	bl	8000ef8 <MCAL_WWDG_Start>

        delay_ms(10000);
 80001e0:	f242 7010 	movw	r0, #10000	; 0x2710
 80001e4:	f000 f850 	bl	8000288 <delay_ms>

		MCAL_WWDG_Kick();
 80001e8:	f000 fe96 	bl	8000f18 <MCAL_WWDG_Kick>
	{
 80001ec:	e7f6      	b.n	80001dc <main+0x2c>
	...

080001f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001f0:	480d      	ldr	r0, [pc, #52]	; (8000228 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001f2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80001f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001f8:	480c      	ldr	r0, [pc, #48]	; (800022c <LoopForever+0x6>)
  ldr r1, =_edata
 80001fa:	490d      	ldr	r1, [pc, #52]	; (8000230 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001fc:	4a0d      	ldr	r2, [pc, #52]	; (8000234 <LoopForever+0xe>)
  movs r3, #0
 80001fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000200:	e002      	b.n	8000208 <LoopCopyDataInit>

08000202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000206:	3304      	adds	r3, #4

08000208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800020a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800020c:	d3f9      	bcc.n	8000202 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800020e:	4a0a      	ldr	r2, [pc, #40]	; (8000238 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000210:	4c0a      	ldr	r4, [pc, #40]	; (800023c <LoopForever+0x16>)
  movs r3, #0
 8000212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000214:	e001      	b.n	800021a <LoopFillZerobss>

08000216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000218:	3204      	adds	r2, #4

0800021a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800021a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800021c:	d3fb      	bcc.n	8000216 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800021e:	f000 fea1 	bl	8000f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000222:	f7ff ffc5 	bl	80001b0 <main>

08000226 <LoopForever>:

LoopForever:
    b LoopForever
 8000226:	e7fe      	b.n	8000226 <LoopForever>
  ldr   r0, =_estack
 8000228:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800022c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000230:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000234:	08000fcc 	.word	0x08000fcc
  ldr r2, =_sbss
 8000238:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800023c:	2000017c 	.word	0x2000017c

08000240 <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000240:	e7fe      	b.n	8000240 <ADC3_IRQHandler>
	...

08000244 <HAL_Delay_Init>:
 * @param [in]   -TIMx :  were x can be (1,2,3,4 depending on device used)to select the Timer Peripheral
 * @retval		 -none
 * Note			 -none
 */
void HAL_Delay_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	Delay_timer_config.TIM_Mode =  TIM_Mode_Counter;
 8000248:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <HAL_Delay_Init+0x40>)
 800024a:	2201      	movs	r2, #1
 800024c:	801a      	strh	r2, [r3, #0]
	Delay_timer_config.Counter.Count_Direction =Count_Direction_UP;
 800024e:	4b0d      	ldr	r3, [pc, #52]	; (8000284 <HAL_Delay_Init+0x40>)
 8000250:	2200      	movs	r2, #0
 8000252:	721a      	strb	r2, [r3, #8]
	Delay_timer_config.Prescaler = 8 ;
 8000254:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <HAL_Delay_Init+0x40>)
 8000256:	2208      	movs	r2, #8
 8000258:	805a      	strh	r2, [r3, #2]
	Delay_timer_config.Auto_Reload_Value = 0xFFFF ;
 800025a:	4b0a      	ldr	r3, [pc, #40]	; (8000284 <HAL_Delay_Init+0x40>)
 800025c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000260:	80da      	strh	r2, [r3, #6]
	Delay_timer_config.IRQ_Enable = TIM_IRQ_MODE_None  ;
 8000262:	4b08      	ldr	r3, [pc, #32]	; (8000284 <HAL_Delay_Init+0x40>)
 8000264:	2200      	movs	r2, #0
 8000266:	821a      	strh	r2, [r3, #16]
	Delay_timer_config.P_IRQ_CallBack = NULL ;
 8000268:	4b06      	ldr	r3, [pc, #24]	; (8000284 <HAL_Delay_Init+0x40>)
 800026a:	2200      	movs	r2, #0
 800026c:	615a      	str	r2, [r3, #20]

	MCAL_TIM_Init(DELAY_Timer,&Delay_timer_config);
 800026e:	4905      	ldr	r1, [pc, #20]	; (8000284 <HAL_Delay_Init+0x40>)
 8000270:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000274:	f000 faa0 	bl	80007b8 <MCAL_TIM_Init>
	MCAL_TIM_Count_Reset(DELAY_Timer);
 8000278:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800027c:	f000 fd8e 	bl	8000d9c <MCAL_TIM_Count_Reset>
}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}
 8000284:	200000b4 	.word	0x200000b4

08000288 <delay_ms>:
/* HAL */
#include "LCD_interface.h"
#include "LCD_config.h"


void delay_ms(uint32_t time) {
 8000288:	b480      	push	{r7}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000290:	2300      	movs	r3, #0
 8000292:	60fb      	str	r3, [r7, #12]
 8000294:	e00b      	b.n	80002ae <delay_ms+0x26>
		for (j = 0; j < 255; j++);
 8000296:	2300      	movs	r3, #0
 8000298:	60bb      	str	r3, [r7, #8]
 800029a:	e002      	b.n	80002a2 <delay_ms+0x1a>
 800029c:	68bb      	ldr	r3, [r7, #8]
 800029e:	3301      	adds	r3, #1
 80002a0:	60bb      	str	r3, [r7, #8]
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	2bfe      	cmp	r3, #254	; 0xfe
 80002a6:	d9f9      	bls.n	800029c <delay_ms+0x14>
	for (i = 0; i < time; i++)
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	3301      	adds	r3, #1
 80002ac:	60fb      	str	r3, [r7, #12]
 80002ae:	68fa      	ldr	r2, [r7, #12]
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d3ef      	bcc.n	8000296 <delay_ms+0xe>
}
 80002b6:	bf00      	nop
 80002b8:	3714      	adds	r7, #20
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr

080002c0 <ADC1_2_IRQHandler>:
 * 						ISR
 * ===============================================
 */

void ADC1_2_IRQHandler(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	/* ADC global interrupt */
	Data_for_IRQ = ADC1->DR ;
 80002c4:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <ADC1_2_IRQHandler+0x28>)
 80002c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c8:	b29a      	uxth	r2, r3
 80002ca:	4b08      	ldr	r3, [pc, #32]	; (80002ec <ADC1_2_IRQHandler+0x2c>)
 80002cc:	801a      	strh	r2, [r3, #0]
	Global_ADC_Cfg.channels[Rank-1].Channel_IRQ_callback(Data_for_IRQ);
 80002ce:	4b08      	ldr	r3, [pc, #32]	; (80002f0 <ADC1_2_IRQHandler+0x30>)
 80002d0:	881b      	ldrh	r3, [r3, #0]
 80002d2:	3b01      	subs	r3, #1
 80002d4:	4a07      	ldr	r2, [pc, #28]	; (80002f4 <ADC1_2_IRQHandler+0x34>)
 80002d6:	00db      	lsls	r3, r3, #3
 80002d8:	4413      	add	r3, r2
 80002da:	689b      	ldr	r3, [r3, #8]
 80002dc:	4a03      	ldr	r2, [pc, #12]	; (80002ec <ADC1_2_IRQHandler+0x2c>)
 80002de:	8812      	ldrh	r2, [r2, #0]
 80002e0:	4610      	mov	r0, r2
 80002e2:	4798      	blx	r3
}
 80002e4:	bf00      	nop
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	40012400 	.word	0x40012400
 80002ec:	20000020 	.word	0x20000020
 80002f0:	20000000 	.word	0x20000000
 80002f4:	200000cc 	.word	0x200000cc

080002f8 <EXTI0_IRQHandler>:
 * =====================================================================================
 */


void EXTI0_IRQHandler(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	// cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= 1<<0;
 80002fc:	4b05      	ldr	r3, [pc, #20]	; (8000314 <EXTI0_IRQHandler+0x1c>)
 80002fe:	695b      	ldr	r3, [r3, #20]
 8000300:	4a04      	ldr	r2, [pc, #16]	; (8000314 <EXTI0_IRQHandler+0x1c>)
 8000302:	f043 0301 	orr.w	r3, r3, #1
 8000306:	6153      	str	r3, [r2, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[0]();
 8000308:	4b03      	ldr	r3, [pc, #12]	; (8000318 <EXTI0_IRQHandler+0x20>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4798      	blx	r3
}
 800030e:	bf00      	nop
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	40010400 	.word	0x40010400
 8000318:	20000024 	.word	0x20000024

0800031c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 8000320:	4b05      	ldr	r3, [pc, #20]	; (8000338 <EXTI1_IRQHandler+0x1c>)
 8000322:	695b      	ldr	r3, [r3, #20]
 8000324:	4a04      	ldr	r2, [pc, #16]	; (8000338 <EXTI1_IRQHandler+0x1c>)
 8000326:	f043 0302 	orr.w	r3, r3, #2
 800032a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 800032c:	4b03      	ldr	r3, [pc, #12]	; (800033c <EXTI1_IRQHandler+0x20>)
 800032e:	685b      	ldr	r3, [r3, #4]
 8000330:	4798      	blx	r3
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	40010400 	.word	0x40010400
 800033c:	20000024 	.word	0x20000024

08000340 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 8000344:	4b05      	ldr	r3, [pc, #20]	; (800035c <EXTI2_IRQHandler+0x1c>)
 8000346:	695b      	ldr	r3, [r3, #20]
 8000348:	4a04      	ldr	r2, [pc, #16]	; (800035c <EXTI2_IRQHandler+0x1c>)
 800034a:	f043 0304 	orr.w	r3, r3, #4
 800034e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 8000350:	4b03      	ldr	r3, [pc, #12]	; (8000360 <EXTI2_IRQHandler+0x20>)
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	4798      	blx	r3
}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40010400 	.word	0x40010400
 8000360:	20000024 	.word	0x20000024

08000364 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <EXTI3_IRQHandler+0x1c>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	4a04      	ldr	r2, [pc, #16]	; (8000380 <EXTI3_IRQHandler+0x1c>)
 800036e:	f043 0308 	orr.w	r3, r3, #8
 8000372:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 8000374:	4b03      	ldr	r3, [pc, #12]	; (8000384 <EXTI3_IRQHandler+0x20>)
 8000376:	68db      	ldr	r3, [r3, #12]
 8000378:	4798      	blx	r3
}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	40010400 	.word	0x40010400
 8000384:	20000024 	.word	0x20000024

08000388 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <EXTI4_IRQHandler+0x1c>)
 800038e:	695b      	ldr	r3, [r3, #20]
 8000390:	4a04      	ldr	r2, [pc, #16]	; (80003a4 <EXTI4_IRQHandler+0x1c>)
 8000392:	f043 0310 	orr.w	r3, r3, #16
 8000396:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 8000398:	4b03      	ldr	r3, [pc, #12]	; (80003a8 <EXTI4_IRQHandler+0x20>)
 800039a:	691b      	ldr	r3, [r3, #16]
 800039c:	4798      	blx	r3
}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	40010400 	.word	0x40010400
 80003a8:	20000024 	.word	0x20000024

080003ac <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<5 ) { EXTI->PR |= 1<<5; GP_IRQ_CallBack[5](); }
 80003b0:	4b26      	ldr	r3, [pc, #152]	; (800044c <EXTI9_5_IRQHandler+0xa0>)
 80003b2:	695b      	ldr	r3, [r3, #20]
 80003b4:	f003 0320 	and.w	r3, r3, #32
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d008      	beq.n	80003ce <EXTI9_5_IRQHandler+0x22>
 80003bc:	4b23      	ldr	r3, [pc, #140]	; (800044c <EXTI9_5_IRQHandler+0xa0>)
 80003be:	695b      	ldr	r3, [r3, #20]
 80003c0:	4a22      	ldr	r2, [pc, #136]	; (800044c <EXTI9_5_IRQHandler+0xa0>)
 80003c2:	f043 0320 	orr.w	r3, r3, #32
 80003c6:	6153      	str	r3, [r2, #20]
 80003c8:	4b21      	ldr	r3, [pc, #132]	; (8000450 <EXTI9_5_IRQHandler+0xa4>)
 80003ca:	695b      	ldr	r3, [r3, #20]
 80003cc:	4798      	blx	r3
	if( EXTI->PR & 1<<6 ) { EXTI->PR |= 1<<6; GP_IRQ_CallBack[6](); }
 80003ce:	4b1f      	ldr	r3, [pc, #124]	; (800044c <EXTI9_5_IRQHandler+0xa0>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d008      	beq.n	80003ec <EXTI9_5_IRQHandler+0x40>
 80003da:	4b1c      	ldr	r3, [pc, #112]	; (800044c <EXTI9_5_IRQHandler+0xa0>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	4a1b      	ldr	r2, [pc, #108]	; (800044c <EXTI9_5_IRQHandler+0xa0>)
 80003e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003e4:	6153      	str	r3, [r2, #20]
 80003e6:	4b1a      	ldr	r3, [pc, #104]	; (8000450 <EXTI9_5_IRQHandler+0xa4>)
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	4798      	blx	r3
	if( EXTI->PR & 1<<7 ) { EXTI->PR |= 1<<7; GP_IRQ_CallBack[7](); }
 80003ec:	4b17      	ldr	r3, [pc, #92]	; (800044c <EXTI9_5_IRQHandler+0xa0>)
 80003ee:	695b      	ldr	r3, [r3, #20]
 80003f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d008      	beq.n	800040a <EXTI9_5_IRQHandler+0x5e>
 80003f8:	4b14      	ldr	r3, [pc, #80]	; (800044c <EXTI9_5_IRQHandler+0xa0>)
 80003fa:	695b      	ldr	r3, [r3, #20]
 80003fc:	4a13      	ldr	r2, [pc, #76]	; (800044c <EXTI9_5_IRQHandler+0xa0>)
 80003fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000402:	6153      	str	r3, [r2, #20]
 8000404:	4b12      	ldr	r3, [pc, #72]	; (8000450 <EXTI9_5_IRQHandler+0xa4>)
 8000406:	69db      	ldr	r3, [r3, #28]
 8000408:	4798      	blx	r3
	if( EXTI->PR & 1<<8 ) { EXTI->PR |= 1<<8; GP_IRQ_CallBack[8](); }
 800040a:	4b10      	ldr	r3, [pc, #64]	; (800044c <EXTI9_5_IRQHandler+0xa0>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000412:	2b00      	cmp	r3, #0
 8000414:	d008      	beq.n	8000428 <EXTI9_5_IRQHandler+0x7c>
 8000416:	4b0d      	ldr	r3, [pc, #52]	; (800044c <EXTI9_5_IRQHandler+0xa0>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	4a0c      	ldr	r2, [pc, #48]	; (800044c <EXTI9_5_IRQHandler+0xa0>)
 800041c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000420:	6153      	str	r3, [r2, #20]
 8000422:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <EXTI9_5_IRQHandler+0xa4>)
 8000424:	6a1b      	ldr	r3, [r3, #32]
 8000426:	4798      	blx	r3
	if( EXTI->PR & 1<<9 ) { EXTI->PR |= 1<<9; GP_IRQ_CallBack[9](); }
 8000428:	4b08      	ldr	r3, [pc, #32]	; (800044c <EXTI9_5_IRQHandler+0xa0>)
 800042a:	695b      	ldr	r3, [r3, #20]
 800042c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000430:	2b00      	cmp	r3, #0
 8000432:	d008      	beq.n	8000446 <EXTI9_5_IRQHandler+0x9a>
 8000434:	4b05      	ldr	r3, [pc, #20]	; (800044c <EXTI9_5_IRQHandler+0xa0>)
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	4a04      	ldr	r2, [pc, #16]	; (800044c <EXTI9_5_IRQHandler+0xa0>)
 800043a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800043e:	6153      	str	r3, [r2, #20]
 8000440:	4b03      	ldr	r3, [pc, #12]	; (8000450 <EXTI9_5_IRQHandler+0xa4>)
 8000442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000444:	4798      	blx	r3
}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40010400 	.word	0x40010400
 8000450:	20000024 	.word	0x20000024

08000454 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<10 ) { EXTI->PR |= 1<<10; GP_IRQ_CallBack[10](); }
 8000458:	4b2d      	ldr	r3, [pc, #180]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 800045a:	695b      	ldr	r3, [r3, #20]
 800045c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000460:	2b00      	cmp	r3, #0
 8000462:	d008      	beq.n	8000476 <EXTI15_10_IRQHandler+0x22>
 8000464:	4b2a      	ldr	r3, [pc, #168]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 8000466:	695b      	ldr	r3, [r3, #20]
 8000468:	4a29      	ldr	r2, [pc, #164]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 800046a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800046e:	6153      	str	r3, [r2, #20]
 8000470:	4b28      	ldr	r3, [pc, #160]	; (8000514 <EXTI15_10_IRQHandler+0xc0>)
 8000472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000474:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= 1<<11; GP_IRQ_CallBack[11](); }
 8000476:	4b26      	ldr	r3, [pc, #152]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800047e:	2b00      	cmp	r3, #0
 8000480:	d008      	beq.n	8000494 <EXTI15_10_IRQHandler+0x40>
 8000482:	4b23      	ldr	r3, [pc, #140]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	4a22      	ldr	r2, [pc, #136]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 8000488:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800048c:	6153      	str	r3, [r2, #20]
 800048e:	4b21      	ldr	r3, [pc, #132]	; (8000514 <EXTI15_10_IRQHandler+0xc0>)
 8000490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000492:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= 1<<12; GP_IRQ_CallBack[12](); }
 8000494:	4b1e      	ldr	r3, [pc, #120]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 8000496:	695b      	ldr	r3, [r3, #20]
 8000498:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800049c:	2b00      	cmp	r3, #0
 800049e:	d008      	beq.n	80004b2 <EXTI15_10_IRQHandler+0x5e>
 80004a0:	4b1b      	ldr	r3, [pc, #108]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 80004a2:	695b      	ldr	r3, [r3, #20]
 80004a4:	4a1a      	ldr	r2, [pc, #104]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 80004a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004aa:	6153      	str	r3, [r2, #20]
 80004ac:	4b19      	ldr	r3, [pc, #100]	; (8000514 <EXTI15_10_IRQHandler+0xc0>)
 80004ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b0:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= 1<<13; GP_IRQ_CallBack[13](); }
 80004b2:	4b17      	ldr	r3, [pc, #92]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d008      	beq.n	80004d0 <EXTI15_10_IRQHandler+0x7c>
 80004be:	4b14      	ldr	r3, [pc, #80]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4a13      	ldr	r2, [pc, #76]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 80004c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004c8:	6153      	str	r3, [r2, #20]
 80004ca:	4b12      	ldr	r3, [pc, #72]	; (8000514 <EXTI15_10_IRQHandler+0xc0>)
 80004cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004ce:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<14; GP_IRQ_CallBack[14](); }
 80004d0:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 80004d2:	695b      	ldr	r3, [r3, #20]
 80004d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d008      	beq.n	80004ee <EXTI15_10_IRQHandler+0x9a>
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 80004de:	695b      	ldr	r3, [r3, #20]
 80004e0:	4a0b      	ldr	r2, [pc, #44]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 80004e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004e6:	6153      	str	r3, [r2, #20]
 80004e8:	4b0a      	ldr	r3, [pc, #40]	; (8000514 <EXTI15_10_IRQHandler+0xc0>)
 80004ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004ec:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<15; GP_IRQ_CallBack[15](); }
 80004ee:	4b08      	ldr	r3, [pc, #32]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d008      	beq.n	800050c <EXTI15_10_IRQHandler+0xb8>
 80004fa:	4b05      	ldr	r3, [pc, #20]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a04      	ldr	r2, [pc, #16]	; (8000510 <EXTI15_10_IRQHandler+0xbc>)
 8000500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000504:	6153      	str	r3, [r2, #20]
 8000506:	4b03      	ldr	r3, [pc, #12]	; (8000514 <EXTI15_10_IRQHandler+0xc0>)
 8000508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800050a:	4798      	blx	r3
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40010400 	.word	0x40010400
 8000514:	20000024 	.word	0x20000024

08000518 <Slave_States>:
	/*Send The Address*/
	I2Cx->DR = Address ;
}

void Slave_States(I2C_TypeDef *I2Cx,Slave_State State)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	460b      	mov	r3, r1
 8000522:	70fb      	strb	r3, [r7, #3]
	uint8_t index = (I2Cx == I2C1) ? I2C1_INDEX : I2C2_INDEX ;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4a32      	ldr	r2, [pc, #200]	; (80005f0 <Slave_States+0xd8>)
 8000528:	4293      	cmp	r3, r2
 800052a:	bf14      	ite	ne
 800052c:	2301      	movne	r3, #1
 800052e:	2300      	moveq	r3, #0
 8000530:	b2db      	uxtb	r3, r3
 8000532:	73fb      	strb	r3, [r7, #15]

	switch(State)
 8000534:	78fb      	ldrb	r3, [r7, #3]
 8000536:	2b04      	cmp	r3, #4
 8000538:	d856      	bhi.n	80005e8 <Slave_States+0xd0>
 800053a:	a201      	add	r2, pc, #4	; (adr r2, 8000540 <Slave_States+0x28>)
 800053c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000540:	0800055b 	.word	0x0800055b
 8000544:	08000555 	.word	0x08000555
 8000548:	0800057f 	.word	0x0800057f
 800054c:	08000597 	.word	0x08000597
 8000550:	080005bb 	.word	0x080005bb
	{
	case I2C_ERROR_AF:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	699b      	ldr	r3, [r3, #24]
		{
			//Slave shouldn't send anything else
		}
		break;
 8000558:	e046      	b.n	80005e8 <Slave_States+0xd0>

	case I2C_EV_STOP:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	f003 0304 	and.w	r3, r3, #4
 8000562:	2b00      	cmp	r3, #0
 8000564:	d03b      	beq.n	80005de <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is Sent by the master
			Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_STOP);
 8000566:	7bfa      	ldrb	r2, [r7, #15]
 8000568:	4922      	ldr	r1, [pc, #136]	; (80005f4 <Slave_States+0xdc>)
 800056a:	4613      	mov	r3, r2
 800056c:	00db      	lsls	r3, r3, #3
 800056e:	4413      	add	r3, r2
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	440b      	add	r3, r1
 8000574:	3320      	adds	r3, #32
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2000      	movs	r0, #0
 800057a:	4798      	blx	r3
		}
		break;
 800057c:	e02f      	b.n	80005de <Slave_States+0xc6>

	case I2C_EV_ADDR_Matched:
		//Notify APP that The address is matched with The slave address
		Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_ADDR_Matched);
 800057e:	7bfa      	ldrb	r2, [r7, #15]
 8000580:	491c      	ldr	r1, [pc, #112]	; (80005f4 <Slave_States+0xdc>)
 8000582:	4613      	mov	r3, r2
 8000584:	00db      	lsls	r3, r3, #3
 8000586:	4413      	add	r3, r2
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	440b      	add	r3, r1
 800058c:	3320      	adds	r3, #32
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2002      	movs	r0, #2
 8000592:	4798      	blx	r3
		break;
 8000594:	e028      	b.n	80005e8 <Slave_States+0xd0>

	case I2C_EV_DATA_REQ:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	f003 0304 	and.w	r3, r3, #4
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d01f      	beq.n	80005e2 <Slave_States+0xca>
		{
			//The APP Layer should send the data (MCAL_I2C_SlaveSendData)in this state
			Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_DATA_REQ);
 80005a2:	7bfa      	ldrb	r2, [r7, #15]
 80005a4:	4913      	ldr	r1, [pc, #76]	; (80005f4 <Slave_States+0xdc>)
 80005a6:	4613      	mov	r3, r2
 80005a8:	00db      	lsls	r3, r3, #3
 80005aa:	4413      	add	r3, r2
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	440b      	add	r3, r1
 80005b0:	3320      	adds	r3, #32
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2003      	movs	r0, #3
 80005b6:	4798      	blx	r3
		}

		break;
 80005b8:	e013      	b.n	80005e2 <Slave_States+0xca>

	case I2C_EV_DATA_RCV:
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & (I2C_SR2_TRA)) )
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	f003 0304 	and.w	r3, r3, #4
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d10f      	bne.n	80005e6 <Slave_States+0xce>
		{
			//The APP Layer should read the data (MCAL_I2C_SlaveReceiveData)in this state
			Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_DATA_RCV);
 80005c6:	7bfa      	ldrb	r2, [r7, #15]
 80005c8:	490a      	ldr	r1, [pc, #40]	; (80005f4 <Slave_States+0xdc>)
 80005ca:	4613      	mov	r3, r2
 80005cc:	00db      	lsls	r3, r3, #3
 80005ce:	4413      	add	r3, r2
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	440b      	add	r3, r1
 80005d4:	3320      	adds	r3, #32
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2004      	movs	r0, #4
 80005da:	4798      	blx	r3
		}

		break;
 80005dc:	e003      	b.n	80005e6 <Slave_States+0xce>
		break;
 80005de:	bf00      	nop
 80005e0:	e002      	b.n	80005e8 <Slave_States+0xd0>
		break;
 80005e2:	bf00      	nop
 80005e4:	e000      	b.n	80005e8 <Slave_States+0xd0>
		break;
 80005e6:	bf00      	nop
	}
}
 80005e8:	bf00      	nop
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40005400 	.word	0x40005400
 80005f4:	20000060 	.word	0x20000060

080005f8 <I2C1_EV_IRQHandler>:
 * 							ISR Functions
 * =====================================================================================
 */

void I2C1_EV_IRQHandler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0
	volatile uint32_t dummyRead = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
	I2C_TypeDef* I2Cx =I2C1 ;
 8000602:	4b35      	ldr	r3, [pc, #212]	; (80006d8 <I2C1_EV_IRQHandler+0xe0>)
 8000604:	617b      	str	r3, [r7, #20]
	//Interrupt Handler for both master and slave mode of a device
	uint32_t temp1, temp2, temp3;

	temp1 = I2Cx->CR2 & (I2C_CR2_ITEVTEN);
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800060e:	613b      	str	r3, [r7, #16]
	temp2 = I2Cx->CR2 & (I2C_CR2_ITBUFEN);
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000618:	60fb      	str	r3, [r7, #12]

	temp3 = I2Cx->SR1 & (I2C_SR1_STOPF);
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	f003 0310 	and.w	r3, r3, #16
 8000622:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by STOPF event
	//Note : Stop detection flag is applicable only slave mode
	if(temp1 && temp3)
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d00c      	beq.n	8000644 <I2C1_EV_IRQHandler+0x4c>
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d009      	beq.n	8000644 <I2C1_EV_IRQHandler+0x4c>
	{
		// STOP Flag is Set
		// Clear the STOPF by reading SR1 register followed by writing to CR1 register
		dummyRead = I2Cx->SR1;
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	695b      	ldr	r3, [r3, #20]
 8000634:	607b      	str	r3, [r7, #4]
		I2Cx->CR1 = 0x0000;
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
		Slave_States(I2Cx,I2C_EV_STOP);
 800063c:	2100      	movs	r1, #0
 800063e:	6978      	ldr	r0, [r7, #20]
 8000640:	f7ff ff6a 	bl	8000518 <Slave_States>
	}

	/*---------------------------------------------------*/
	temp3 = I2Cx->SR1 & (I2C_SR1_ADDR);
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	695b      	ldr	r3, [r3, #20]
 8000648:	f003 0302 	and.w	r3, r3, #2
 800064c:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by ADDR event
	//Note :When master mode : Address is sent
	//		When slave mode  : Address is matched with own address
	if(temp1 && temp3)
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d012      	beq.n	800067a <I2C1_EV_IRQHandler+0x82>
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d00f      	beq.n	800067a <I2C1_EV_IRQHandler+0x82>
	{
		// Interrupt is generated because of ADDR event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	2b00      	cmp	r3, #0
 8000664:	d109      	bne.n	800067a <I2C1_EV_IRQHandler+0x82>
		}
		else
		{
			//Slave mode
			//Clear the ADDR flag (Read SR1 , Read SR2)
			dummyRead = I2Cx->SR1;
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	607b      	str	r3, [r7, #4]
			dummyRead = I2Cx->SR2;
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	607b      	str	r3, [r7, #4]
			Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 8000672:	2102      	movs	r1, #2
 8000674:	6978      	ldr	r0, [r7, #20]
 8000676:	f7ff ff4f 	bl	8000518 <Slave_States>
		}
	}

	/*---------------------------------------------------*/
	temp3 = I2Cx->SR1 & (I2C_SR1_TXE);
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000682:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by TXE event
	if(temp1 && temp3)
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d00c      	beq.n	80006a4 <I2C1_EV_IRQHandler+0xac>
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d009      	beq.n	80006a4 <I2C1_EV_IRQHandler+0xac>
	{
		// Interrupt is generated because of TXE event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f003 0301 	and.w	r3, r3, #1
 8000698:	2b00      	cmp	r3, #0
 800069a:	d103      	bne.n	80006a4 <I2C1_EV_IRQHandler+0xac>
			//Master mode
		}
		else
		{
			//Slave mode
			Slave_States(I2Cx,I2C_EV_DATA_REQ);
 800069c:	2103      	movs	r1, #3
 800069e:	6978      	ldr	r0, [r7, #20]
 80006a0:	f7ff ff3a 	bl	8000518 <Slave_States>
		}
	}
	/*---------------------------------------------------*/
	temp3 = I2Cx->SR1 & (I2C_SR1_RXNE);
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	695b      	ldr	r3, [r3, #20]
 80006a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ac:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by RXNE event
	if(temp1 && temp3)
 80006ae:	693b      	ldr	r3, [r7, #16]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d00c      	beq.n	80006ce <I2C1_EV_IRQHandler+0xd6>
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d009      	beq.n	80006ce <I2C1_EV_IRQHandler+0xd6>
	{
		// Interrupt is generated because of RXNE event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d103      	bne.n	80006ce <I2C1_EV_IRQHandler+0xd6>
			//Master mode
		}
		else
		{
			//Slave mode
			Slave_States(I2Cx,I2C_EV_DATA_RCV);
 80006c6:	2104      	movs	r1, #4
 80006c8:	6978      	ldr	r0, [r7, #20]
 80006ca:	f7ff ff25 	bl	8000518 <Slave_States>
		}
	}
}
 80006ce:	bf00      	nop
 80006d0:	3718      	adds	r7, #24
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40005400 	.word	0x40005400

080006dc <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0

}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr

080006e8 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
//			//Slave mode
//			Slave_States(I2Cx,I2C_EV_DATA_RCV);
//		}
//	}

}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr

080006f4 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0

}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr

08000700 <SPI1_IRQHandler>:
 * 							ISR Functions
 * =====================================================================================
 */

void SPI1_IRQHandler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;

	irq_src.TXE  = ( ( SPI1->SPI_SR  & (1<<1)) >> 1 ) ;
 8000706:	4b13      	ldr	r3, [pc, #76]	; (8000754 <SPI1_IRQHandler+0x54>)
 8000708:	689b      	ldr	r3, [r3, #8]
 800070a:	085b      	lsrs	r3, r3, #1
 800070c:	f003 0301 	and.w	r3, r3, #1
 8000710:	b2da      	uxtb	r2, r3
 8000712:	793b      	ldrb	r3, [r7, #4]
 8000714:	f362 0300 	bfi	r3, r2, #0, #1
 8000718:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI1->SPI_SR  & (1<<0)) >> 0 ) ;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <SPI1_IRQHandler+0x54>)
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	b2da      	uxtb	r2, r3
 8000724:	793b      	ldrb	r3, [r7, #4]
 8000726:	f362 0341 	bfi	r3, r2, #1, #1
 800072a:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI1->SPI_SR  & (1<<4)) >> 4 ) ;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <SPI1_IRQHandler+0x54>)
 800072e:	689b      	ldr	r3, [r3, #8]
 8000730:	091b      	lsrs	r3, r3, #4
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	b2da      	uxtb	r2, r3
 8000738:	793b      	ldrb	r3, [r7, #4]
 800073a:	f362 0382 	bfi	r3, r2, #2, #1
 800073e:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(irq_src);
 8000740:	4b05      	ldr	r3, [pc, #20]	; (8000758 <SPI1_IRQHandler+0x58>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	7938      	ldrb	r0, [r7, #4]
 8000748:	4798      	blx	r3
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40013000 	.word	0x40013000
 8000758:	200000a8 	.word	0x200000a8

0800075c <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;

	irq_src.TXE  = ( ( SPI1->SPI_SR  & (1<<1)) >> 1 ) ;
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <SPI2_IRQHandler+0x54>)
 8000764:	689b      	ldr	r3, [r3, #8]
 8000766:	085b      	lsrs	r3, r3, #1
 8000768:	f003 0301 	and.w	r3, r3, #1
 800076c:	b2da      	uxtb	r2, r3
 800076e:	793b      	ldrb	r3, [r7, #4]
 8000770:	f362 0300 	bfi	r3, r2, #0, #1
 8000774:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI1->SPI_SR  & (1<<0)) >> 0 ) ;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <SPI2_IRQHandler+0x54>)
 8000778:	689b      	ldr	r3, [r3, #8]
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	b2da      	uxtb	r2, r3
 8000780:	793b      	ldrb	r3, [r7, #4]
 8000782:	f362 0341 	bfi	r3, r2, #1, #1
 8000786:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI1->SPI_SR  & (1<<4)) >> 4 ) ;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <SPI2_IRQHandler+0x54>)
 800078a:	689b      	ldr	r3, [r3, #8]
 800078c:	091b      	lsrs	r3, r3, #4
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	b2da      	uxtb	r2, r3
 8000794:	793b      	ldrb	r3, [r7, #4]
 8000796:	f362 0382 	bfi	r3, r2, #2, #1
 800079a:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(irq_src);
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <SPI2_IRQHandler+0x58>)
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	7938      	ldrb	r0, [r7, #4]
 80007a4:	4798      	blx	r3
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40013000 	.word	0x40013000
 80007b4:	200000a8 	.word	0x200000a8

080007b8 <MCAL_TIM_Init>:
 * @retval		 -none
 * Note			 -none
 */

Error_status MCAL_TIM_Init(TIM_TypeDef *TIMx,TIM_Config_t *TIM_Config)
{
 80007b8:	b4b0      	push	{r4, r5, r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	6039      	str	r1, [r7, #0]


	//Clock & Configurations
	if (TIMx == TIM2)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007c8:	d116      	bne.n	80007f8 <MCAL_TIM_Init+0x40>
	{
		RCC_TIM2_CLK_EN();
 80007ca:	4b91      	ldr	r3, [pc, #580]	; (8000a10 <MCAL_TIM_Init+0x258>)
 80007cc:	69db      	ldr	r3, [r3, #28]
 80007ce:	4a90      	ldr	r2, [pc, #576]	; (8000a10 <MCAL_TIM_Init+0x258>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	61d3      	str	r3, [r2, #28]
		Global_TIM_Config[0] = *TIM_Config ;
 80007d6:	4a8f      	ldr	r2, [pc, #572]	; (8000a14 <MCAL_TIM_Init+0x25c>)
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	4614      	mov	r4, r2
 80007dc:	461d      	mov	r5, r3
 80007de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007e6:	e884 0003 	stmia.w	r4, {r0, r1}
		NVIC_IQR28_TIM2_Enable();
 80007ea:	4b8b      	ldr	r3, [pc, #556]	; (8000a18 <MCAL_TIM_Init+0x260>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a8a      	ldr	r2, [pc, #552]	; (8000a18 <MCAL_TIM_Init+0x260>)
 80007f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f4:	6013      	str	r3, [r2, #0]
 80007f6:	e039      	b.n	800086c <MCAL_TIM_Init+0xb4>
	}
	else if (TIMx == TIM3)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4a88      	ldr	r2, [pc, #544]	; (8000a1c <MCAL_TIM_Init+0x264>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d117      	bne.n	8000830 <MCAL_TIM_Init+0x78>
	{
		RCC_TIM3_CLK_EN();
 8000800:	4b83      	ldr	r3, [pc, #524]	; (8000a10 <MCAL_TIM_Init+0x258>)
 8000802:	69db      	ldr	r3, [r3, #28]
 8000804:	4a82      	ldr	r2, [pc, #520]	; (8000a10 <MCAL_TIM_Init+0x258>)
 8000806:	f043 0302 	orr.w	r3, r3, #2
 800080a:	61d3      	str	r3, [r2, #28]
		Global_TIM_Config[1] = *TIM_Config ;
 800080c:	4b81      	ldr	r3, [pc, #516]	; (8000a14 <MCAL_TIM_Init+0x25c>)
 800080e:	683a      	ldr	r2, [r7, #0]
 8000810:	f103 0418 	add.w	r4, r3, #24
 8000814:	4615      	mov	r5, r2
 8000816:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000818:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800081a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800081e:	e884 0003 	stmia.w	r4, {r0, r1}
		NVIC_IQR29_TIM3_Enable();
 8000822:	4b7d      	ldr	r3, [pc, #500]	; (8000a18 <MCAL_TIM_Init+0x260>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a7c      	ldr	r2, [pc, #496]	; (8000a18 <MCAL_TIM_Init+0x260>)
 8000828:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800082c:	6013      	str	r3, [r2, #0]
 800082e:	e01d      	b.n	800086c <MCAL_TIM_Init+0xb4>

	}
	else if (TIMx == TIM4)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a7b      	ldr	r2, [pc, #492]	; (8000a20 <MCAL_TIM_Init+0x268>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d117      	bne.n	8000868 <MCAL_TIM_Init+0xb0>
	{
		RCC_TIM4_CLK_EN();
 8000838:	4b75      	ldr	r3, [pc, #468]	; (8000a10 <MCAL_TIM_Init+0x258>)
 800083a:	69db      	ldr	r3, [r3, #28]
 800083c:	4a74      	ldr	r2, [pc, #464]	; (8000a10 <MCAL_TIM_Init+0x258>)
 800083e:	f043 0304 	orr.w	r3, r3, #4
 8000842:	61d3      	str	r3, [r2, #28]
		Global_TIM_Config[2] = *TIM_Config ;
 8000844:	4b73      	ldr	r3, [pc, #460]	; (8000a14 <MCAL_TIM_Init+0x25c>)
 8000846:	683a      	ldr	r2, [r7, #0]
 8000848:	f103 0430 	add.w	r4, r3, #48	; 0x30
 800084c:	4615      	mov	r5, r2
 800084e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000850:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000852:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000856:	e884 0003 	stmia.w	r4, {r0, r1}
		NVIC_IQR30_TIM4_Enable();
 800085a:	4b6f      	ldr	r3, [pc, #444]	; (8000a18 <MCAL_TIM_Init+0x260>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a6e      	ldr	r2, [pc, #440]	; (8000a18 <MCAL_TIM_Init+0x260>)
 8000860:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000864:	6013      	str	r3, [r2, #0]
 8000866:	e001      	b.n	800086c <MCAL_TIM_Init+0xb4>
	}
	else
	{
		return TIMx_NOT_Found ;
 8000868:	2301      	movs	r3, #1
 800086a:	e291      	b.n	8000d90 <MCAL_TIM_Init+0x5d8>



	//Mode Selection

	switch(TIM_Config->TIM_Mode)
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	881b      	ldrh	r3, [r3, #0]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d002      	beq.n	800087a <MCAL_TIM_Init+0xc2>
 8000874:	2b02      	cmp	r3, #2
 8000876:	d034      	beq.n	80008e2 <MCAL_TIM_Init+0x12a>
 8000878:	e231      	b.n	8000cde <MCAL_TIM_Init+0x526>

		//TIM_Auto_Reload_Not_Bufferd
		//	Bit 7 ARPE: Auto-reload preload enable
		//	0: TIMx_ARR register is not buffered
		//	1: TIMx_ARR register is buffered
		CLR_BIT(TIMx->CR1,7);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	601a      	str	r2, [r3, #0]



		if(TIM_Config->Counter.Count_Direction == Count_Direction_UP)
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	7a1b      	ldrb	r3, [r3, #8]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d10c      	bne.n	80008a8 <MCAL_TIM_Init+0xf0>
– Update generation through the slave mode controller
1: Only counter overflow/underflow generates an update interrupt or DMA request if
enabled.
			 */

			SET_BIT(TIMx->CR1,2) ;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f043 0204 	orr.w	r2, r3, #4
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	601a      	str	r2, [r3, #0]

			//Bit 4 DIR: Direction Selection [Upcount]
			CLR_BIT(TIMx->CR1,4) ;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f023 0210 	bic.w	r2, r3, #16
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	601a      	str	r2, [r3, #0]
		{
			//Bit 2 URS: Update request source
			SET_BIT(TIMx->CR1,2) ;
		}

		break;
 80008a6:	e222      	b.n	8000cee <MCAL_TIM_Init+0x536>
		else if(TIM_Config->Counter.Count_Direction == Count_Direction_DOWN)
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	7a1b      	ldrb	r3, [r3, #8]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d10c      	bne.n	80008ca <MCAL_TIM_Init+0x112>
			SET_BIT(TIMx->CR1,2) ;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f043 0204 	orr.w	r2, r3, #4
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	601a      	str	r2, [r3, #0]
			SET_BIT(TIMx->CR1,4) ;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f043 0210 	orr.w	r2, r3, #16
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	601a      	str	r2, [r3, #0]
		break;
 80008c8:	e211      	b.n	8000cee <MCAL_TIM_Init+0x536>
		else if(TIM_Config->Counter.Count_Direction == Count_Direction_UP_DOWN)
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	7a1b      	ldrb	r3, [r3, #8]
 80008ce:	2b02      	cmp	r3, #2
 80008d0:	f040 820d 	bne.w	8000cee <MCAL_TIM_Init+0x536>
			SET_BIT(TIMx->CR1,2) ;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f043 0204 	orr.w	r2, r3, #4
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	601a      	str	r2, [r3, #0]
		break;
 80008e0:	e205      	b.n	8000cee <MCAL_TIM_Init+0x536>

		//TIM_Auto_Reload_Bufferd
		//	Bit 7 ARPE: Auto-reload preload enable
		//	0: TIMx_ARR register is not buffered
		//	1: TIMx_ARR register is buffered
		SET_BIT(TIMx->CR1,7);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	601a      	str	r2, [r3, #0]
1: Re-initialize the counter and generates an update of the registers. Note that the prescaler
counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if
the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload
value (TIMx_ARR) if DIR=1 (downcounting).
		 */
		SET_BIT(TIMx->EGR,0);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	f043 0201 	orr.w	r2, r3, #1
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	615a      	str	r2, [r3, #20]


		/******************** Channel Configuration ********************/

		if(TIM_Config->PWM.Channel == TIM_CHANNEL_1 ){
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	7a9b      	ldrb	r3, [r3, #10]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d175      	bne.n	80009ee <MCAL_TIM_Init+0x236>
			/*
			 Bits 1:0 CC1S: Capture/Compare 1 selection
			This bit-field defines the direction of the channel (input/output) as well as the used input.
			00: CC1 channel is configured as output.
			 */
			TIMx->CCMR1 |= (0b00 << 0);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	699a      	ldr	r2, [r3, #24]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	619a      	str	r2, [r3, #24]




			/****** Mode Configuration ********/
			if(TIM_Config->PWM.Mode == PWM_Mode_FROZEN){
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	7adb      	ldrb	r3, [r3, #11]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d104      	bne.n	800091c <MCAL_TIM_Init+0x164>
Note: In PWM mode 1 or 2, the OCREF level changes only when the result of the
comparison changes or when the output compare mode switches from “frozen” mode to “PWM” mode.

				 */
				//000: Frozen
				TIMx->CCMR1 |= (0b000 << 4);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	699a      	ldr	r2, [r3, #24]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	619a      	str	r2, [r3, #24]
 800091a:	e04e      	b.n	80009ba <MCAL_TIM_Init+0x202>

			}else if(TIM_Config->PWM.Mode == PWM_Mode_EDGE_UP){
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	7adb      	ldrb	r3, [r3, #11]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d123      	bne.n	800096c <MCAL_TIM_Init+0x1b4>
	– Update generation through the slave mode controller
	1: Only counter overflow/underflow generates an update interrupt or DMA request if
	enabled.
				 */
				// Update request source Enable
				CLR_BIT(TIMx->CR1,2) ;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f023 0204 	bic.w	r2, r3, #4
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	601a      	str	r2, [r3, #0]

				//Bit 4 DIR: Direction Selection [Upcount]
				CLR_BIT(TIMx->CR1,4) ;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f023 0210 	bic.w	r2, r3, #16
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	601a      	str	r2, [r3, #0]

				//****************************************************************************

				if(TIM_Config->PWM.Ouptut_On_Compare_Match == PWM_Compare_Match_High){
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	7b9b      	ldrb	r3, [r3, #14]
 8000940:	2b01      	cmp	r3, #1
 8000942:	d106      	bne.n	8000952 <MCAL_TIM_Init+0x19a>

					//111: PWM mode 2
					TIMx->CCMR1 |= (0b111 << 4);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	f043 0270 	orr.w	r2, r3, #112	; 0x70
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	619a      	str	r2, [r3, #24]
 8000950:	e005      	b.n	800095e <MCAL_TIM_Init+0x1a6>

				}else{
					//110: PWM mode 1
					TIMx->CCMR1 |= (0b110 << 4);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	619a      	str	r2, [r3, #24]
				}

				//0: CCxP: Capture/Compare output polarity OCx active high
				CLR_BIT(TIMx->CCER,1);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6a1b      	ldr	r3, [r3, #32]
 8000962:	f023 0202 	bic.w	r2, r3, #2
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	621a      	str	r2, [r3, #32]
 800096a:	e026      	b.n	80009ba <MCAL_TIM_Init+0x202>


			}else if(TIM_Config->PWM.Mode == PWM_Mode_EDGE_DOWN){
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	7adb      	ldrb	r3, [r3, #11]
 8000970:	2b02      	cmp	r3, #2
 8000972:	d122      	bne.n	80009ba <MCAL_TIM_Init+0x202>

				//Bit 2 URS: Update request source
				CLR_BIT(TIMx->CR1,2) ;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f023 0204 	bic.w	r2, r3, #4
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	601a      	str	r2, [r3, #0]

				//Bit 4 DIR: Direction [DOWN_Count]
				SET_BIT(TIMx->CR1,4) ;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f043 0210 	orr.w	r2, r3, #16
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	601a      	str	r2, [r3, #0]

				//****************************************

				if(TIM_Config->PWM.Ouptut_On_Compare_Match == PWM_Compare_Match_High){
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	7b9b      	ldrb	r3, [r3, #14]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d106      	bne.n	80009a2 <MCAL_TIM_Init+0x1ea>

					//110: PWM mode 1
					TIMx->CCMR1 |= (0b110 << 4);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	619a      	str	r2, [r3, #24]
 80009a0:	e005      	b.n	80009ae <MCAL_TIM_Init+0x1f6>

				}else{
					//111: PWM mode 2
					TIMx->CCMR1 |= (0b111 << 4);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	699b      	ldr	r3, [r3, #24]
 80009a6:	f043 0270 	orr.w	r2, r3, #112	; 0x70
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	619a      	str	r2, [r3, #24]
				}

				//0: CCxP: Capture/Compare output polarity OCx active high
				CLR_BIT(TIMx->CCER,1);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6a1b      	ldr	r3, [r3, #32]
 80009b2:	f023 0202 	bic.w	r2, r3, #2
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	621a      	str	r2, [r3, #32]
It is loaded permanently if the preload feature is not selected in the TIMx_CCMR1 register
(bit OC1PE). Else the preload value is copied in the active capture/compare 1 register when an update event occurs.
The active capture/compare register contains the value to be compared to the counter
TIMx_CNT and signaled on OC1 output.
			 */
			if(TIM_Config->PWM.Compare_value <= TIM_Config->Auto_Reload_Value){
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	899a      	ldrh	r2, [r3, #12]
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	88db      	ldrh	r3, [r3, #6]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d811      	bhi.n	80009ea <MCAL_TIM_Init+0x232>

				TIMx->CCR1 = TIM_Config->PWM.Compare_value ;
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	899b      	ldrh	r3, [r3, #12]
 80009ca:	461a      	mov	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	635a      	str	r2, [r3, #52]	; 0x34
1: These bits can not be modified as long as LOCK level 3 has been programmed
(LOCK bits in TIMx_BDTR register) and CC1S=00 (the channel is configured in output).
2: The PWM mode can be used without validating the preload register only
in one pulse mode (OPM bit set in TIMx_CR1 register). Else the behavior is not guaranteed.
			 */
			SET_BIT(TIMx->CCMR1,3);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	f043 0208 	orr.w	r2, r3, #8
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	619a      	str	r2, [r3, #24]
0: Off - OC1 is not active.
1: On - OC1 signal is output on the corresponding output pin.
			 */

			//Capture/Compare output enable
			SET_BIT(TIMx->CCER,0);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6a1b      	ldr	r3, [r3, #32]
 80009e0:	f043 0201 	orr.w	r2, r3, #1
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	621a      	str	r2, [r3, #32]
		}




		break;
 80009e8:	e183      	b.n	8000cf2 <MCAL_TIM_Init+0x53a>
				return TIM_PWM_Auto_Reload_Value_Exceeded;
 80009ea:	2305      	movs	r3, #5
 80009ec:	e1d0      	b.n	8000d90 <MCAL_TIM_Init+0x5d8>
		}else if(TIM_Config->PWM.Channel == TIM_CHANNEL_2){
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	7a9b      	ldrb	r3, [r3, #10]
 80009f2:	2b02      	cmp	r3, #2
 80009f4:	d17f      	bne.n	8000af6 <MCAL_TIM_Init+0x33e>
			TIMx->CCMR1 |= (0x00 << 8);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	699a      	ldr	r2, [r3, #24]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	619a      	str	r2, [r3, #24]
			if(TIM_Config->PWM.Mode == PWM_Mode_FROZEN){
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	7adb      	ldrb	r3, [r3, #11]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d10e      	bne.n	8000a24 <MCAL_TIM_Init+0x26c>
				TIMx->CCMR1 |= (0x000 << 12);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	699a      	ldr	r2, [r3, #24]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	619a      	str	r2, [r3, #24]
 8000a0e:	e058      	b.n	8000ac2 <MCAL_TIM_Init+0x30a>
 8000a10:	40021000 	.word	0x40021000
 8000a14:	20000128 	.word	0x20000128
 8000a18:	e000e100 	.word	0xe000e100
 8000a1c:	40000400 	.word	0x40000400
 8000a20:	40000800 	.word	0x40000800
			}else if(TIM_Config->PWM.Mode == PWM_Mode_EDGE_UP){
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	7adb      	ldrb	r3, [r3, #11]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d123      	bne.n	8000a74 <MCAL_TIM_Init+0x2bc>
				CLR_BIT(TIMx->CR1,2) ;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f023 0204 	bic.w	r2, r3, #4
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	601a      	str	r2, [r3, #0]
				CLR_BIT(TIMx->CR1,4) ;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f023 0210 	bic.w	r2, r3, #16
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	601a      	str	r2, [r3, #0]
				if(TIM_Config->PWM.Ouptut_On_Compare_Match == PWM_Compare_Match_High){
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	7b9b      	ldrb	r3, [r3, #14]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d106      	bne.n	8000a5a <MCAL_TIM_Init+0x2a2>
					TIMx->CCMR1 |= (0b111 << 12);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	619a      	str	r2, [r3, #24]
 8000a58:	e005      	b.n	8000a66 <MCAL_TIM_Init+0x2ae>
					TIMx->CCMR1 |= (0b110 << 12);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	619a      	str	r2, [r3, #24]
				CLR_BIT(TIMx->CCER,5);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6a1b      	ldr	r3, [r3, #32]
 8000a6a:	f023 0220 	bic.w	r2, r3, #32
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	621a      	str	r2, [r3, #32]
 8000a72:	e026      	b.n	8000ac2 <MCAL_TIM_Init+0x30a>
			}else if(TIM_Config->PWM.Mode == PWM_Mode_EDGE_DOWN){
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	7adb      	ldrb	r3, [r3, #11]
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	d122      	bne.n	8000ac2 <MCAL_TIM_Init+0x30a>
				CLR_BIT(TIMx->CR1,2) ;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f023 0204 	bic.w	r2, r3, #4
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	601a      	str	r2, [r3, #0]
				SET_BIT(TIMx->CR1,4) ;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f043 0210 	orr.w	r2, r3, #16
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	601a      	str	r2, [r3, #0]
				if(TIM_Config->PWM.Ouptut_On_Compare_Match == PWM_Compare_Match_High){
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	7b9b      	ldrb	r3, [r3, #14]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d106      	bne.n	8000aaa <MCAL_TIM_Init+0x2f2>
					TIMx->CCMR1 |= (0b110 << 12);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	619a      	str	r2, [r3, #24]
 8000aa8:	e005      	b.n	8000ab6 <MCAL_TIM_Init+0x2fe>
					TIMx->CCMR1 |= (0b111 << 12);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	619a      	str	r2, [r3, #24]
				CLR_BIT(TIMx->CCER,5);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6a1b      	ldr	r3, [r3, #32]
 8000aba:	f023 0220 	bic.w	r2, r3, #32
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	621a      	str	r2, [r3, #32]
			if(TIM_Config->PWM.Compare_value <= TIM_Config->Auto_Reload_Value){
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	899a      	ldrh	r2, [r3, #12]
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	88db      	ldrh	r3, [r3, #6]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d811      	bhi.n	8000af2 <MCAL_TIM_Init+0x33a>
				TIMx->CCR2 = TIM_Config->PWM.Compare_value ;
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	899b      	ldrh	r3, [r3, #12]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	639a      	str	r2, [r3, #56]	; 0x38
			SET_BIT(TIMx->CCMR1,11);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	619a      	str	r2, [r3, #24]
			SET_BIT(TIMx->CCER,4);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6a1b      	ldr	r3, [r3, #32]
 8000ae8:	f043 0210 	orr.w	r2, r3, #16
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	621a      	str	r2, [r3, #32]
		break;
 8000af0:	e0ff      	b.n	8000cf2 <MCAL_TIM_Init+0x53a>
				return TIM_PWM_Auto_Reload_Value_Exceeded;
 8000af2:	2305      	movs	r3, #5
 8000af4:	e14c      	b.n	8000d90 <MCAL_TIM_Init+0x5d8>
		}else if(TIM_Config->PWM.Channel == TIM_CHANNEL_3){
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	7a9b      	ldrb	r3, [r3, #10]
 8000afa:	2b03      	cmp	r3, #3
 8000afc:	d175      	bne.n	8000bea <MCAL_TIM_Init+0x432>
			TIMx->CCMR2 |= (0x00 << 0);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	69da      	ldr	r2, [r3, #28]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	61da      	str	r2, [r3, #28]
			if(TIM_Config->PWM.Mode == PWM_Mode_FROZEN){
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	7adb      	ldrb	r3, [r3, #11]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d104      	bne.n	8000b18 <MCAL_TIM_Init+0x360>
				TIMx->CCMR2 |= (0x000 << 4);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	69da      	ldr	r2, [r3, #28]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	61da      	str	r2, [r3, #28]
 8000b16:	e04e      	b.n	8000bb6 <MCAL_TIM_Init+0x3fe>
			}else if(TIM_Config->PWM.Mode == PWM_Mode_EDGE_UP){
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	7adb      	ldrb	r3, [r3, #11]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d123      	bne.n	8000b68 <MCAL_TIM_Init+0x3b0>
				CLR_BIT(TIMx->CR1,2) ;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f023 0204 	bic.w	r2, r3, #4
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	601a      	str	r2, [r3, #0]
				CLR_BIT(TIMx->CR1,4) ;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f023 0210 	bic.w	r2, r3, #16
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	601a      	str	r2, [r3, #0]
				if(TIM_Config->PWM.Ouptut_On_Compare_Match == PWM_Compare_Match_High){
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	7b9b      	ldrb	r3, [r3, #14]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d106      	bne.n	8000b4e <MCAL_TIM_Init+0x396>
					TIMx->CCMR2 |= (0b111 << 4);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	69db      	ldr	r3, [r3, #28]
 8000b44:	f043 0270 	orr.w	r2, r3, #112	; 0x70
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	61da      	str	r2, [r3, #28]
 8000b4c:	e005      	b.n	8000b5a <MCAL_TIM_Init+0x3a2>
					TIMx->CCMR2 |= (0b110 << 4);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	69db      	ldr	r3, [r3, #28]
 8000b52:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	61da      	str	r2, [r3, #28]
				CLR_BIT(TIMx->CCER,9);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6a1b      	ldr	r3, [r3, #32]
 8000b5e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	621a      	str	r2, [r3, #32]
 8000b66:	e026      	b.n	8000bb6 <MCAL_TIM_Init+0x3fe>
			}else if(TIM_Config->PWM.Mode == PWM_Mode_EDGE_DOWN){
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	7adb      	ldrb	r3, [r3, #11]
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d122      	bne.n	8000bb6 <MCAL_TIM_Init+0x3fe>
				CLR_BIT(TIMx->CR1,2) ;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f023 0204 	bic.w	r2, r3, #4
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	601a      	str	r2, [r3, #0]
				SET_BIT(TIMx->CR1,4) ;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f043 0210 	orr.w	r2, r3, #16
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	601a      	str	r2, [r3, #0]
				if(TIM_Config->PWM.Ouptut_On_Compare_Match == PWM_Compare_Match_High){
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	7b9b      	ldrb	r3, [r3, #14]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d106      	bne.n	8000b9e <MCAL_TIM_Init+0x3e6>
					TIMx->CCMR2 |= (0b110 << 4);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	69db      	ldr	r3, [r3, #28]
 8000b94:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	61da      	str	r2, [r3, #28]
 8000b9c:	e005      	b.n	8000baa <MCAL_TIM_Init+0x3f2>
					TIMx->CCMR2 |= (0b111 << 4);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	f043 0270 	orr.w	r2, r3, #112	; 0x70
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	61da      	str	r2, [r3, #28]
				CLR_BIT(TIMx->CCER,9);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6a1b      	ldr	r3, [r3, #32]
 8000bae:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	621a      	str	r2, [r3, #32]
			if(TIM_Config->PWM.Compare_value <= TIM_Config->Auto_Reload_Value){
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	899a      	ldrh	r2, [r3, #12]
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	88db      	ldrh	r3, [r3, #6]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d811      	bhi.n	8000be6 <MCAL_TIM_Init+0x42e>
				TIMx->CCR3 = TIM_Config->PWM.Compare_value ;
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	899b      	ldrh	r3, [r3, #12]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	63da      	str	r2, [r3, #60]	; 0x3c
			SET_BIT(TIMx->CCMR2,3);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	69db      	ldr	r3, [r3, #28]
 8000bd0:	f043 0208 	orr.w	r2, r3, #8
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	61da      	str	r2, [r3, #28]
			SET_BIT(TIMx->CCER,8);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6a1b      	ldr	r3, [r3, #32]
 8000bdc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	621a      	str	r2, [r3, #32]
		break;
 8000be4:	e085      	b.n	8000cf2 <MCAL_TIM_Init+0x53a>
				return TIM_PWM_Auto_Reload_Value_Exceeded;
 8000be6:	2305      	movs	r3, #5
 8000be8:	e0d2      	b.n	8000d90 <MCAL_TIM_Init+0x5d8>
		}else if(TIM_Config->PWM.Channel == TIM_CHANNEL_4){
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	7a9b      	ldrb	r3, [r3, #10]
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	d17f      	bne.n	8000cf2 <MCAL_TIM_Init+0x53a>
			TIMx->CCMR2 |= (0x00 << 8);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	69da      	ldr	r2, [r3, #28]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	61da      	str	r2, [r3, #28]
			if(TIM_Config->PWM.Mode == PWM_Mode_FROZEN){
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	7adb      	ldrb	r3, [r3, #11]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d104      	bne.n	8000c0c <MCAL_TIM_Init+0x454>
				TIMx->CCMR2 |= (0x000 << 12);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	69da      	ldr	r2, [r3, #28]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	61da      	str	r2, [r3, #28]
 8000c0a:	e04e      	b.n	8000caa <MCAL_TIM_Init+0x4f2>
			}else if(TIM_Config->PWM.Mode == PWM_Mode_EDGE_UP){
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	7adb      	ldrb	r3, [r3, #11]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d123      	bne.n	8000c5c <MCAL_TIM_Init+0x4a4>
				CLR_BIT(TIMx->CR1,2) ;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f023 0204 	bic.w	r2, r3, #4
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	601a      	str	r2, [r3, #0]
				CLR_BIT(TIMx->CR1,4) ;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f023 0210 	bic.w	r2, r3, #16
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	601a      	str	r2, [r3, #0]
				if(TIM_Config->PWM.Ouptut_On_Compare_Match == PWM_Compare_Match_High){
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	7b9b      	ldrb	r3, [r3, #14]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d106      	bne.n	8000c42 <MCAL_TIM_Init+0x48a>
					TIMx->CCMR2 |= (0b111 << 12);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	69db      	ldr	r3, [r3, #28]
 8000c38:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	61da      	str	r2, [r3, #28]
 8000c40:	e005      	b.n	8000c4e <MCAL_TIM_Init+0x496>
					TIMx->CCMR2 |= (0b110 << 12);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	61da      	str	r2, [r3, #28]
				CLR_BIT(TIMx->CCER,13);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6a1b      	ldr	r3, [r3, #32]
 8000c52:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	621a      	str	r2, [r3, #32]
 8000c5a:	e026      	b.n	8000caa <MCAL_TIM_Init+0x4f2>
			}else if(TIM_Config->PWM.Mode == PWM_Mode_EDGE_DOWN){
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	7adb      	ldrb	r3, [r3, #11]
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d122      	bne.n	8000caa <MCAL_TIM_Init+0x4f2>
				CLR_BIT(TIMx->CR1,2) ;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f023 0204 	bic.w	r2, r3, #4
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	601a      	str	r2, [r3, #0]
				SET_BIT(TIMx->CR1,4) ;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f043 0210 	orr.w	r2, r3, #16
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	601a      	str	r2, [r3, #0]
				if(TIM_Config->PWM.Ouptut_On_Compare_Match == PWM_Compare_Match_High){
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	7b9b      	ldrb	r3, [r3, #14]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d106      	bne.n	8000c92 <MCAL_TIM_Init+0x4da>
					TIMx->CCMR2 |= (0b110 << 12);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	69db      	ldr	r3, [r3, #28]
 8000c88:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	61da      	str	r2, [r3, #28]
 8000c90:	e005      	b.n	8000c9e <MCAL_TIM_Init+0x4e6>
					TIMx->CCMR2 |= (0b111 << 12);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	69db      	ldr	r3, [r3, #28]
 8000c96:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	61da      	str	r2, [r3, #28]
				CLR_BIT(TIMx->CCER,13);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6a1b      	ldr	r3, [r3, #32]
 8000ca2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	621a      	str	r2, [r3, #32]
			if(TIM_Config->PWM.Compare_value <= TIM_Config->Auto_Reload_Value){
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	899a      	ldrh	r2, [r3, #12]
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	88db      	ldrh	r3, [r3, #6]
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d811      	bhi.n	8000cda <MCAL_TIM_Init+0x522>
				TIMx->CCR4 = TIM_Config->PWM.Compare_value ;
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	899b      	ldrh	r3, [r3, #12]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	641a      	str	r2, [r3, #64]	; 0x40
			SET_BIT(TIMx->CCMR2,11);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	69db      	ldr	r3, [r3, #28]
 8000cc4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	61da      	str	r2, [r3, #28]
			SET_BIT(TIMx->CCER,12);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6a1b      	ldr	r3, [r3, #32]
 8000cd0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	621a      	str	r2, [r3, #32]
		break;
 8000cd8:	e00b      	b.n	8000cf2 <MCAL_TIM_Init+0x53a>
				return TIM_PWM_Auto_Reload_Value_Exceeded;
 8000cda:	2305      	movs	r3, #5
 8000cdc:	e058      	b.n	8000d90 <MCAL_TIM_Init+0x5d8>


	default:
		CLR_BIT(TIMx->CR1,2) ;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f023 0204 	bic.w	r2, r3, #4
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	601a      	str	r2, [r3, #0]
		return TIM_MODE_NOT_Found ;
 8000cea:	2302      	movs	r3, #2
 8000cec:	e050      	b.n	8000d90 <MCAL_TIM_Init+0x5d8>
		break;
 8000cee:	bf00      	nop
 8000cf0:	e000      	b.n	8000cf4 <MCAL_TIM_Init+0x53c>
		break;
 8000cf2:	bf00      	nop
		break;

	}


	CLR_BIT(TIMx->CR1,1) ; //Update enable Bit 1 UDIS: Update disable
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f023 0202 	bic.w	r2, r3, #2
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	601a      	str	r2, [r3, #0]


	// Prescaler set
	TIMx->PSC = (uint16_t)(TIM_Config->Prescaler-1) ;
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	885b      	ldrh	r3, [r3, #2]
 8000d04:	3b01      	subs	r3, #1
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	461a      	mov	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	629a      	str	r2, [r3, #40]	; 0x28


	if (TIM_Config->Auto_Reload_Value < 0xffff)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	88db      	ldrh	r3, [r3, #6]
 8000d12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d009      	beq.n	8000d2e <MCAL_TIM_Init+0x576>
	{
		TIMx->ARR = (uint16_t) (TIM_Config->Auto_Reload_Value); //Auto reload Value
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	88db      	ldrh	r3, [r3, #6]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	62da      	str	r2, [r3, #44]	; 0x2c
	{
		return TIM_Auto_Reload_Value_Exceeded ;

	}

	if (TIM_Config->IRQ_Enable == TIM_IRQ_MODE_None )
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	8a1b      	ldrh	r3, [r3, #16]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d10f      	bne.n	8000d4c <MCAL_TIM_Init+0x594>
 8000d2c:	e001      	b.n	8000d32 <MCAL_TIM_Init+0x57a>
		return TIM_Auto_Reload_Value_Exceeded ;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	e02e      	b.n	8000d90 <MCAL_TIM_Init+0x5d8>
	{
		CLR_BIT(TIMx->DIER,0);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	f023 0201 	bic.w	r2, r3, #1
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	60da      	str	r2, [r3, #12]
		SET_BIT(TIMx->CR1,1);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f043 0202 	orr.w	r2, r3, #2
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	e020      	b.n	8000d8e <MCAL_TIM_Init+0x5d6>
	}
	else if (TIM_Config->IRQ_Enable == TIM_IRQ_MODE_OverFlow )
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	8a1b      	ldrh	r3, [r3, #16]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d10c      	bne.n	8000d6e <MCAL_TIM_Init+0x5b6>
	{
		SET_BIT(TIMx->DIER,0);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	f043 0201 	orr.w	r2, r3, #1
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	60da      	str	r2, [r3, #12]
		CLR_BIT(TIMx->CR1,1);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f023 0202 	bic.w	r2, r3, #2
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	e00f      	b.n	8000d8e <MCAL_TIM_Init+0x5d6>
	}
	else if (TIM_Config->IRQ_Enable == TIM_IRQ_MODE_UnderFlow )
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	8a1b      	ldrh	r3, [r3, #16]
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d10b      	bne.n	8000d8e <MCAL_TIM_Init+0x5d6>
	{
		SET_BIT(TIMx->DIER,0);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68db      	ldr	r3, [r3, #12]
 8000d7a:	f043 0201 	orr.w	r2, r3, #1
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	60da      	str	r2, [r3, #12]
		CLR_BIT(TIMx->CR1,1);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f023 0202 	bic.w	r2, r3, #2
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	601a      	str	r2, [r3, #0]
	}



return 0;
 8000d8e:	2300      	movs	r3, #0

}
 8000d90:	4618      	mov	r0, r3
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bcb0      	pop	{r4, r5, r7}
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <MCAL_TIM_Count_Reset>:
 * @param [in]   -TIMx :  were x can be (1,2,3,4 depending on device used)to select the Timer Peripheral
 * @retval		 -none
 * Note			 -none
 */
Error_status MCAL_TIM_Count_Reset(TIM_TypeDef *TIMx)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]


	if(TIMx != NULL)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d004      	beq.n	8000db4 <MCAL_TIM_Count_Reset+0x18>
	{
		TIMx->CNT = 0x0000;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	625a      	str	r2, [r3, #36]	; 0x24
		return TIMx_No_Error;
 8000db0:	2300      	movs	r3, #0
 8000db2:	e000      	b.n	8000db6 <MCAL_TIM_Count_Reset+0x1a>
	}


	return TIMx_NOT_Found;
 8000db4:	2301      	movs	r3, #1

}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <TIM2_IRQHandler>:
 * 							IRQHandler Functions
 * =====================================================================================
 */

void TIM2_IRQHandler()
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	TIM2->SR = 0x00 ;
 8000dc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
	Global_TIM_Config[0].P_IRQ_CallBack();
 8000dcc:	4b02      	ldr	r3, [pc, #8]	; (8000dd8 <TIM2_IRQHandler+0x18>)
 8000dce:	695b      	ldr	r3, [r3, #20]
 8000dd0:	4798      	blx	r3


}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000128 	.word	0x20000128

08000ddc <TIM3_IRQHandler>:
void TIM3_IRQHandler()
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	TIM3->SR = 0x00 ;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <TIM3_IRQHandler+0x14>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
	Global_TIM_Config[1].P_IRQ_CallBack();
 8000de6:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <TIM3_IRQHandler+0x18>)
 8000de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dea:	4798      	blx	r3
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40000400 	.word	0x40000400
 8000df4:	20000128 	.word	0x20000128

08000df8 <TIM4_IRQHandler>:
void TIM4_IRQHandler()
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
	TIM4->SR = 0x00 ;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <TIM4_IRQHandler+0x14>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
	Global_TIM_Config[2].P_IRQ_CallBack();
 8000e02:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <TIM4_IRQHandler+0x18>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	4798      	blx	r3
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40000800 	.word	0x40000800
 8000e10:	20000128 	.word	0x20000128

08000e14 <USART1_IRQHandler>:
 * 							ISR Functions
 * =====================================================================================
 */

void USART1_IRQHandler (void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000e18:	4b02      	ldr	r3, [pc, #8]	; (8000e24 <USART1_IRQHandler+0x10>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	691b      	ldr	r3, [r3, #16]
 8000e1e:	4798      	blx	r3
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	200000b0 	.word	0x200000b0

08000e28 <USART2_IRQHandler>:
void USART2_IRQHandler (void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000e2c:	4b02      	ldr	r3, [pc, #8]	; (8000e38 <USART2_IRQHandler+0x10>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	4798      	blx	r3
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	200000b0 	.word	0x200000b0

08000e3c <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000e40:	4b02      	ldr	r3, [pc, #8]	; (8000e4c <USART3_IRQHandler+0x10>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	691b      	ldr	r3, [r3, #16]
 8000e46:	4798      	blx	r3
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	200000b0 	.word	0x200000b0

08000e50 <MCAL_WWDG_Init>:
 * 							Generic Functions
 * =======================================================================================
 */

WWDG_Error_status MCAL_WWDG_Init(WWDG_Config_t *WWDG_Config)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]

	SET_BIT(WWDG->CR,7);
 8000e58:	4b23      	ldr	r3, [pc, #140]	; (8000ee8 <MCAL_WWDG_Init+0x98>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a22      	ldr	r2, [pc, #136]	; (8000ee8 <MCAL_WWDG_Init+0x98>)
 8000e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e62:	6013      	str	r3, [r2, #0]

	WWDG->CR |=  WWDG_Config->Counter_Start_VAL ;
 8000e64:	4b20      	ldr	r3, [pc, #128]	; (8000ee8 <MCAL_WWDG_Init+0x98>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	8812      	ldrh	r2, [r2, #0]
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	4a1e      	ldr	r2, [pc, #120]	; (8000ee8 <MCAL_WWDG_Init+0x98>)
 8000e70:	430b      	orrs	r3, r1
 8000e72:	6013      	str	r3, [r2, #0]

	WWDG->CFR = 0 ;
 8000e74:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <MCAL_WWDG_Init+0x98>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	605a      	str	r2, [r3, #4]
	WWDG->CFR |=  WWDG_Config->Window_Value ;
 8000e7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <MCAL_WWDG_Init+0x98>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	8892      	ldrh	r2, [r2, #4]
 8000e82:	4611      	mov	r1, r2
 8000e84:	4a18      	ldr	r2, [pc, #96]	; (8000ee8 <MCAL_WWDG_Init+0x98>)
 8000e86:	430b      	orrs	r3, r1
 8000e88:	6053      	str	r3, [r2, #4]


	WWDG->CFR |= WWDG_Config->Prescaler ; //Prescaler
 8000e8a:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <MCAL_WWDG_Init+0x98>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	8852      	ldrh	r2, [r2, #2]
 8000e92:	4611      	mov	r1, r2
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <MCAL_WWDG_Init+0x98>)
 8000e96:	430b      	orrs	r3, r1
 8000e98:	6053      	str	r3, [r2, #4]



	G_Config = *WWDG_Config ;
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <MCAL_WWDG_Init+0x9c>)
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ea0:	e883 0007 	stmia.w	r3, {r0, r1, r2}



	if (WWDG_Config->EWI_IRQ_Enable == WWDG_EWI_IRQ_Enable)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	88db      	ldrh	r3, [r3, #6]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d10c      	bne.n	8000ec6 <MCAL_WWDG_Init+0x76>
	{
		NVIC_IRQ0_WWDG_Enable();
 8000eac:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <MCAL_WWDG_Init+0xa0>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0f      	ldr	r2, [pc, #60]	; (8000ef0 <MCAL_WWDG_Init+0xa0>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	6013      	str	r3, [r2, #0]
		SET_BIT(WWDG->CFR,9);
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <MCAL_WWDG_Init+0x98>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <MCAL_WWDG_Init+0x98>)
 8000ebe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec2:	6053      	str	r3, [r2, #4]
 8000ec4:	e009      	b.n	8000eda <MCAL_WWDG_Init+0x8a>
	}
	else if (WWDG_Config->EWI_IRQ_Enable == WWDG_EWI_IRQ_None)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	88db      	ldrh	r3, [r3, #6]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d105      	bne.n	8000eda <MCAL_WWDG_Init+0x8a>
	{
		NVIC_IRQ0_WWDG_Disable();
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <MCAL_WWDG_Init+0xa4>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a08      	ldr	r2, [pc, #32]	; (8000ef4 <MCAL_WWDG_Init+0xa4>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6013      	str	r3, [r2, #0]





	return WWDG_OK ;
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	40002c00 	.word	0x40002c00
 8000eec:	20000170 	.word	0x20000170
 8000ef0:	e000e100 	.word	0xe000e100
 8000ef4:	e000e180 	.word	0xe000e180

08000ef8 <MCAL_WWDG_Start>:


WWDG_Error_status MCAL_WWDG_Start(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
	//	This bit is set by software and only cleared by hardware after a reset. When WDGA = 1, the
	//	watchdog can generate a reset.
	//	0: Watchdog disabled
	//	1: Watchdog enabled

	SET_BIT(WWDG->CR,7);
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <MCAL_WWDG_Start+0x1c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <MCAL_WWDG_Start+0x1c>)
 8000f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f06:	6013      	str	r3, [r2, #0]


	return WWDG_OK ;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	40002c00 	.word	0x40002c00

08000f18 <MCAL_WWDG_Kick>:


WWDG_Error_status MCAL_WWDG_Kick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
	WWDG->CR |=  G_Config.Counter_Start_VAL ;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MCAL_WWDG_Kick+0x20>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a06      	ldr	r2, [pc, #24]	; (8000f3c <MCAL_WWDG_Kick+0x24>)
 8000f22:	8812      	ldrh	r2, [r2, #0]
 8000f24:	4611      	mov	r1, r2
 8000f26:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <MCAL_WWDG_Kick+0x20>)
 8000f28:	430b      	orrs	r3, r1
 8000f2a:	6013      	str	r3, [r2, #0]

	return WWDG_OK ;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	40002c00 	.word	0x40002c00
 8000f3c:	20000170 	.word	0x20000170

08000f40 <WWDG_IRQHandler>:



void WWDG_IRQHandler ()
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	CLR_BIT(WWDG->SR,0);
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <WWDG_IRQHandler+0x1c>)
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <WWDG_IRQHandler+0x1c>)
 8000f4a:	f023 0301 	bic.w	r3, r3, #1
 8000f4e:	6093      	str	r3, [r2, #8]
	G_Config.P_IRQ_CallBack();
 8000f50:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <WWDG_IRQHandler+0x20>)
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	4798      	blx	r3

}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40002c00 	.word	0x40002c00
 8000f60:	20000170 	.word	0x20000170

08000f64 <__libc_init_array>:
 8000f64:	b570      	push	{r4, r5, r6, lr}
 8000f66:	2500      	movs	r5, #0
 8000f68:	4e0c      	ldr	r6, [pc, #48]	; (8000f9c <__libc_init_array+0x38>)
 8000f6a:	4c0d      	ldr	r4, [pc, #52]	; (8000fa0 <__libc_init_array+0x3c>)
 8000f6c:	1ba4      	subs	r4, r4, r6
 8000f6e:	10a4      	asrs	r4, r4, #2
 8000f70:	42a5      	cmp	r5, r4
 8000f72:	d109      	bne.n	8000f88 <__libc_init_array+0x24>
 8000f74:	f000 f81a 	bl	8000fac <_init>
 8000f78:	2500      	movs	r5, #0
 8000f7a:	4e0a      	ldr	r6, [pc, #40]	; (8000fa4 <__libc_init_array+0x40>)
 8000f7c:	4c0a      	ldr	r4, [pc, #40]	; (8000fa8 <__libc_init_array+0x44>)
 8000f7e:	1ba4      	subs	r4, r4, r6
 8000f80:	10a4      	asrs	r4, r4, #2
 8000f82:	42a5      	cmp	r5, r4
 8000f84:	d105      	bne.n	8000f92 <__libc_init_array+0x2e>
 8000f86:	bd70      	pop	{r4, r5, r6, pc}
 8000f88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f8c:	4798      	blx	r3
 8000f8e:	3501      	adds	r5, #1
 8000f90:	e7ee      	b.n	8000f70 <__libc_init_array+0xc>
 8000f92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f96:	4798      	blx	r3
 8000f98:	3501      	adds	r5, #1
 8000f9a:	e7f2      	b.n	8000f82 <__libc_init_array+0x1e>
 8000f9c:	08000fc4 	.word	0x08000fc4
 8000fa0:	08000fc4 	.word	0x08000fc4
 8000fa4:	08000fc4 	.word	0x08000fc4
 8000fa8:	08000fc8 	.word	0x08000fc8

08000fac <_init>:
 8000fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fae:	bf00      	nop
 8000fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fb2:	bc08      	pop	{r3}
 8000fb4:	469e      	mov	lr, r3
 8000fb6:	4770      	bx	lr

08000fb8 <_fini>:
 8000fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fba:	bf00      	nop
 8000fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fbe:	bc08      	pop	{r3}
 8000fc0:	469e      	mov	lr, r3
 8000fc2:	4770      	bx	lr
