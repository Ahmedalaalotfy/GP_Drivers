
GP_STM32_Drivers.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f38  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001068  08001068  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001068  08001068  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001068  08001068  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001068  08001068  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001068  08001068  00011068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800106c  0800106c  0001106c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001070  00020000  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000004  08001074  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08001074  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000073a6  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001351  00000000  00000000  000273d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000340  00000000  00000000  00028728  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002a8  00000000  00000000  00028a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004bb2  00000000  00000000  00028d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004b85  00000000  00000000  0002d8c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00012bec  00000000  00000000  00032447  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00045033  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000abc  00000000  00000000  000450b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08001050 	.word	0x08001050

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08001050 	.word	0x08001050

08000170 <clock_init>:
#include "Delay.h"



void clock_init(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

	//Enable clock to AFIO
	AFIO_GPIO_CLK_EN();
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <clock_init+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <clock_init+0x30>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6193      	str	r3, [r2, #24]
	//Enable clock to port A
	RCC_GPIOA_CLK_EN();
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <clock_init+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <clock_init+0x30>)
 8000186:	f043 0304 	orr.w	r3, r3, #4
 800018a:	6193      	str	r3, [r2, #24]
	//Enable clock to port B
	RCC_GPIOB_CLK_EN();
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <clock_init+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <clock_init+0x30>)
 8000192:	f043 0308 	orr.w	r3, r3, #8
 8000196:	6193      	str	r3, [r2, #24]



}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <main>:


int main(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b084      	sub	sp, #16
 80001a8:	af00      	add	r7, sp, #0



	clock_init();
 80001aa:	f7ff ffe1 	bl	8000170 <clock_init>
	HAL_Delay_Init();
 80001ae:	f000 f841 	bl	8000234 <HAL_Delay_Init>

	WWDG_Config_t WWDG_Config ;

	WWDG_Config.Prescaler = WWDG_Counter_div_2;
 80001b2:	2380      	movs	r3, #128	; 0x80
 80001b4:	80fb      	strh	r3, [r7, #6]
	WWDG_Config.Counter_Start_VAL = 83 ;
 80001b6:	2353      	movs	r3, #83	; 0x53
 80001b8:	80bb      	strh	r3, [r7, #4]
	WWDG_Config.Window_Value = 80 ;
 80001ba:	2350      	movs	r3, #80	; 0x50
 80001bc:	813b      	strh	r3, [r7, #8]
	WWDG_Config.EWI_IRQ_Enable = WWDG_EWI_IRQ_None ;
 80001be:	2300      	movs	r3, #0
 80001c0:	817b      	strh	r3, [r7, #10]
	WWDG_Config.P_IRQ_CallBack = NULL ;
 80001c2:	2300      	movs	r3, #0
 80001c4:	60fb      	str	r3, [r7, #12]

    MCAL_WWDG_Init(&WWDG_Config);
 80001c6:	1d3b      	adds	r3, r7, #4
 80001c8:	4618      	mov	r0, r3
 80001ca:	f000 fe87 	bl	8000edc <MCAL_WWDG_Init>


	while (1)
	{

		MCAL_WWDG_Start();
 80001ce:	f000 fee5 	bl	8000f9c <MCAL_WWDG_Start>

        Delay_ms(10);
 80001d2:	200a      	movs	r0, #10
 80001d4:	f000 f879 	bl	80002ca <Delay_ms>

		MCAL_WWDG_Kick();
 80001d8:	f000 fef0 	bl	8000fbc <MCAL_WWDG_Kick>
		MCAL_WWDG_Start();
 80001dc:	e7f7      	b.n	80001ce <main+0x2a>
	...

080001e0 <Reset_Handler>:
 80001e0:	480d      	ldr	r0, [pc, #52]	; (8000218 <LoopForever+0x2>)
 80001e2:	4685      	mov	sp, r0
 80001e4:	f3af 8000 	nop.w
 80001e8:	480c      	ldr	r0, [pc, #48]	; (800021c <LoopForever+0x6>)
 80001ea:	490d      	ldr	r1, [pc, #52]	; (8000220 <LoopForever+0xa>)
 80001ec:	4a0d      	ldr	r2, [pc, #52]	; (8000224 <LoopForever+0xe>)
 80001ee:	2300      	movs	r3, #0
 80001f0:	e002      	b.n	80001f8 <LoopCopyDataInit>

080001f2 <CopyDataInit>:
 80001f2:	58d4      	ldr	r4, [r2, r3]
 80001f4:	50c4      	str	r4, [r0, r3]
 80001f6:	3304      	adds	r3, #4

080001f8 <LoopCopyDataInit>:
 80001f8:	18c4      	adds	r4, r0, r3
 80001fa:	428c      	cmp	r4, r1
 80001fc:	d3f9      	bcc.n	80001f2 <CopyDataInit>
 80001fe:	4a0a      	ldr	r2, [pc, #40]	; (8000228 <LoopForever+0x12>)
 8000200:	4c0a      	ldr	r4, [pc, #40]	; (800022c <LoopForever+0x16>)
 8000202:	2300      	movs	r3, #0
 8000204:	e001      	b.n	800020a <LoopFillZerobss>

08000206 <FillZerobss>:
 8000206:	6013      	str	r3, [r2, #0]
 8000208:	3204      	adds	r2, #4

0800020a <LoopFillZerobss>:
 800020a:	42a2      	cmp	r2, r4
 800020c:	d3fb      	bcc.n	8000206 <FillZerobss>
 800020e:	f000 fefb 	bl	8001008 <__libc_init_array>
 8000212:	f7ff ffc7 	bl	80001a4 <main>

08000216 <LoopForever>:
 8000216:	e7fe      	b.n	8000216 <LoopForever>
 8000218:	20005000 	.word	0x20005000
 800021c:	20000000 	.word	0x20000000
 8000220:	20000004 	.word	0x20000004
 8000224:	08001070 	.word	0x08001070
 8000228:	20000004 	.word	0x20000004
 800022c:	2000017c 	.word	0x2000017c

08000230 <ADC3_IRQHandler>:
 8000230:	e7fe      	b.n	8000230 <ADC3_IRQHandler>
	...

08000234 <HAL_Delay_Init>:
 * @param [in]   -TIMx :  were x can be (1,2,3,4 depending on device used)to select the Timer Peripheral
 * @retval		 -none
 * Note			 -none
 */
void HAL_Delay_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	Delay_timer_config.TIM_Mode =  TIM_Mode_Counter;
 8000238:	4b0e      	ldr	r3, [pc, #56]	; (8000274 <HAL_Delay_Init+0x40>)
 800023a:	2201      	movs	r2, #1
 800023c:	801a      	strh	r2, [r3, #0]
	Delay_timer_config.Counter.Count_Direction =Count_Direction_UP;
 800023e:	4b0d      	ldr	r3, [pc, #52]	; (8000274 <HAL_Delay_Init+0x40>)
 8000240:	2200      	movs	r2, #0
 8000242:	721a      	strb	r2, [r3, #8]
	Delay_timer_config.Prescaler = 8 ;
 8000244:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <HAL_Delay_Init+0x40>)
 8000246:	2208      	movs	r2, #8
 8000248:	805a      	strh	r2, [r3, #2]
	Delay_timer_config.Auto_Reload_Value = 0xFFFF ;
 800024a:	4b0a      	ldr	r3, [pc, #40]	; (8000274 <HAL_Delay_Init+0x40>)
 800024c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000250:	80da      	strh	r2, [r3, #6]
	Delay_timer_config.IRQ_Enable = TIM_IRQ_MODE_None  ;
 8000252:	4b08      	ldr	r3, [pc, #32]	; (8000274 <HAL_Delay_Init+0x40>)
 8000254:	2200      	movs	r2, #0
 8000256:	821a      	strh	r2, [r3, #16]
	Delay_timer_config.P_IRQ_CallBack = NULL ;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <HAL_Delay_Init+0x40>)
 800025a:	2200      	movs	r2, #0
 800025c:	615a      	str	r2, [r3, #20]

	MCAL_TIM_Init(DELAY_Timer,&Delay_timer_config);
 800025e:	4905      	ldr	r1, [pc, #20]	; (8000274 <HAL_Delay_Init+0x40>)
 8000260:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000264:	f000 fac4 	bl	80007f0 <MCAL_TIM_Init>
	MCAL_TIM_Count_Reset(DELAY_Timer);
 8000268:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800026c:	f000 fddc 	bl	8000e28 <MCAL_TIM_Count_Reset>
}
 8000270:	bf00      	nop
 8000272:	bd80      	pop	{r7, pc}
 8000274:	200000b4 	.word	0x200000b4

08000278 <Delay_us>:




void Delay_us(uint16_t Num)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	4603      	mov	r3, r0
 8000280:	80fb      	strh	r3, [r7, #6]

	DELAY_Timer->ARR = Num;
 8000282:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000286:	88fb      	ldrh	r3, [r7, #6]
 8000288:	62d3      	str	r3, [r2, #44]	; 0x2c
	MCAL_TIM_Count_Reset(DELAY_Timer);
 800028a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800028e:	f000 fdcb 	bl	8000e28 <MCAL_TIM_Count_Reset>
	MCAL_TIM_Start(DELAY_Timer);
 8000292:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000296:	f000 fd9d 	bl	8000dd4 <MCAL_TIM_Start>
UDIS=0 in the TIMx_CR1 register.
– When CNT is reinitialized by a trigger event (refer to the synchro control register description),
if URS=0 and UDIS=0 in the TIMx_CR1 register.
	*/

	while(GET_BIT(DELAY_Timer->SR,0) == 0);
 800029a:	bf00      	nop
 800029c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002a0:	691b      	ldr	r3, [r3, #16]
 80002a2:	f003 0301 	and.w	r3, r3, #1
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d0f8      	beq.n	800029c <Delay_us+0x24>
	MCAL_TIM_Stop(DELAY_Timer);
 80002aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002ae:	f000 fda6 	bl	8000dfe <MCAL_TIM_Stop>
	CLR_BIT(DELAY_Timer->SR,0);
 80002b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002b6:	691b      	ldr	r3, [r3, #16]
 80002b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002bc:	f023 0301 	bic.w	r3, r3, #1
 80002c0:	6113      	str	r3, [r2, #16]


}
 80002c2:	bf00      	nop
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}

080002ca <Delay_ms>:


void Delay_ms(uint16_t Num)
{
 80002ca:	b580      	push	{r7, lr}
 80002cc:	b084      	sub	sp, #16
 80002ce:	af00      	add	r7, sp, #0
 80002d0:	4603      	mov	r3, r0
 80002d2:	80fb      	strh	r3, [r7, #6]
	int i;

	for(i =0 ;i< Num;i++)
 80002d4:	2300      	movs	r3, #0
 80002d6:	60fb      	str	r3, [r7, #12]
 80002d8:	e006      	b.n	80002e8 <Delay_ms+0x1e>
	{
		Delay_us(1000);
 80002da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002de:	f7ff ffcb 	bl	8000278 <Delay_us>
	for(i =0 ;i< Num;i++)
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	3301      	adds	r3, #1
 80002e6:	60fb      	str	r3, [r7, #12]
 80002e8:	88fb      	ldrh	r3, [r7, #6]
 80002ea:	68fa      	ldr	r2, [r7, #12]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	dbf4      	blt.n	80002da <Delay_ms+0x10>
	}

}
 80002f0:	bf00      	nop
 80002f2:	3710      	adds	r7, #16
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <ADC1_2_IRQHandler>:
 * 						ISR
 * ===============================================
 */

void ADC1_2_IRQHandler(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	/* ADC global interrupt */
	Data_for_IRQ = ADC1->DR ;
 80002fc:	4b08      	ldr	r3, [pc, #32]	; (8000320 <ADC1_2_IRQHandler+0x28>)
 80002fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000300:	b29a      	uxth	r2, r3
 8000302:	4b08      	ldr	r3, [pc, #32]	; (8000324 <ADC1_2_IRQHandler+0x2c>)
 8000304:	801a      	strh	r2, [r3, #0]
	Global_ADC_Cfg.channels[Rank-1].Channel_IRQ_callback(Data_for_IRQ);
 8000306:	4b08      	ldr	r3, [pc, #32]	; (8000328 <ADC1_2_IRQHandler+0x30>)
 8000308:	881b      	ldrh	r3, [r3, #0]
 800030a:	3b01      	subs	r3, #1
 800030c:	4a07      	ldr	r2, [pc, #28]	; (800032c <ADC1_2_IRQHandler+0x34>)
 800030e:	00db      	lsls	r3, r3, #3
 8000310:	4413      	add	r3, r2
 8000312:	689b      	ldr	r3, [r3, #8]
 8000314:	4a03      	ldr	r2, [pc, #12]	; (8000324 <ADC1_2_IRQHandler+0x2c>)
 8000316:	8812      	ldrh	r2, [r2, #0]
 8000318:	4610      	mov	r0, r2
 800031a:	4798      	blx	r3
}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}
 8000320:	40012400 	.word	0x40012400
 8000324:	20000020 	.word	0x20000020
 8000328:	20000000 	.word	0x20000000
 800032c:	200000cc 	.word	0x200000cc

08000330 <EXTI0_IRQHandler>:
 * =====================================================================================
 */


void EXTI0_IRQHandler(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	// cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= 1<<0;
 8000334:	4b05      	ldr	r3, [pc, #20]	; (800034c <EXTI0_IRQHandler+0x1c>)
 8000336:	695b      	ldr	r3, [r3, #20]
 8000338:	4a04      	ldr	r2, [pc, #16]	; (800034c <EXTI0_IRQHandler+0x1c>)
 800033a:	f043 0301 	orr.w	r3, r3, #1
 800033e:	6153      	str	r3, [r2, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[0]();
 8000340:	4b03      	ldr	r3, [pc, #12]	; (8000350 <EXTI0_IRQHandler+0x20>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4798      	blx	r3
}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40010400 	.word	0x40010400
 8000350:	20000024 	.word	0x20000024

08000354 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 8000358:	4b05      	ldr	r3, [pc, #20]	; (8000370 <EXTI1_IRQHandler+0x1c>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	4a04      	ldr	r2, [pc, #16]	; (8000370 <EXTI1_IRQHandler+0x1c>)
 800035e:	f043 0302 	orr.w	r3, r3, #2
 8000362:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 8000364:	4b03      	ldr	r3, [pc, #12]	; (8000374 <EXTI1_IRQHandler+0x20>)
 8000366:	685b      	ldr	r3, [r3, #4]
 8000368:	4798      	blx	r3
}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40010400 	.word	0x40010400
 8000374:	20000024 	.word	0x20000024

08000378 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 800037c:	4b05      	ldr	r3, [pc, #20]	; (8000394 <EXTI2_IRQHandler+0x1c>)
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	4a04      	ldr	r2, [pc, #16]	; (8000394 <EXTI2_IRQHandler+0x1c>)
 8000382:	f043 0304 	orr.w	r3, r3, #4
 8000386:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 8000388:	4b03      	ldr	r3, [pc, #12]	; (8000398 <EXTI2_IRQHandler+0x20>)
 800038a:	689b      	ldr	r3, [r3, #8]
 800038c:	4798      	blx	r3
}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40010400 	.word	0x40010400
 8000398:	20000024 	.word	0x20000024

0800039c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 80003a0:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <EXTI3_IRQHandler+0x1c>)
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	4a04      	ldr	r2, [pc, #16]	; (80003b8 <EXTI3_IRQHandler+0x1c>)
 80003a6:	f043 0308 	orr.w	r3, r3, #8
 80003aa:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 80003ac:	4b03      	ldr	r3, [pc, #12]	; (80003bc <EXTI3_IRQHandler+0x20>)
 80003ae:	68db      	ldr	r3, [r3, #12]
 80003b0:	4798      	blx	r3
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40010400 	.word	0x40010400
 80003bc:	20000024 	.word	0x20000024

080003c0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 80003c4:	4b05      	ldr	r3, [pc, #20]	; (80003dc <EXTI4_IRQHandler+0x1c>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	4a04      	ldr	r2, [pc, #16]	; (80003dc <EXTI4_IRQHandler+0x1c>)
 80003ca:	f043 0310 	orr.w	r3, r3, #16
 80003ce:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 80003d0:	4b03      	ldr	r3, [pc, #12]	; (80003e0 <EXTI4_IRQHandler+0x20>)
 80003d2:	691b      	ldr	r3, [r3, #16]
 80003d4:	4798      	blx	r3
}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40010400 	.word	0x40010400
 80003e0:	20000024 	.word	0x20000024

080003e4 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<5 ) { EXTI->PR |= 1<<5; GP_IRQ_CallBack[5](); }
 80003e8:	4b26      	ldr	r3, [pc, #152]	; (8000484 <EXTI9_5_IRQHandler+0xa0>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	f003 0320 	and.w	r3, r3, #32
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d008      	beq.n	8000406 <EXTI9_5_IRQHandler+0x22>
 80003f4:	4b23      	ldr	r3, [pc, #140]	; (8000484 <EXTI9_5_IRQHandler+0xa0>)
 80003f6:	695b      	ldr	r3, [r3, #20]
 80003f8:	4a22      	ldr	r2, [pc, #136]	; (8000484 <EXTI9_5_IRQHandler+0xa0>)
 80003fa:	f043 0320 	orr.w	r3, r3, #32
 80003fe:	6153      	str	r3, [r2, #20]
 8000400:	4b21      	ldr	r3, [pc, #132]	; (8000488 <EXTI9_5_IRQHandler+0xa4>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	4798      	blx	r3
	if( EXTI->PR & 1<<6 ) { EXTI->PR |= 1<<6; GP_IRQ_CallBack[6](); }
 8000406:	4b1f      	ldr	r3, [pc, #124]	; (8000484 <EXTI9_5_IRQHandler+0xa0>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800040e:	2b00      	cmp	r3, #0
 8000410:	d008      	beq.n	8000424 <EXTI9_5_IRQHandler+0x40>
 8000412:	4b1c      	ldr	r3, [pc, #112]	; (8000484 <EXTI9_5_IRQHandler+0xa0>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	4a1b      	ldr	r2, [pc, #108]	; (8000484 <EXTI9_5_IRQHandler+0xa0>)
 8000418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800041c:	6153      	str	r3, [r2, #20]
 800041e:	4b1a      	ldr	r3, [pc, #104]	; (8000488 <EXTI9_5_IRQHandler+0xa4>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	4798      	blx	r3
	if( EXTI->PR & 1<<7 ) { EXTI->PR |= 1<<7; GP_IRQ_CallBack[7](); }
 8000424:	4b17      	ldr	r3, [pc, #92]	; (8000484 <EXTI9_5_IRQHandler+0xa0>)
 8000426:	695b      	ldr	r3, [r3, #20]
 8000428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800042c:	2b00      	cmp	r3, #0
 800042e:	d008      	beq.n	8000442 <EXTI9_5_IRQHandler+0x5e>
 8000430:	4b14      	ldr	r3, [pc, #80]	; (8000484 <EXTI9_5_IRQHandler+0xa0>)
 8000432:	695b      	ldr	r3, [r3, #20]
 8000434:	4a13      	ldr	r2, [pc, #76]	; (8000484 <EXTI9_5_IRQHandler+0xa0>)
 8000436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800043a:	6153      	str	r3, [r2, #20]
 800043c:	4b12      	ldr	r3, [pc, #72]	; (8000488 <EXTI9_5_IRQHandler+0xa4>)
 800043e:	69db      	ldr	r3, [r3, #28]
 8000440:	4798      	blx	r3
	if( EXTI->PR & 1<<8 ) { EXTI->PR |= 1<<8; GP_IRQ_CallBack[8](); }
 8000442:	4b10      	ldr	r3, [pc, #64]	; (8000484 <EXTI9_5_IRQHandler+0xa0>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800044a:	2b00      	cmp	r3, #0
 800044c:	d008      	beq.n	8000460 <EXTI9_5_IRQHandler+0x7c>
 800044e:	4b0d      	ldr	r3, [pc, #52]	; (8000484 <EXTI9_5_IRQHandler+0xa0>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	4a0c      	ldr	r2, [pc, #48]	; (8000484 <EXTI9_5_IRQHandler+0xa0>)
 8000454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000458:	6153      	str	r3, [r2, #20]
 800045a:	4b0b      	ldr	r3, [pc, #44]	; (8000488 <EXTI9_5_IRQHandler+0xa4>)
 800045c:	6a1b      	ldr	r3, [r3, #32]
 800045e:	4798      	blx	r3
	if( EXTI->PR & 1<<9 ) { EXTI->PR |= 1<<9; GP_IRQ_CallBack[9](); }
 8000460:	4b08      	ldr	r3, [pc, #32]	; (8000484 <EXTI9_5_IRQHandler+0xa0>)
 8000462:	695b      	ldr	r3, [r3, #20]
 8000464:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000468:	2b00      	cmp	r3, #0
 800046a:	d008      	beq.n	800047e <EXTI9_5_IRQHandler+0x9a>
 800046c:	4b05      	ldr	r3, [pc, #20]	; (8000484 <EXTI9_5_IRQHandler+0xa0>)
 800046e:	695b      	ldr	r3, [r3, #20]
 8000470:	4a04      	ldr	r2, [pc, #16]	; (8000484 <EXTI9_5_IRQHandler+0xa0>)
 8000472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000476:	6153      	str	r3, [r2, #20]
 8000478:	4b03      	ldr	r3, [pc, #12]	; (8000488 <EXTI9_5_IRQHandler+0xa4>)
 800047a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800047c:	4798      	blx	r3
}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	40010400 	.word	0x40010400
 8000488:	20000024 	.word	0x20000024

0800048c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<10 ) { EXTI->PR |= 1<<10; GP_IRQ_CallBack[10](); }
 8000490:	4b2d      	ldr	r3, [pc, #180]	; (8000548 <EXTI15_10_IRQHandler+0xbc>)
 8000492:	695b      	ldr	r3, [r3, #20]
 8000494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000498:	2b00      	cmp	r3, #0
 800049a:	d008      	beq.n	80004ae <EXTI15_10_IRQHandler+0x22>
 800049c:	4b2a      	ldr	r3, [pc, #168]	; (8000548 <EXTI15_10_IRQHandler+0xbc>)
 800049e:	695b      	ldr	r3, [r3, #20]
 80004a0:	4a29      	ldr	r2, [pc, #164]	; (8000548 <EXTI15_10_IRQHandler+0xbc>)
 80004a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004a6:	6153      	str	r3, [r2, #20]
 80004a8:	4b28      	ldr	r3, [pc, #160]	; (800054c <EXTI15_10_IRQHandler+0xc0>)
 80004aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004ac:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= 1<<11; GP_IRQ_CallBack[11](); }
 80004ae:	4b26      	ldr	r3, [pc, #152]	; (8000548 <EXTI15_10_IRQHandler+0xbc>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d008      	beq.n	80004cc <EXTI15_10_IRQHandler+0x40>
 80004ba:	4b23      	ldr	r3, [pc, #140]	; (8000548 <EXTI15_10_IRQHandler+0xbc>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	4a22      	ldr	r2, [pc, #136]	; (8000548 <EXTI15_10_IRQHandler+0xbc>)
 80004c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004c4:	6153      	str	r3, [r2, #20]
 80004c6:	4b21      	ldr	r3, [pc, #132]	; (800054c <EXTI15_10_IRQHandler+0xc0>)
 80004c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ca:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= 1<<12; GP_IRQ_CallBack[12](); }
 80004cc:	4b1e      	ldr	r3, [pc, #120]	; (8000548 <EXTI15_10_IRQHandler+0xbc>)
 80004ce:	695b      	ldr	r3, [r3, #20]
 80004d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d008      	beq.n	80004ea <EXTI15_10_IRQHandler+0x5e>
 80004d8:	4b1b      	ldr	r3, [pc, #108]	; (8000548 <EXTI15_10_IRQHandler+0xbc>)
 80004da:	695b      	ldr	r3, [r3, #20]
 80004dc:	4a1a      	ldr	r2, [pc, #104]	; (8000548 <EXTI15_10_IRQHandler+0xbc>)
 80004de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004e2:	6153      	str	r3, [r2, #20]
 80004e4:	4b19      	ldr	r3, [pc, #100]	; (800054c <EXTI15_10_IRQHandler+0xc0>)
 80004e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e8:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= 1<<13; GP_IRQ_CallBack[13](); }
 80004ea:	4b17      	ldr	r3, [pc, #92]	; (8000548 <EXTI15_10_IRQHandler+0xbc>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d008      	beq.n	8000508 <EXTI15_10_IRQHandler+0x7c>
 80004f6:	4b14      	ldr	r3, [pc, #80]	; (8000548 <EXTI15_10_IRQHandler+0xbc>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	4a13      	ldr	r2, [pc, #76]	; (8000548 <EXTI15_10_IRQHandler+0xbc>)
 80004fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000500:	6153      	str	r3, [r2, #20]
 8000502:	4b12      	ldr	r3, [pc, #72]	; (800054c <EXTI15_10_IRQHandler+0xc0>)
 8000504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000506:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<14; GP_IRQ_CallBack[14](); }
 8000508:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <EXTI15_10_IRQHandler+0xbc>)
 800050a:	695b      	ldr	r3, [r3, #20]
 800050c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000510:	2b00      	cmp	r3, #0
 8000512:	d008      	beq.n	8000526 <EXTI15_10_IRQHandler+0x9a>
 8000514:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <EXTI15_10_IRQHandler+0xbc>)
 8000516:	695b      	ldr	r3, [r3, #20]
 8000518:	4a0b      	ldr	r2, [pc, #44]	; (8000548 <EXTI15_10_IRQHandler+0xbc>)
 800051a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800051e:	6153      	str	r3, [r2, #20]
 8000520:	4b0a      	ldr	r3, [pc, #40]	; (800054c <EXTI15_10_IRQHandler+0xc0>)
 8000522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000524:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<15; GP_IRQ_CallBack[15](); }
 8000526:	4b08      	ldr	r3, [pc, #32]	; (8000548 <EXTI15_10_IRQHandler+0xbc>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800052e:	2b00      	cmp	r3, #0
 8000530:	d008      	beq.n	8000544 <EXTI15_10_IRQHandler+0xb8>
 8000532:	4b05      	ldr	r3, [pc, #20]	; (8000548 <EXTI15_10_IRQHandler+0xbc>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	4a04      	ldr	r2, [pc, #16]	; (8000548 <EXTI15_10_IRQHandler+0xbc>)
 8000538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800053c:	6153      	str	r3, [r2, #20]
 800053e:	4b03      	ldr	r3, [pc, #12]	; (800054c <EXTI15_10_IRQHandler+0xc0>)
 8000540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000542:	4798      	blx	r3
}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40010400 	.word	0x40010400
 800054c:	20000024 	.word	0x20000024

08000550 <Slave_States>:
	/*Send The Address*/
	I2Cx->DR = Address ;
}

void Slave_States(I2C_TypeDef *I2Cx,Slave_State State)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	460b      	mov	r3, r1
 800055a:	70fb      	strb	r3, [r7, #3]
	uint8_t index = (I2Cx == I2C1) ? I2C1_INDEX : I2C2_INDEX ;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4a32      	ldr	r2, [pc, #200]	; (8000628 <Slave_States+0xd8>)
 8000560:	4293      	cmp	r3, r2
 8000562:	bf14      	ite	ne
 8000564:	2301      	movne	r3, #1
 8000566:	2300      	moveq	r3, #0
 8000568:	b2db      	uxtb	r3, r3
 800056a:	73fb      	strb	r3, [r7, #15]

	switch(State)
 800056c:	78fb      	ldrb	r3, [r7, #3]
 800056e:	2b04      	cmp	r3, #4
 8000570:	d856      	bhi.n	8000620 <Slave_States+0xd0>
 8000572:	a201      	add	r2, pc, #4	; (adr r2, 8000578 <Slave_States+0x28>)
 8000574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000578:	08000593 	.word	0x08000593
 800057c:	0800058d 	.word	0x0800058d
 8000580:	080005b7 	.word	0x080005b7
 8000584:	080005cf 	.word	0x080005cf
 8000588:	080005f3 	.word	0x080005f3
	{
	case I2C_ERROR_AF:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	699b      	ldr	r3, [r3, #24]
		{
			//Slave shouldn't send anything else
		}
		break;
 8000590:	e046      	b.n	8000620 <Slave_States+0xd0>

	case I2C_EV_STOP:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	699b      	ldr	r3, [r3, #24]
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	2b00      	cmp	r3, #0
 800059c:	d03b      	beq.n	8000616 <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is Sent by the master
			Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_STOP);
 800059e:	7bfa      	ldrb	r2, [r7, #15]
 80005a0:	4922      	ldr	r1, [pc, #136]	; (800062c <Slave_States+0xdc>)
 80005a2:	4613      	mov	r3, r2
 80005a4:	00db      	lsls	r3, r3, #3
 80005a6:	4413      	add	r3, r2
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	440b      	add	r3, r1
 80005ac:	3320      	adds	r3, #32
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2000      	movs	r0, #0
 80005b2:	4798      	blx	r3
		}
		break;
 80005b4:	e02f      	b.n	8000616 <Slave_States+0xc6>

	case I2C_EV_ADDR_Matched:
		//Notify APP that The address is matched with The slave address
		Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_ADDR_Matched);
 80005b6:	7bfa      	ldrb	r2, [r7, #15]
 80005b8:	491c      	ldr	r1, [pc, #112]	; (800062c <Slave_States+0xdc>)
 80005ba:	4613      	mov	r3, r2
 80005bc:	00db      	lsls	r3, r3, #3
 80005be:	4413      	add	r3, r2
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	440b      	add	r3, r1
 80005c4:	3320      	adds	r3, #32
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2002      	movs	r0, #2
 80005ca:	4798      	blx	r3
		break;
 80005cc:	e028      	b.n	8000620 <Slave_States+0xd0>

	case I2C_EV_DATA_REQ:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	699b      	ldr	r3, [r3, #24]
 80005d2:	f003 0304 	and.w	r3, r3, #4
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d01f      	beq.n	800061a <Slave_States+0xca>
		{
			//The APP Layer should send the data (MCAL_I2C_SlaveSendData)in this state
			Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_DATA_REQ);
 80005da:	7bfa      	ldrb	r2, [r7, #15]
 80005dc:	4913      	ldr	r1, [pc, #76]	; (800062c <Slave_States+0xdc>)
 80005de:	4613      	mov	r3, r2
 80005e0:	00db      	lsls	r3, r3, #3
 80005e2:	4413      	add	r3, r2
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	440b      	add	r3, r1
 80005e8:	3320      	adds	r3, #32
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2003      	movs	r0, #3
 80005ee:	4798      	blx	r3
		}

		break;
 80005f0:	e013      	b.n	800061a <Slave_States+0xca>

	case I2C_EV_DATA_RCV:
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & (I2C_SR2_TRA)) )
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	f003 0304 	and.w	r3, r3, #4
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d10f      	bne.n	800061e <Slave_States+0xce>
		{
			//The APP Layer should read the data (MCAL_I2C_SlaveReceiveData)in this state
			Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_DATA_RCV);
 80005fe:	7bfa      	ldrb	r2, [r7, #15]
 8000600:	490a      	ldr	r1, [pc, #40]	; (800062c <Slave_States+0xdc>)
 8000602:	4613      	mov	r3, r2
 8000604:	00db      	lsls	r3, r3, #3
 8000606:	4413      	add	r3, r2
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	440b      	add	r3, r1
 800060c:	3320      	adds	r3, #32
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2004      	movs	r0, #4
 8000612:	4798      	blx	r3
		}

		break;
 8000614:	e003      	b.n	800061e <Slave_States+0xce>
		break;
 8000616:	bf00      	nop
 8000618:	e002      	b.n	8000620 <Slave_States+0xd0>
		break;
 800061a:	bf00      	nop
 800061c:	e000      	b.n	8000620 <Slave_States+0xd0>
		break;
 800061e:	bf00      	nop
	}
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40005400 	.word	0x40005400
 800062c:	20000060 	.word	0x20000060

08000630 <I2C1_EV_IRQHandler>:
 * 							ISR Functions
 * =====================================================================================
 */

void I2C1_EV_IRQHandler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
	volatile uint32_t dummyRead = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
	I2C_TypeDef* I2Cx =I2C1 ;
 800063a:	4b35      	ldr	r3, [pc, #212]	; (8000710 <I2C1_EV_IRQHandler+0xe0>)
 800063c:	617b      	str	r3, [r7, #20]
	//Interrupt Handler for both master and slave mode of a device
	uint32_t temp1, temp2, temp3;

	temp1 = I2Cx->CR2 & (I2C_CR2_ITEVTEN);
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	685b      	ldr	r3, [r3, #4]
 8000642:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000646:	613b      	str	r3, [r7, #16]
	temp2 = I2Cx->CR2 & (I2C_CR2_ITBUFEN);
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000650:	60fb      	str	r3, [r7, #12]

	temp3 = I2Cx->SR1 & (I2C_SR1_STOPF);
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	f003 0310 	and.w	r3, r3, #16
 800065a:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by STOPF event
	//Note : Stop detection flag is applicable only slave mode
	if(temp1 && temp3)
 800065c:	693b      	ldr	r3, [r7, #16]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d00c      	beq.n	800067c <I2C1_EV_IRQHandler+0x4c>
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d009      	beq.n	800067c <I2C1_EV_IRQHandler+0x4c>
	{
		// STOP Flag is Set
		// Clear the STOPF by reading SR1 register followed by writing to CR1 register
		dummyRead = I2Cx->SR1;
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	695b      	ldr	r3, [r3, #20]
 800066c:	607b      	str	r3, [r7, #4]
		I2Cx->CR1 = 0x0000;
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
		Slave_States(I2Cx,I2C_EV_STOP);
 8000674:	2100      	movs	r1, #0
 8000676:	6978      	ldr	r0, [r7, #20]
 8000678:	f7ff ff6a 	bl	8000550 <Slave_States>
	}

	/*---------------------------------------------------*/
	temp3 = I2Cx->SR1 & (I2C_SR1_ADDR);
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	f003 0302 	and.w	r3, r3, #2
 8000684:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by ADDR event
	//Note :When master mode : Address is sent
	//		When slave mode  : Address is matched with own address
	if(temp1 && temp3)
 8000686:	693b      	ldr	r3, [r7, #16]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d012      	beq.n	80006b2 <I2C1_EV_IRQHandler+0x82>
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d00f      	beq.n	80006b2 <I2C1_EV_IRQHandler+0x82>
	{
		// Interrupt is generated because of ADDR event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	2b00      	cmp	r3, #0
 800069c:	d109      	bne.n	80006b2 <I2C1_EV_IRQHandler+0x82>
		}
		else
		{
			//Slave mode
			//Clear the ADDR flag (Read SR1 , Read SR2)
			dummyRead = I2Cx->SR1;
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	607b      	str	r3, [r7, #4]
			dummyRead = I2Cx->SR2;
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	607b      	str	r3, [r7, #4]
			Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 80006aa:	2102      	movs	r1, #2
 80006ac:	6978      	ldr	r0, [r7, #20]
 80006ae:	f7ff ff4f 	bl	8000550 <Slave_States>
		}
	}

	/*---------------------------------------------------*/
	temp3 = I2Cx->SR1 & (I2C_SR1_TXE);
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ba:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by TXE event
	if(temp1 && temp3)
 80006bc:	693b      	ldr	r3, [r7, #16]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d00c      	beq.n	80006dc <I2C1_EV_IRQHandler+0xac>
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d009      	beq.n	80006dc <I2C1_EV_IRQHandler+0xac>
	{
		// Interrupt is generated because of TXE event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f003 0301 	and.w	r3, r3, #1
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d103      	bne.n	80006dc <I2C1_EV_IRQHandler+0xac>
			//Master mode
		}
		else
		{
			//Slave mode
			Slave_States(I2Cx,I2C_EV_DATA_REQ);
 80006d4:	2103      	movs	r1, #3
 80006d6:	6978      	ldr	r0, [r7, #20]
 80006d8:	f7ff ff3a 	bl	8000550 <Slave_States>
		}
	}
	/*---------------------------------------------------*/
	temp3 = I2Cx->SR1 & (I2C_SR1_RXNE);
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	695b      	ldr	r3, [r3, #20]
 80006e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006e4:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by RXNE event
	if(temp1 && temp3)
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d00c      	beq.n	8000706 <I2C1_EV_IRQHandler+0xd6>
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d009      	beq.n	8000706 <I2C1_EV_IRQHandler+0xd6>
	{
		// Interrupt is generated because of RXNE event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d103      	bne.n	8000706 <I2C1_EV_IRQHandler+0xd6>
			//Master mode
		}
		else
		{
			//Slave mode
			Slave_States(I2Cx,I2C_EV_DATA_RCV);
 80006fe:	2104      	movs	r1, #4
 8000700:	6978      	ldr	r0, [r7, #20]
 8000702:	f7ff ff25 	bl	8000550 <Slave_States>
		}
	}
}
 8000706:	bf00      	nop
 8000708:	3718      	adds	r7, #24
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40005400 	.word	0x40005400

08000714 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0

}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr

08000720 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
//			//Slave mode
//			Slave_States(I2Cx,I2C_EV_DATA_RCV);
//		}
//	}

}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr

0800072c <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0

}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <SPI1_IRQHandler>:
 * 							ISR Functions
 * =====================================================================================
 */

void SPI1_IRQHandler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;

	irq_src.TXE  = ( ( SPI1->SPI_SR  & (1<<1)) >> 1 ) ;
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <SPI1_IRQHandler+0x54>)
 8000740:	689b      	ldr	r3, [r3, #8]
 8000742:	085b      	lsrs	r3, r3, #1
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	b2da      	uxtb	r2, r3
 800074a:	793b      	ldrb	r3, [r7, #4]
 800074c:	f362 0300 	bfi	r3, r2, #0, #1
 8000750:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI1->SPI_SR  & (1<<0)) >> 0 ) ;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <SPI1_IRQHandler+0x54>)
 8000754:	689b      	ldr	r3, [r3, #8]
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	b2da      	uxtb	r2, r3
 800075c:	793b      	ldrb	r3, [r7, #4]
 800075e:	f362 0341 	bfi	r3, r2, #1, #1
 8000762:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI1->SPI_SR  & (1<<4)) >> 4 ) ;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <SPI1_IRQHandler+0x54>)
 8000766:	689b      	ldr	r3, [r3, #8]
 8000768:	091b      	lsrs	r3, r3, #4
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	b2da      	uxtb	r2, r3
 8000770:	793b      	ldrb	r3, [r7, #4]
 8000772:	f362 0382 	bfi	r3, r2, #2, #1
 8000776:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(irq_src);
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <SPI1_IRQHandler+0x58>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	7938      	ldrb	r0, [r7, #4]
 8000780:	4798      	blx	r3
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40013000 	.word	0x40013000
 8000790:	200000a8 	.word	0x200000a8

08000794 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;

	irq_src.TXE  = ( ( SPI1->SPI_SR  & (1<<1)) >> 1 ) ;
 800079a:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <SPI2_IRQHandler+0x54>)
 800079c:	689b      	ldr	r3, [r3, #8]
 800079e:	085b      	lsrs	r3, r3, #1
 80007a0:	f003 0301 	and.w	r3, r3, #1
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	793b      	ldrb	r3, [r7, #4]
 80007a8:	f362 0300 	bfi	r3, r2, #0, #1
 80007ac:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI1->SPI_SR  & (1<<0)) >> 0 ) ;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <SPI2_IRQHandler+0x54>)
 80007b0:	689b      	ldr	r3, [r3, #8]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	793b      	ldrb	r3, [r7, #4]
 80007ba:	f362 0341 	bfi	r3, r2, #1, #1
 80007be:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI1->SPI_SR  & (1<<4)) >> 4 ) ;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <SPI2_IRQHandler+0x54>)
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	091b      	lsrs	r3, r3, #4
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	793b      	ldrb	r3, [r7, #4]
 80007ce:	f362 0382 	bfi	r3, r2, #2, #1
 80007d2:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(irq_src);
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <SPI2_IRQHandler+0x58>)
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	7938      	ldrb	r0, [r7, #4]
 80007dc:	4798      	blx	r3
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40013000 	.word	0x40013000
 80007ec:	200000a8 	.word	0x200000a8

080007f0 <MCAL_TIM_Init>:
 * @retval		 -none
 * Note			 -none
 */

Error_status MCAL_TIM_Init(TIM_TypeDef *TIMx,TIM_Config_t *TIM_Config)
{
 80007f0:	b4b0      	push	{r4, r5, r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]


	//Clock & Configurations
	if (TIMx == TIM2)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000800:	d116      	bne.n	8000830 <MCAL_TIM_Init+0x40>
	{
		RCC_TIM2_CLK_EN();
 8000802:	4b91      	ldr	r3, [pc, #580]	; (8000a48 <MCAL_TIM_Init+0x258>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	4a90      	ldr	r2, [pc, #576]	; (8000a48 <MCAL_TIM_Init+0x258>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	61d3      	str	r3, [r2, #28]
		Global_TIM_Config[0] = *TIM_Config ;
 800080e:	4a8f      	ldr	r2, [pc, #572]	; (8000a4c <MCAL_TIM_Init+0x25c>)
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	4614      	mov	r4, r2
 8000814:	461d      	mov	r5, r3
 8000816:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000818:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800081a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800081e:	e884 0003 	stmia.w	r4, {r0, r1}
		NVIC_IQR28_TIM2_Enable();
 8000822:	4b8b      	ldr	r3, [pc, #556]	; (8000a50 <MCAL_TIM_Init+0x260>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a8a      	ldr	r2, [pc, #552]	; (8000a50 <MCAL_TIM_Init+0x260>)
 8000828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082c:	6013      	str	r3, [r2, #0]
 800082e:	e039      	b.n	80008a4 <MCAL_TIM_Init+0xb4>
	}
	else if (TIMx == TIM3)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a88      	ldr	r2, [pc, #544]	; (8000a54 <MCAL_TIM_Init+0x264>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d117      	bne.n	8000868 <MCAL_TIM_Init+0x78>
	{
		RCC_TIM3_CLK_EN();
 8000838:	4b83      	ldr	r3, [pc, #524]	; (8000a48 <MCAL_TIM_Init+0x258>)
 800083a:	69db      	ldr	r3, [r3, #28]
 800083c:	4a82      	ldr	r2, [pc, #520]	; (8000a48 <MCAL_TIM_Init+0x258>)
 800083e:	f043 0302 	orr.w	r3, r3, #2
 8000842:	61d3      	str	r3, [r2, #28]
		Global_TIM_Config[1] = *TIM_Config ;
 8000844:	4b81      	ldr	r3, [pc, #516]	; (8000a4c <MCAL_TIM_Init+0x25c>)
 8000846:	683a      	ldr	r2, [r7, #0]
 8000848:	f103 0418 	add.w	r4, r3, #24
 800084c:	4615      	mov	r5, r2
 800084e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000850:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000852:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000856:	e884 0003 	stmia.w	r4, {r0, r1}
		NVIC_IQR29_TIM3_Enable();
 800085a:	4b7d      	ldr	r3, [pc, #500]	; (8000a50 <MCAL_TIM_Init+0x260>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a7c      	ldr	r2, [pc, #496]	; (8000a50 <MCAL_TIM_Init+0x260>)
 8000860:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000864:	6013      	str	r3, [r2, #0]
 8000866:	e01d      	b.n	80008a4 <MCAL_TIM_Init+0xb4>

	}
	else if (TIMx == TIM4)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4a7b      	ldr	r2, [pc, #492]	; (8000a58 <MCAL_TIM_Init+0x268>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d117      	bne.n	80008a0 <MCAL_TIM_Init+0xb0>
	{
		RCC_TIM4_CLK_EN();
 8000870:	4b75      	ldr	r3, [pc, #468]	; (8000a48 <MCAL_TIM_Init+0x258>)
 8000872:	69db      	ldr	r3, [r3, #28]
 8000874:	4a74      	ldr	r2, [pc, #464]	; (8000a48 <MCAL_TIM_Init+0x258>)
 8000876:	f043 0304 	orr.w	r3, r3, #4
 800087a:	61d3      	str	r3, [r2, #28]
		Global_TIM_Config[2] = *TIM_Config ;
 800087c:	4b73      	ldr	r3, [pc, #460]	; (8000a4c <MCAL_TIM_Init+0x25c>)
 800087e:	683a      	ldr	r2, [r7, #0]
 8000880:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8000884:	4615      	mov	r5, r2
 8000886:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000888:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800088a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800088e:	e884 0003 	stmia.w	r4, {r0, r1}
		NVIC_IQR30_TIM4_Enable();
 8000892:	4b6f      	ldr	r3, [pc, #444]	; (8000a50 <MCAL_TIM_Init+0x260>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a6e      	ldr	r2, [pc, #440]	; (8000a50 <MCAL_TIM_Init+0x260>)
 8000898:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800089c:	6013      	str	r3, [r2, #0]
 800089e:	e001      	b.n	80008a4 <MCAL_TIM_Init+0xb4>
	}
	else
	{
		return TIMx_NOT_Found ;
 80008a0:	2301      	movs	r3, #1
 80008a2:	e291      	b.n	8000dc8 <MCAL_TIM_Init+0x5d8>



	//Mode Selection

	switch(TIM_Config->TIM_Mode)
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	881b      	ldrh	r3, [r3, #0]
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d002      	beq.n	80008b2 <MCAL_TIM_Init+0xc2>
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d034      	beq.n	800091a <MCAL_TIM_Init+0x12a>
 80008b0:	e231      	b.n	8000d16 <MCAL_TIM_Init+0x526>

		//TIM_Auto_Reload_Not_Bufferd
		//	Bit 7 ARPE: Auto-reload preload enable
		//	0: TIMx_ARR register is not buffered
		//	1: TIMx_ARR register is buffered
		CLR_BIT(TIMx->CR1,7);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	601a      	str	r2, [r3, #0]



		if(TIM_Config->Counter.Count_Direction == Count_Direction_UP)
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	7a1b      	ldrb	r3, [r3, #8]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d10c      	bne.n	80008e0 <MCAL_TIM_Init+0xf0>
– Update generation through the slave mode controller
1: Only counter overflow/underflow generates an update interrupt or DMA request if
enabled.
			 */

			SET_BIT(TIMx->CR1,2) ;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f043 0204 	orr.w	r2, r3, #4
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	601a      	str	r2, [r3, #0]

			//Bit 4 DIR: Direction Selection [Upcount]
			CLR_BIT(TIMx->CR1,4) ;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f023 0210 	bic.w	r2, r3, #16
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	601a      	str	r2, [r3, #0]
		{
			//Bit 2 URS: Update request source
			SET_BIT(TIMx->CR1,2) ;
		}

		break;
 80008de:	e222      	b.n	8000d26 <MCAL_TIM_Init+0x536>
		else if(TIM_Config->Counter.Count_Direction == Count_Direction_DOWN)
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	7a1b      	ldrb	r3, [r3, #8]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d10c      	bne.n	8000902 <MCAL_TIM_Init+0x112>
			SET_BIT(TIMx->CR1,2) ;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f043 0204 	orr.w	r2, r3, #4
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	601a      	str	r2, [r3, #0]
			SET_BIT(TIMx->CR1,4) ;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f043 0210 	orr.w	r2, r3, #16
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	601a      	str	r2, [r3, #0]
		break;
 8000900:	e211      	b.n	8000d26 <MCAL_TIM_Init+0x536>
		else if(TIM_Config->Counter.Count_Direction == Count_Direction_UP_DOWN)
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	7a1b      	ldrb	r3, [r3, #8]
 8000906:	2b02      	cmp	r3, #2
 8000908:	f040 820d 	bne.w	8000d26 <MCAL_TIM_Init+0x536>
			SET_BIT(TIMx->CR1,2) ;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f043 0204 	orr.w	r2, r3, #4
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	601a      	str	r2, [r3, #0]
		break;
 8000918:	e205      	b.n	8000d26 <MCAL_TIM_Init+0x536>

		//TIM_Auto_Reload_Bufferd
		//	Bit 7 ARPE: Auto-reload preload enable
		//	0: TIMx_ARR register is not buffered
		//	1: TIMx_ARR register is buffered
		SET_BIT(TIMx->CR1,7);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	601a      	str	r2, [r3, #0]
1: Re-initialize the counter and generates an update of the registers. Note that the prescaler
counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if
the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload
value (TIMx_ARR) if DIR=1 (downcounting).
		 */
		SET_BIT(TIMx->EGR,0);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	f043 0201 	orr.w	r2, r3, #1
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	615a      	str	r2, [r3, #20]


		/******************** Channel Configuration ********************/

		if(TIM_Config->PWM.Channel == TIM_CHANNEL_1 ){
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	7a9b      	ldrb	r3, [r3, #10]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d175      	bne.n	8000a26 <MCAL_TIM_Init+0x236>
			/*
			 Bits 1:0 CC1S: Capture/Compare 1 selection
			This bit-field defines the direction of the channel (input/output) as well as the used input.
			00: CC1 channel is configured as output.
			 */
			TIMx->CCMR1 |= (0b00 << 0);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	699a      	ldr	r2, [r3, #24]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	619a      	str	r2, [r3, #24]




			/****** Mode Configuration ********/
			if(TIM_Config->PWM.Mode == PWM_Mode_FROZEN){
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	7adb      	ldrb	r3, [r3, #11]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d104      	bne.n	8000954 <MCAL_TIM_Init+0x164>
Note: In PWM mode 1 or 2, the OCREF level changes only when the result of the
comparison changes or when the output compare mode switches from “frozen” mode to “PWM” mode.

				 */
				//000: Frozen
				TIMx->CCMR1 |= (0b000 << 4);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	699a      	ldr	r2, [r3, #24]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	619a      	str	r2, [r3, #24]
 8000952:	e04e      	b.n	80009f2 <MCAL_TIM_Init+0x202>

			}else if(TIM_Config->PWM.Mode == PWM_Mode_EDGE_UP){
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	7adb      	ldrb	r3, [r3, #11]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d123      	bne.n	80009a4 <MCAL_TIM_Init+0x1b4>
	– Update generation through the slave mode controller
	1: Only counter overflow/underflow generates an update interrupt or DMA request if
	enabled.
				 */
				// Update request source Enable
				CLR_BIT(TIMx->CR1,2) ;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f023 0204 	bic.w	r2, r3, #4
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	601a      	str	r2, [r3, #0]

				//Bit 4 DIR: Direction Selection [Upcount]
				CLR_BIT(TIMx->CR1,4) ;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f023 0210 	bic.w	r2, r3, #16
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	601a      	str	r2, [r3, #0]

				//****************************************************************************

				if(TIM_Config->PWM.Ouptut_On_Compare_Match == PWM_Compare_Match_High){
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	7b9b      	ldrb	r3, [r3, #14]
 8000978:	2b01      	cmp	r3, #1
 800097a:	d106      	bne.n	800098a <MCAL_TIM_Init+0x19a>

					//111: PWM mode 2
					TIMx->CCMR1 |= (0b111 << 4);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f043 0270 	orr.w	r2, r3, #112	; 0x70
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	619a      	str	r2, [r3, #24]
 8000988:	e005      	b.n	8000996 <MCAL_TIM_Init+0x1a6>

				}else{
					//110: PWM mode 1
					TIMx->CCMR1 |= (0b110 << 4);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	619a      	str	r2, [r3, #24]
				}

				//0: CCxP: Capture/Compare output polarity OCx active high
				CLR_BIT(TIMx->CCER,1);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6a1b      	ldr	r3, [r3, #32]
 800099a:	f023 0202 	bic.w	r2, r3, #2
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	621a      	str	r2, [r3, #32]
 80009a2:	e026      	b.n	80009f2 <MCAL_TIM_Init+0x202>


			}else if(TIM_Config->PWM.Mode == PWM_Mode_EDGE_DOWN){
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	7adb      	ldrb	r3, [r3, #11]
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	d122      	bne.n	80009f2 <MCAL_TIM_Init+0x202>

				//Bit 2 URS: Update request source
				CLR_BIT(TIMx->CR1,2) ;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f023 0204 	bic.w	r2, r3, #4
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	601a      	str	r2, [r3, #0]

				//Bit 4 DIR: Direction [DOWN_Count]
				SET_BIT(TIMx->CR1,4) ;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f043 0210 	orr.w	r2, r3, #16
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	601a      	str	r2, [r3, #0]

				//****************************************

				if(TIM_Config->PWM.Ouptut_On_Compare_Match == PWM_Compare_Match_High){
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	7b9b      	ldrb	r3, [r3, #14]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d106      	bne.n	80009da <MCAL_TIM_Init+0x1ea>

					//110: PWM mode 1
					TIMx->CCMR1 |= (0b110 << 4);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	619a      	str	r2, [r3, #24]
 80009d8:	e005      	b.n	80009e6 <MCAL_TIM_Init+0x1f6>

				}else{
					//111: PWM mode 2
					TIMx->CCMR1 |= (0b111 << 4);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	f043 0270 	orr.w	r2, r3, #112	; 0x70
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	619a      	str	r2, [r3, #24]
				}

				//0: CCxP: Capture/Compare output polarity OCx active high
				CLR_BIT(TIMx->CCER,1);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6a1b      	ldr	r3, [r3, #32]
 80009ea:	f023 0202 	bic.w	r2, r3, #2
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	621a      	str	r2, [r3, #32]
It is loaded permanently if the preload feature is not selected in the TIMx_CCMR1 register
(bit OC1PE). Else the preload value is copied in the active capture/compare 1 register when an update event occurs.
The active capture/compare register contains the value to be compared to the counter
TIMx_CNT and signaled on OC1 output.
			 */
			if(TIM_Config->PWM.Compare_value <= TIM_Config->Auto_Reload_Value){
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	899a      	ldrh	r2, [r3, #12]
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	88db      	ldrh	r3, [r3, #6]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d811      	bhi.n	8000a22 <MCAL_TIM_Init+0x232>

				TIMx->CCR1 = TIM_Config->PWM.Compare_value ;
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	899b      	ldrh	r3, [r3, #12]
 8000a02:	461a      	mov	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	635a      	str	r2, [r3, #52]	; 0x34
1: These bits can not be modified as long as LOCK level 3 has been programmed
(LOCK bits in TIMx_BDTR register) and CC1S=00 (the channel is configured in output).
2: The PWM mode can be used without validating the preload register only
in one pulse mode (OPM bit set in TIMx_CR1 register). Else the behavior is not guaranteed.
			 */
			SET_BIT(TIMx->CCMR1,3);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f043 0208 	orr.w	r2, r3, #8
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	619a      	str	r2, [r3, #24]
0: Off - OC1 is not active.
1: On - OC1 signal is output on the corresponding output pin.
			 */

			//Capture/Compare output enable
			SET_BIT(TIMx->CCER,0);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6a1b      	ldr	r3, [r3, #32]
 8000a18:	f043 0201 	orr.w	r2, r3, #1
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	621a      	str	r2, [r3, #32]
		}




		break;
 8000a20:	e183      	b.n	8000d2a <MCAL_TIM_Init+0x53a>
				return TIM_PWM_Auto_Reload_Value_Exceeded;
 8000a22:	2305      	movs	r3, #5
 8000a24:	e1d0      	b.n	8000dc8 <MCAL_TIM_Init+0x5d8>
		}else if(TIM_Config->PWM.Channel == TIM_CHANNEL_2){
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	7a9b      	ldrb	r3, [r3, #10]
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	d17f      	bne.n	8000b2e <MCAL_TIM_Init+0x33e>
			TIMx->CCMR1 |= (0x00 << 8);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	699a      	ldr	r2, [r3, #24]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	619a      	str	r2, [r3, #24]
			if(TIM_Config->PWM.Mode == PWM_Mode_FROZEN){
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	7adb      	ldrb	r3, [r3, #11]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d10e      	bne.n	8000a5c <MCAL_TIM_Init+0x26c>
				TIMx->CCMR1 |= (0x000 << 12);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	699a      	ldr	r2, [r3, #24]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	619a      	str	r2, [r3, #24]
 8000a46:	e058      	b.n	8000afa <MCAL_TIM_Init+0x30a>
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	20000128 	.word	0x20000128
 8000a50:	e000e100 	.word	0xe000e100
 8000a54:	40000400 	.word	0x40000400
 8000a58:	40000800 	.word	0x40000800
			}else if(TIM_Config->PWM.Mode == PWM_Mode_EDGE_UP){
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	7adb      	ldrb	r3, [r3, #11]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d123      	bne.n	8000aac <MCAL_TIM_Init+0x2bc>
				CLR_BIT(TIMx->CR1,2) ;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f023 0204 	bic.w	r2, r3, #4
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	601a      	str	r2, [r3, #0]
				CLR_BIT(TIMx->CR1,4) ;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f023 0210 	bic.w	r2, r3, #16
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	601a      	str	r2, [r3, #0]
				if(TIM_Config->PWM.Ouptut_On_Compare_Match == PWM_Compare_Match_High){
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	7b9b      	ldrb	r3, [r3, #14]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d106      	bne.n	8000a92 <MCAL_TIM_Init+0x2a2>
					TIMx->CCMR1 |= (0b111 << 12);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	619a      	str	r2, [r3, #24]
 8000a90:	e005      	b.n	8000a9e <MCAL_TIM_Init+0x2ae>
					TIMx->CCMR1 |= (0b110 << 12);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	619a      	str	r2, [r3, #24]
				CLR_BIT(TIMx->CCER,5);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6a1b      	ldr	r3, [r3, #32]
 8000aa2:	f023 0220 	bic.w	r2, r3, #32
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	621a      	str	r2, [r3, #32]
 8000aaa:	e026      	b.n	8000afa <MCAL_TIM_Init+0x30a>
			}else if(TIM_Config->PWM.Mode == PWM_Mode_EDGE_DOWN){
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	7adb      	ldrb	r3, [r3, #11]
 8000ab0:	2b02      	cmp	r3, #2
 8000ab2:	d122      	bne.n	8000afa <MCAL_TIM_Init+0x30a>
				CLR_BIT(TIMx->CR1,2) ;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f023 0204 	bic.w	r2, r3, #4
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	601a      	str	r2, [r3, #0]
				SET_BIT(TIMx->CR1,4) ;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f043 0210 	orr.w	r2, r3, #16
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	601a      	str	r2, [r3, #0]
				if(TIM_Config->PWM.Ouptut_On_Compare_Match == PWM_Compare_Match_High){
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	7b9b      	ldrb	r3, [r3, #14]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d106      	bne.n	8000ae2 <MCAL_TIM_Init+0x2f2>
					TIMx->CCMR1 |= (0b110 << 12);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	619a      	str	r2, [r3, #24]
 8000ae0:	e005      	b.n	8000aee <MCAL_TIM_Init+0x2fe>
					TIMx->CCMR1 |= (0b111 << 12);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	699b      	ldr	r3, [r3, #24]
 8000ae6:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	619a      	str	r2, [r3, #24]
				CLR_BIT(TIMx->CCER,5);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6a1b      	ldr	r3, [r3, #32]
 8000af2:	f023 0220 	bic.w	r2, r3, #32
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	621a      	str	r2, [r3, #32]
			if(TIM_Config->PWM.Compare_value <= TIM_Config->Auto_Reload_Value){
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	899a      	ldrh	r2, [r3, #12]
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	88db      	ldrh	r3, [r3, #6]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d811      	bhi.n	8000b2a <MCAL_TIM_Init+0x33a>
				TIMx->CCR2 = TIM_Config->PWM.Compare_value ;
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	899b      	ldrh	r3, [r3, #12]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	639a      	str	r2, [r3, #56]	; 0x38
			SET_BIT(TIMx->CCMR1,11);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	619a      	str	r2, [r3, #24]
			SET_BIT(TIMx->CCER,4);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6a1b      	ldr	r3, [r3, #32]
 8000b20:	f043 0210 	orr.w	r2, r3, #16
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	621a      	str	r2, [r3, #32]
		break;
 8000b28:	e0ff      	b.n	8000d2a <MCAL_TIM_Init+0x53a>
				return TIM_PWM_Auto_Reload_Value_Exceeded;
 8000b2a:	2305      	movs	r3, #5
 8000b2c:	e14c      	b.n	8000dc8 <MCAL_TIM_Init+0x5d8>
		}else if(TIM_Config->PWM.Channel == TIM_CHANNEL_3){
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	7a9b      	ldrb	r3, [r3, #10]
 8000b32:	2b03      	cmp	r3, #3
 8000b34:	d175      	bne.n	8000c22 <MCAL_TIM_Init+0x432>
			TIMx->CCMR2 |= (0x00 << 0);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	69da      	ldr	r2, [r3, #28]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	61da      	str	r2, [r3, #28]
			if(TIM_Config->PWM.Mode == PWM_Mode_FROZEN){
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	7adb      	ldrb	r3, [r3, #11]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d104      	bne.n	8000b50 <MCAL_TIM_Init+0x360>
				TIMx->CCMR2 |= (0x000 << 4);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	69da      	ldr	r2, [r3, #28]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	61da      	str	r2, [r3, #28]
 8000b4e:	e04e      	b.n	8000bee <MCAL_TIM_Init+0x3fe>
			}else if(TIM_Config->PWM.Mode == PWM_Mode_EDGE_UP){
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	7adb      	ldrb	r3, [r3, #11]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d123      	bne.n	8000ba0 <MCAL_TIM_Init+0x3b0>
				CLR_BIT(TIMx->CR1,2) ;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f023 0204 	bic.w	r2, r3, #4
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	601a      	str	r2, [r3, #0]
				CLR_BIT(TIMx->CR1,4) ;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f023 0210 	bic.w	r2, r3, #16
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	601a      	str	r2, [r3, #0]
				if(TIM_Config->PWM.Ouptut_On_Compare_Match == PWM_Compare_Match_High){
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	7b9b      	ldrb	r3, [r3, #14]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d106      	bne.n	8000b86 <MCAL_TIM_Init+0x396>
					TIMx->CCMR2 |= (0b111 << 4);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	69db      	ldr	r3, [r3, #28]
 8000b7c:	f043 0270 	orr.w	r2, r3, #112	; 0x70
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	61da      	str	r2, [r3, #28]
 8000b84:	e005      	b.n	8000b92 <MCAL_TIM_Init+0x3a2>
					TIMx->CCMR2 |= (0b110 << 4);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	61da      	str	r2, [r3, #28]
				CLR_BIT(TIMx->CCER,9);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6a1b      	ldr	r3, [r3, #32]
 8000b96:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	621a      	str	r2, [r3, #32]
 8000b9e:	e026      	b.n	8000bee <MCAL_TIM_Init+0x3fe>
			}else if(TIM_Config->PWM.Mode == PWM_Mode_EDGE_DOWN){
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	7adb      	ldrb	r3, [r3, #11]
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d122      	bne.n	8000bee <MCAL_TIM_Init+0x3fe>
				CLR_BIT(TIMx->CR1,2) ;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f023 0204 	bic.w	r2, r3, #4
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	601a      	str	r2, [r3, #0]
				SET_BIT(TIMx->CR1,4) ;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f043 0210 	orr.w	r2, r3, #16
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	601a      	str	r2, [r3, #0]
				if(TIM_Config->PWM.Ouptut_On_Compare_Match == PWM_Compare_Match_High){
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	7b9b      	ldrb	r3, [r3, #14]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d106      	bne.n	8000bd6 <MCAL_TIM_Init+0x3e6>
					TIMx->CCMR2 |= (0b110 << 4);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	69db      	ldr	r3, [r3, #28]
 8000bcc:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	61da      	str	r2, [r3, #28]
 8000bd4:	e005      	b.n	8000be2 <MCAL_TIM_Init+0x3f2>
					TIMx->CCMR2 |= (0b111 << 4);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	f043 0270 	orr.w	r2, r3, #112	; 0x70
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	61da      	str	r2, [r3, #28]
				CLR_BIT(TIMx->CCER,9);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6a1b      	ldr	r3, [r3, #32]
 8000be6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	621a      	str	r2, [r3, #32]
			if(TIM_Config->PWM.Compare_value <= TIM_Config->Auto_Reload_Value){
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	899a      	ldrh	r2, [r3, #12]
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	88db      	ldrh	r3, [r3, #6]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d811      	bhi.n	8000c1e <MCAL_TIM_Init+0x42e>
				TIMx->CCR3 = TIM_Config->PWM.Compare_value ;
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	899b      	ldrh	r3, [r3, #12]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	63da      	str	r2, [r3, #60]	; 0x3c
			SET_BIT(TIMx->CCMR2,3);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69db      	ldr	r3, [r3, #28]
 8000c08:	f043 0208 	orr.w	r2, r3, #8
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	61da      	str	r2, [r3, #28]
			SET_BIT(TIMx->CCER,8);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6a1b      	ldr	r3, [r3, #32]
 8000c14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	621a      	str	r2, [r3, #32]
		break;
 8000c1c:	e085      	b.n	8000d2a <MCAL_TIM_Init+0x53a>
				return TIM_PWM_Auto_Reload_Value_Exceeded;
 8000c1e:	2305      	movs	r3, #5
 8000c20:	e0d2      	b.n	8000dc8 <MCAL_TIM_Init+0x5d8>
		}else if(TIM_Config->PWM.Channel == TIM_CHANNEL_4){
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	7a9b      	ldrb	r3, [r3, #10]
 8000c26:	2b04      	cmp	r3, #4
 8000c28:	d17f      	bne.n	8000d2a <MCAL_TIM_Init+0x53a>
			TIMx->CCMR2 |= (0x00 << 8);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	69da      	ldr	r2, [r3, #28]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	61da      	str	r2, [r3, #28]
			if(TIM_Config->PWM.Mode == PWM_Mode_FROZEN){
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	7adb      	ldrb	r3, [r3, #11]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d104      	bne.n	8000c44 <MCAL_TIM_Init+0x454>
				TIMx->CCMR2 |= (0x000 << 12);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	69da      	ldr	r2, [r3, #28]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	61da      	str	r2, [r3, #28]
 8000c42:	e04e      	b.n	8000ce2 <MCAL_TIM_Init+0x4f2>
			}else if(TIM_Config->PWM.Mode == PWM_Mode_EDGE_UP){
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	7adb      	ldrb	r3, [r3, #11]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d123      	bne.n	8000c94 <MCAL_TIM_Init+0x4a4>
				CLR_BIT(TIMx->CR1,2) ;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f023 0204 	bic.w	r2, r3, #4
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	601a      	str	r2, [r3, #0]
				CLR_BIT(TIMx->CR1,4) ;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f023 0210 	bic.w	r2, r3, #16
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	601a      	str	r2, [r3, #0]
				if(TIM_Config->PWM.Ouptut_On_Compare_Match == PWM_Compare_Match_High){
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	7b9b      	ldrb	r3, [r3, #14]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d106      	bne.n	8000c7a <MCAL_TIM_Init+0x48a>
					TIMx->CCMR2 |= (0b111 << 12);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	69db      	ldr	r3, [r3, #28]
 8000c70:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	61da      	str	r2, [r3, #28]
 8000c78:	e005      	b.n	8000c86 <MCAL_TIM_Init+0x496>
					TIMx->CCMR2 |= (0b110 << 12);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	61da      	str	r2, [r3, #28]
				CLR_BIT(TIMx->CCER,13);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6a1b      	ldr	r3, [r3, #32]
 8000c8a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	621a      	str	r2, [r3, #32]
 8000c92:	e026      	b.n	8000ce2 <MCAL_TIM_Init+0x4f2>
			}else if(TIM_Config->PWM.Mode == PWM_Mode_EDGE_DOWN){
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	7adb      	ldrb	r3, [r3, #11]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d122      	bne.n	8000ce2 <MCAL_TIM_Init+0x4f2>
				CLR_BIT(TIMx->CR1,2) ;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f023 0204 	bic.w	r2, r3, #4
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	601a      	str	r2, [r3, #0]
				SET_BIT(TIMx->CR1,4) ;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f043 0210 	orr.w	r2, r3, #16
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	601a      	str	r2, [r3, #0]
				if(TIM_Config->PWM.Ouptut_On_Compare_Match == PWM_Compare_Match_High){
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	7b9b      	ldrb	r3, [r3, #14]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d106      	bne.n	8000cca <MCAL_TIM_Init+0x4da>
					TIMx->CCMR2 |= (0b110 << 12);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	69db      	ldr	r3, [r3, #28]
 8000cc0:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	61da      	str	r2, [r3, #28]
 8000cc8:	e005      	b.n	8000cd6 <MCAL_TIM_Init+0x4e6>
					TIMx->CCMR2 |= (0b111 << 12);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	61da      	str	r2, [r3, #28]
				CLR_BIT(TIMx->CCER,13);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6a1b      	ldr	r3, [r3, #32]
 8000cda:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	621a      	str	r2, [r3, #32]
			if(TIM_Config->PWM.Compare_value <= TIM_Config->Auto_Reload_Value){
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	899a      	ldrh	r2, [r3, #12]
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	88db      	ldrh	r3, [r3, #6]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d811      	bhi.n	8000d12 <MCAL_TIM_Init+0x522>
				TIMx->CCR4 = TIM_Config->PWM.Compare_value ;
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	899b      	ldrh	r3, [r3, #12]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	641a      	str	r2, [r3, #64]	; 0x40
			SET_BIT(TIMx->CCMR2,11);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	69db      	ldr	r3, [r3, #28]
 8000cfc:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	61da      	str	r2, [r3, #28]
			SET_BIT(TIMx->CCER,12);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6a1b      	ldr	r3, [r3, #32]
 8000d08:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	621a      	str	r2, [r3, #32]
		break;
 8000d10:	e00b      	b.n	8000d2a <MCAL_TIM_Init+0x53a>
				return TIM_PWM_Auto_Reload_Value_Exceeded;
 8000d12:	2305      	movs	r3, #5
 8000d14:	e058      	b.n	8000dc8 <MCAL_TIM_Init+0x5d8>


	default:
		CLR_BIT(TIMx->CR1,2) ;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f023 0204 	bic.w	r2, r3, #4
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	601a      	str	r2, [r3, #0]
		return TIM_MODE_NOT_Found ;
 8000d22:	2302      	movs	r3, #2
 8000d24:	e050      	b.n	8000dc8 <MCAL_TIM_Init+0x5d8>
		break;
 8000d26:	bf00      	nop
 8000d28:	e000      	b.n	8000d2c <MCAL_TIM_Init+0x53c>
		break;
 8000d2a:	bf00      	nop
		break;

	}


	CLR_BIT(TIMx->CR1,1) ; //Update enable Bit 1 UDIS: Update disable
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f023 0202 	bic.w	r2, r3, #2
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	601a      	str	r2, [r3, #0]


	// Prescaler set
	TIMx->PSC = (uint16_t)(TIM_Config->Prescaler-1) ;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	885b      	ldrh	r3, [r3, #2]
 8000d3c:	3b01      	subs	r3, #1
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	461a      	mov	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	629a      	str	r2, [r3, #40]	; 0x28


	if (TIM_Config->Auto_Reload_Value < 0xffff)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	88db      	ldrh	r3, [r3, #6]
 8000d4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d009      	beq.n	8000d66 <MCAL_TIM_Init+0x576>
	{
		TIMx->ARR = (uint16_t) (TIM_Config->Auto_Reload_Value); //Auto reload Value
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	88db      	ldrh	r3, [r3, #6]
 8000d56:	461a      	mov	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	62da      	str	r2, [r3, #44]	; 0x2c
	{
		return TIM_Auto_Reload_Value_Exceeded ;

	}

	if (TIM_Config->IRQ_Enable == TIM_IRQ_MODE_None )
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	8a1b      	ldrh	r3, [r3, #16]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d10f      	bne.n	8000d84 <MCAL_TIM_Init+0x594>
 8000d64:	e001      	b.n	8000d6a <MCAL_TIM_Init+0x57a>
		return TIM_Auto_Reload_Value_Exceeded ;
 8000d66:	2303      	movs	r3, #3
 8000d68:	e02e      	b.n	8000dc8 <MCAL_TIM_Init+0x5d8>
	{
		CLR_BIT(TIMx->DIER,0);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	f023 0201 	bic.w	r2, r3, #1
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	60da      	str	r2, [r3, #12]
		SET_BIT(TIMx->CR1,1);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f043 0202 	orr.w	r2, r3, #2
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	e020      	b.n	8000dc6 <MCAL_TIM_Init+0x5d6>
	}
	else if (TIM_Config->IRQ_Enable == TIM_IRQ_MODE_OverFlow )
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	8a1b      	ldrh	r3, [r3, #16]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d10c      	bne.n	8000da6 <MCAL_TIM_Init+0x5b6>
	{
		SET_BIT(TIMx->DIER,0);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	f043 0201 	orr.w	r2, r3, #1
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	60da      	str	r2, [r3, #12]
		CLR_BIT(TIMx->CR1,1);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f023 0202 	bic.w	r2, r3, #2
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	e00f      	b.n	8000dc6 <MCAL_TIM_Init+0x5d6>
	}
	else if (TIM_Config->IRQ_Enable == TIM_IRQ_MODE_UnderFlow )
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	8a1b      	ldrh	r3, [r3, #16]
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d10b      	bne.n	8000dc6 <MCAL_TIM_Init+0x5d6>
	{
		SET_BIT(TIMx->DIER,0);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	f043 0201 	orr.w	r2, r3, #1
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	60da      	str	r2, [r3, #12]
		CLR_BIT(TIMx->CR1,1);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f023 0202 	bic.w	r2, r3, #2
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	601a      	str	r2, [r3, #0]
	}



return 0;
 8000dc6:	2300      	movs	r3, #0

}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bcb0      	pop	{r4, r5, r7}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop

08000dd4 <MCAL_TIM_Start>:
 * @param [in]   -TIMx :  were x can be (1,2,3,4 depending on device used)to select the Timer Peripheral
 * @retval		 -none
 * Note			 -none
 */
Error_status MCAL_TIM_Start(TIM_TypeDef *TIMx)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
previously set by software. However trigger mode can set the CEN bit automatically by
hardware.
CEN is cleared automatically in one-pulse mode, when an update event occurs.
	 */

	if(TIMx != NULL)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d007      	beq.n	8000df2 <MCAL_TIM_Start+0x1e>
	{
		SET_BIT(TIMx->CR1,0) ; //Timer Enable
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f043 0201 	orr.w	r2, r3, #1
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	601a      	str	r2, [r3, #0]
	else
	{
		return TIMx_NOT_Found;
	}

	return 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	e000      	b.n	8000df4 <MCAL_TIM_Start+0x20>
		return TIMx_NOT_Found;
 8000df2:	2301      	movs	r3, #1

}
 8000df4:	4618      	mov	r0, r3
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr

08000dfe <MCAL_TIM_Stop>:
 * @param [in]   -TIMx :  were x can be (1,2,3,4 depending on device used)to select the Timer Peripheral
 * @retval		 -none
 * Note			 -none
 */
Error_status MCAL_TIM_Stop(TIM_TypeDef *TIMx)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
	previously set by software. However trigger mode can set the CEN bit automatically by
	hardware.
	CEN is cleared automatically in one-pulse mode, when an update event occurs.
	 */

	if(TIMx != NULL)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d007      	beq.n	8000e1c <MCAL_TIM_Stop+0x1e>
	{
		CLR_BIT(TIMx->CR1,0) ; //Timer Enable
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f023 0201 	bic.w	r2, r3, #1
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	601a      	str	r2, [r3, #0]
	{
		return TIMx_NOT_Found;
	}


	return 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	e000      	b.n	8000e1e <MCAL_TIM_Stop+0x20>
		return TIMx_NOT_Found;
 8000e1c:	2301      	movs	r3, #1

}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <MCAL_TIM_Count_Reset>:
 * @param [in]   -TIMx :  were x can be (1,2,3,4 depending on device used)to select the Timer Peripheral
 * @retval		 -none
 * Note			 -none
 */
Error_status MCAL_TIM_Count_Reset(TIM_TypeDef *TIMx)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]


	if(TIMx != NULL)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d004      	beq.n	8000e40 <MCAL_TIM_Count_Reset+0x18>
	{
		TIMx->CNT = 0x0000;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	625a      	str	r2, [r3, #36]	; 0x24
		return TIMx_No_Error;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	e000      	b.n	8000e42 <MCAL_TIM_Count_Reset+0x1a>
	}


	return TIMx_NOT_Found;
 8000e40:	2301      	movs	r3, #1

}
 8000e42:	4618      	mov	r0, r3
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <TIM2_IRQHandler>:
 * 							IRQHandler Functions
 * =====================================================================================
 */

void TIM2_IRQHandler()
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	TIM2->SR = 0x00 ;
 8000e50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
	Global_TIM_Config[0].P_IRQ_CallBack();
 8000e58:	4b02      	ldr	r3, [pc, #8]	; (8000e64 <TIM2_IRQHandler+0x18>)
 8000e5a:	695b      	ldr	r3, [r3, #20]
 8000e5c:	4798      	blx	r3


}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000128 	.word	0x20000128

08000e68 <TIM3_IRQHandler>:
void TIM3_IRQHandler()
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	TIM3->SR = 0x00 ;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <TIM3_IRQHandler+0x14>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
	Global_TIM_Config[1].P_IRQ_CallBack();
 8000e72:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <TIM3_IRQHandler+0x18>)
 8000e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e76:	4798      	blx	r3
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40000400 	.word	0x40000400
 8000e80:	20000128 	.word	0x20000128

08000e84 <TIM4_IRQHandler>:
void TIM4_IRQHandler()
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	TIM4->SR = 0x00 ;
 8000e88:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <TIM4_IRQHandler+0x14>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
	Global_TIM_Config[2].P_IRQ_CallBack();
 8000e8e:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <TIM4_IRQHandler+0x18>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	4798      	blx	r3
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40000800 	.word	0x40000800
 8000e9c:	20000128 	.word	0x20000128

08000ea0 <USART1_IRQHandler>:
 * 							ISR Functions
 * =====================================================================================
 */

void USART1_IRQHandler (void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000ea4:	4b02      	ldr	r3, [pc, #8]	; (8000eb0 <USART1_IRQHandler+0x10>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	691b      	ldr	r3, [r3, #16]
 8000eaa:	4798      	blx	r3
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	200000b0 	.word	0x200000b0

08000eb4 <USART2_IRQHandler>:
void USART2_IRQHandler (void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000eb8:	4b02      	ldr	r3, [pc, #8]	; (8000ec4 <USART2_IRQHandler+0x10>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	691b      	ldr	r3, [r3, #16]
 8000ebe:	4798      	blx	r3
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	200000b0 	.word	0x200000b0

08000ec8 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8000ecc:	4b02      	ldr	r3, [pc, #8]	; (8000ed8 <USART3_IRQHandler+0x10>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	691b      	ldr	r3, [r3, #16]
 8000ed2:	4798      	blx	r3
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	200000b0 	.word	0x200000b0

08000edc <MCAL_WWDG_Init>:
 * 							Generic Functions
 * =======================================================================================
 */

WWDG_Error_status MCAL_WWDG_Init(WWDG_Config_t *WWDG_Config)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]

	G_Config = *WWDG_Config ;
 8000ee4:	4b28      	ldr	r3, [pc, #160]	; (8000f88 <MCAL_WWDG_Init+0xac>)
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000eea:	e883 0007 	stmia.w	r3, {r0, r1, r2}


	uint16_t tempCR = 0,
 8000eee:	2300      	movs	r3, #0
 8000ef0:	81bb      	strh	r3, [r7, #12]
			tempCFR = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	81fb      	strh	r3, [r7, #14]


	//Enable Clock To WWDG
	RCC_WWDG_CLK_EN();
 8000ef6:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <MCAL_WWDG_Init+0xb0>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	4a24      	ldr	r2, [pc, #144]	; (8000f8c <MCAL_WWDG_Init+0xb0>)
 8000efc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f00:	61d3      	str	r3, [r2, #28]
*/

	//DBGMCU_CR |= (uint32_t)(1<<9);


	tempCR |=  WWDG_Config->Counter_Start_VAL ;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	881a      	ldrh	r2, [r3, #0]
 8000f06:	89bb      	ldrh	r3, [r7, #12]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	81bb      	strh	r3, [r7, #12]

	tempCFR |=  WWDG_Config->Window_Value ;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	889a      	ldrh	r2, [r3, #4]
 8000f10:	89fb      	ldrh	r3, [r7, #14]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	81fb      	strh	r3, [r7, #14]

	tempCFR |= WWDG_Config->Prescaler ; //Prescaler
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	885a      	ldrh	r2, [r3, #2]
 8000f1a:	89fb      	ldrh	r3, [r7, #14]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	81fb      	strh	r3, [r7, #14]




	if (WWDG_Config->EWI_IRQ_Enable == WWDG_EWI_IRQ_Enable)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	88db      	ldrh	r3, [r3, #6]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d10a      	bne.n	8000f3e <MCAL_WWDG_Init+0x62>
	{
		NVIC_IRQ0_WWDG_Enable();
 8000f28:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <MCAL_WWDG_Init+0xb4>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a18      	ldr	r2, [pc, #96]	; (8000f90 <MCAL_WWDG_Init+0xb4>)
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	6013      	str	r3, [r2, #0]
		SET_BIT(tempCFR,9);
 8000f34:	89fb      	ldrh	r3, [r7, #14]
 8000f36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f3a:	81fb      	strh	r3, [r7, #14]
 8000f3c:	e009      	b.n	8000f52 <MCAL_WWDG_Init+0x76>
	}
	else if (WWDG_Config->EWI_IRQ_Enable == WWDG_EWI_IRQ_None)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	88db      	ldrh	r3, [r3, #6]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d105      	bne.n	8000f52 <MCAL_WWDG_Init+0x76>
	{
		NVIC_IRQ0_WWDG_Disable();
 8000f46:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <MCAL_WWDG_Init+0xb8>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a12      	ldr	r2, [pc, #72]	; (8000f94 <MCAL_WWDG_Init+0xb8>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6013      	str	r3, [r2, #0]

	//WWDG->CR |=1<<7;

	//Important condition
	//wait until T6:0 < W6:0
	while((WWDG->CFR & 0x7F) < (WWDG->CR & 0x7F));
 8000f52:	bf00      	nop
 8000f54:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <MCAL_WWDG_Init+0xbc>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <MCAL_WWDG_Init+0xbc>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d3f5      	bcc.n	8000f54 <MCAL_WWDG_Init+0x78>

	WWDG->CR = tempCR;
 8000f68:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <MCAL_WWDG_Init+0xbc>)
 8000f6a:	89bb      	ldrh	r3, [r7, #12]
 8000f6c:	6013      	str	r3, [r2, #0]

	WWDG->CFR = tempCFR;
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <MCAL_WWDG_Init+0xbc>)
 8000f70:	89fb      	ldrh	r3, [r7, #14]
 8000f72:	6053      	str	r3, [r2, #4]

	WWDG->SR = 0;
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <MCAL_WWDG_Init+0xbc>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]


	return WWDG_OK ;
 8000f7a:	2300      	movs	r3, #0
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000170 	.word	0x20000170
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	e000e100 	.word	0xe000e100
 8000f94:	e000e180 	.word	0xe000e180
 8000f98:	40002c00 	.word	0x40002c00

08000f9c <MCAL_WWDG_Start>:


WWDG_Error_status MCAL_WWDG_Start(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
	//	This bit is set by software and only cleared by hardware after a reset. When WDGA = 1, the
	//	watchdog can generate a reset.
	//	0: Watchdog disabled
	//	1: Watchdog enabled

	SET_BIT(WWDG->CR,7);
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <MCAL_WWDG_Start+0x1c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <MCAL_WWDG_Start+0x1c>)
 8000fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000faa:	6013      	str	r3, [r2, #0]


	return WWDG_OK ;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40002c00 	.word	0x40002c00

08000fbc <MCAL_WWDG_Kick>:


WWDG_Error_status MCAL_WWDG_Kick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
	WWDG->CR |=  G_Config.Counter_Start_VAL ;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <MCAL_WWDG_Kick+0x20>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a06      	ldr	r2, [pc, #24]	; (8000fe0 <MCAL_WWDG_Kick+0x24>)
 8000fc6:	8812      	ldrh	r2, [r2, #0]
 8000fc8:	4611      	mov	r1, r2
 8000fca:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <MCAL_WWDG_Kick+0x20>)
 8000fcc:	430b      	orrs	r3, r1
 8000fce:	6013      	str	r3, [r2, #0]

	return WWDG_OK ;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40002c00 	.word	0x40002c00
 8000fe0:	20000170 	.word	0x20000170

08000fe4 <WWDG_IRQHandler>:



void WWDG_IRQHandler ()
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	CLR_BIT(WWDG->SR,0);
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <WWDG_IRQHandler+0x1c>)
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <WWDG_IRQHandler+0x1c>)
 8000fee:	f023 0301 	bic.w	r3, r3, #1
 8000ff2:	6093      	str	r3, [r2, #8]
	G_Config.P_IRQ_CallBack();
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <WWDG_IRQHandler+0x20>)
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	4798      	blx	r3

}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40002c00 	.word	0x40002c00
 8001004:	20000170 	.word	0x20000170

08001008 <__libc_init_array>:
 8001008:	b570      	push	{r4, r5, r6, lr}
 800100a:	2500      	movs	r5, #0
 800100c:	4e0c      	ldr	r6, [pc, #48]	; (8001040 <__libc_init_array+0x38>)
 800100e:	4c0d      	ldr	r4, [pc, #52]	; (8001044 <__libc_init_array+0x3c>)
 8001010:	1ba4      	subs	r4, r4, r6
 8001012:	10a4      	asrs	r4, r4, #2
 8001014:	42a5      	cmp	r5, r4
 8001016:	d109      	bne.n	800102c <__libc_init_array+0x24>
 8001018:	f000 f81a 	bl	8001050 <_init>
 800101c:	2500      	movs	r5, #0
 800101e:	4e0a      	ldr	r6, [pc, #40]	; (8001048 <__libc_init_array+0x40>)
 8001020:	4c0a      	ldr	r4, [pc, #40]	; (800104c <__libc_init_array+0x44>)
 8001022:	1ba4      	subs	r4, r4, r6
 8001024:	10a4      	asrs	r4, r4, #2
 8001026:	42a5      	cmp	r5, r4
 8001028:	d105      	bne.n	8001036 <__libc_init_array+0x2e>
 800102a:	bd70      	pop	{r4, r5, r6, pc}
 800102c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001030:	4798      	blx	r3
 8001032:	3501      	adds	r5, #1
 8001034:	e7ee      	b.n	8001014 <__libc_init_array+0xc>
 8001036:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800103a:	4798      	blx	r3
 800103c:	3501      	adds	r5, #1
 800103e:	e7f2      	b.n	8001026 <__libc_init_array+0x1e>
 8001040:	08001068 	.word	0x08001068
 8001044:	08001068 	.word	0x08001068
 8001048:	08001068 	.word	0x08001068
 800104c:	0800106c 	.word	0x0800106c

08001050 <_init>:
 8001050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001052:	bf00      	nop
 8001054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001056:	bc08      	pop	{r3}
 8001058:	469e      	mov	lr, r3
 800105a:	4770      	bx	lr

0800105c <_fini>:
 800105c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800105e:	bf00      	nop
 8001060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001062:	bc08      	pop	{r3}
 8001064:	469e      	mov	lr, r3
 8001066:	4770      	bx	lr
