
Drivers.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000118c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080012bc  080012bc  000112bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012c8  080012c8  000112d0  2**0
                  CONTENTS
  4 .ARM          00000000  080012c8  080012c8  000112d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080012c8  080012d0  000112d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012c8  080012c8  000112c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080012cc  080012cc  000112cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000112d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000488  20000000  080012d0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  080012d0  00020488  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000112d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009392  00000000  00000000  000112f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001740  00000000  00000000  0001a68b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001ea0  00000000  00000000  0001bdcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000480  00000000  00000000  0001dc70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000003c8  00000000  00000000  0001e0f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000052f2  00000000  00000000  0001e4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000052c6  00000000  00000000  000237aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00013d9b  00000000  00000000  00028a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0003c80b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000f7c  00000000  00000000  0003c888  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080012a4 	.word	0x080012a4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080012a4 	.word	0x080012a4

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <HardFault_Handler>:
#include "CortexMX_OS_porting.h"

unsigned char SysTick_LED ;

void HardFault_Handler (void)
{
 8000184:	b480      	push	{r7}
 8000186:	af00      	add	r7, sp, #0
	while (1) ;
 8000188:	e7fe      	b.n	8000188 <HardFault_Handler+0x4>

0800018a <MemManage_Handler>:
}
void MemManage_Handler (void)
{
 800018a:	b480      	push	{r7}
 800018c:	af00      	add	r7, sp, #0
	while (1) ;
 800018e:	e7fe      	b.n	800018e <MemManage_Handler+0x4>

08000190 <BusFault_Handler>:
}
void BusFault_Handler (void)
{
 8000190:	b480      	push	{r7}
 8000192:	af00      	add	r7, sp, #0
	while (1) ;
 8000194:	e7fe      	b.n	8000194 <BusFault_Handler+0x4>

08000196 <UsageFault_Handler>:
}
void UsageFault_Handler (void)
{
 8000196:	b480      	push	{r7}
 8000198:	af00      	add	r7, sp, #0
	while (1) ;
 800019a:	e7fe      	b.n	800019a <UsageFault_Handler+0x4>

0800019c <SVC_Handler>:
}

__attribute ((naked)) void SVC_Handler()
{
	__asm("tst lr,#4       \n\t"
 800019c:	f01e 0f04 	tst.w	lr, #4
 80001a0:	bf0c      	ite	eq
 80001a2:	f3ef 8008 	mrseq	r0, MSP
 80001a6:	f3ef 8009 	mrsne	r0, PSP
 80001aa:	f000 ba87 	b.w	80006bc <OS_SVC>
			"ITE EQ        \n\t"
			"mrseq r0,MSP  \n\t"
			"mrsne r0,PSP  \n\t"
			"B OS_SVC");
}
 80001ae:	bf00      	nop

080001b0 <trigger_OS_PendSV>:
	__NVIC_SetPriority(PendSV_IRQn, 15);

}

void trigger_OS_PendSV()
{
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk ;
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <trigger_OS_PendSV+0x18>)
 80001b6:	685b      	ldr	r3, [r3, #4]
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <trigger_OS_PendSV+0x18>)
 80001ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80001be:	6053      	str	r3, [r2, #4]
}
 80001c0:	bf00      	nop
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr
 80001c8:	e000ed00 	.word	0xe000ed00

080001cc <SysTick_Handler>:
	SysTick_Config(8000);
}


void SysTick_Handler()
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
	SysTick_LED ^= 1 ;
 80001d0:	4b07      	ldr	r3, [pc, #28]	; (80001f0 <SysTick_Handler+0x24>)
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	f083 0301 	eor.w	r3, r3, #1
 80001d8:	b2da      	uxtb	r2, r3
 80001da:	4b05      	ldr	r3, [pc, #20]	; (80001f0 <SysTick_Handler+0x24>)
 80001dc:	701a      	strb	r2, [r3, #0]

	MYRTOS_Update_TaskWaiting_Time();
 80001de:	f000 fabb 	bl	8000758 <MYRTOS_Update_TaskWaiting_Time>

	//Determine PCurrent & PNext
	Decide_WhatNext();
 80001e2:	f000 fa19 	bl	8000618 <Decide_WhatNext>

	//Switch Context & Restore
	trigger_OS_PendSV();
 80001e6:	f7ff ffe3 	bl	80001b0 <trigger_OS_PendSV>

}
 80001ea:	bf00      	nop
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	200000ac 	.word	0x200000ac

080001f4 <FIFO_enqueue>:

}

/* *********************************** */

Buffer_status FIFO_enqueue (FIFO_Buf_t* fifo,element_type item){
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
 80001fc:	6039      	str	r1, [r7, #0]

	/* fifo null*/

	if (!fifo->base || !fifo->length)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	68db      	ldr	r3, [r3, #12]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d003      	beq.n	800020e <FIFO_enqueue+0x1a>
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	691b      	ldr	r3, [r3, #16]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d101      	bne.n	8000212 <FIFO_enqueue+0x1e>
		return FIFO_NULL;
 800020e:	2303      	movs	r3, #3
 8000210:	e02d      	b.n	800026e <FIFO_enqueue+0x7a>
	/*fifo is full*/

	/* fifo full */
	if ((fifo->head == fifo->tail) && (fifo->counter == fifo->length))
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	685a      	ldr	r2, [r3, #4]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	689b      	ldr	r3, [r3, #8]
 800021a:	429a      	cmp	r2, r3
 800021c:	d107      	bne.n	800022e <FIFO_enqueue+0x3a>
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	681a      	ldr	r2, [r3, #0]
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	691b      	ldr	r3, [r3, #16]
 8000226:	429a      	cmp	r2, r3
 8000228:	d101      	bne.n	800022e <FIFO_enqueue+0x3a>
		return FIFO_FULL;
 800022a:	2301      	movs	r3, #1
 800022c:	e01f      	b.n	800026e <FIFO_enqueue+0x7a>

	*(fifo->tail)=item;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	689b      	ldr	r3, [r3, #8]
 8000232:	683a      	ldr	r2, [r7, #0]
 8000234:	601a      	str	r2, [r3, #0]
	fifo->counter++;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	1c5a      	adds	r2, r3, #1
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	601a      	str	r2, [r3, #0]

	/*for circular fifo again */

	/* circular enqueue */
	if (fifo->tail == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	689b      	ldr	r3, [r3, #8]
 8000244:	687a      	ldr	r2, [r7, #4]
 8000246:	68d2      	ldr	r2, [r2, #12]
 8000248:	4611      	mov	r1, r2
 800024a:	687a      	ldr	r2, [r7, #4]
 800024c:	6912      	ldr	r2, [r2, #16]
 800024e:	0092      	lsls	r2, r2, #2
 8000250:	440a      	add	r2, r1
 8000252:	3a04      	subs	r2, #4
 8000254:	4293      	cmp	r3, r2
 8000256:	d104      	bne.n	8000262 <FIFO_enqueue+0x6e>
		fifo->tail = fifo->base;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	68da      	ldr	r2, [r3, #12]
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	609a      	str	r2, [r3, #8]
 8000260:	e004      	b.n	800026c <FIFO_enqueue+0x78>
	else
		fifo->tail++;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	689b      	ldr	r3, [r3, #8]
 8000266:	1d1a      	adds	r2, r3, #4
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	609a      	str	r2, [r3, #8]

	return FIFO_NO_ERROR;
 800026c:	2300      	movs	r3, #0


}
 800026e:	4618      	mov	r0, r3
 8000270:	370c      	adds	r7, #12
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr

08000278 <FIFO_dequeue>:

/* *********************************** */

Buffer_status FIFO_dequeue (FIFO_Buf_t* fifo, element_type* item){
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
 8000280:	6039      	str	r1, [r7, #0]
	/* check fifo valid */
	if (!fifo->base || !fifo->length)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	68db      	ldr	r3, [r3, #12]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d003      	beq.n	8000292 <FIFO_dequeue+0x1a>
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	691b      	ldr	r3, [r3, #16]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d101      	bne.n	8000296 <FIFO_dequeue+0x1e>
		return FIFO_NULL;
 8000292:	2303      	movs	r3, #3
 8000294:	e028      	b.n	80002e8 <FIFO_dequeue+0x70>

	/* fifo empty */
	if (fifo->head == fifo->tail)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	685a      	ldr	r2, [r3, #4]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	689b      	ldr	r3, [r3, #8]
 800029e:	429a      	cmp	r2, r3
 80002a0:	d101      	bne.n	80002a6 <FIFO_dequeue+0x2e>
		return FIFO_EMPTY;
 80002a2:	2302      	movs	r3, #2
 80002a4:	e020      	b.n	80002e8 <FIFO_dequeue+0x70>



	*item = *(fifo->head);
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	681a      	ldr	r2, [r3, #0]
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	601a      	str	r2, [r3, #0]
	fifo->counter--;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	1e5a      	subs	r2, r3, #1
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	601a      	str	r2, [r3, #0]

	/* circular dequeue */
	if (fifo->head == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	687a      	ldr	r2, [r7, #4]
 80002c0:	68d2      	ldr	r2, [r2, #12]
 80002c2:	4611      	mov	r1, r2
 80002c4:	687a      	ldr	r2, [r7, #4]
 80002c6:	6912      	ldr	r2, [r2, #16]
 80002c8:	0092      	lsls	r2, r2, #2
 80002ca:	440a      	add	r2, r1
 80002cc:	3a04      	subs	r2, #4
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d104      	bne.n	80002dc <FIFO_dequeue+0x64>
		fifo->head = fifo->base;
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	68da      	ldr	r2, [r3, #12]
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	e004      	b.n	80002e6 <FIFO_dequeue+0x6e>
	else
		fifo->head++;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	1d1a      	adds	r2, r3, #4
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR;
 80002e6:	2300      	movs	r3, #0
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bc80      	pop	{r7}
 80002f0:	4770      	bx	lr
	...

080002f4 <PendSV_Handler>:
{
	//====================================
	//Save the Context of the Current Task
	//====================================
	//Get the Current Task "Current PSP from CPU register" as CPU Push XPSR,.....,R0
	OS_GET_PSP(OS_Control.CurrentTask->Current_PSP);
 80002f4:	4b6f      	ldr	r3, [pc, #444]	; (80004b4 <PendSV_Handler+0x1c0>)
 80002f6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80002fa:	f3ef 8009 	mrs	r0, PSP
 80002fe:	4602      	mov	r2, r0
 8000300:	619a      	str	r2, [r3, #24]

	//using this Current_PSP (Pointer) tp store (R4 to R11)
	OS_Control.CurrentTask->Current_PSP-- ;
 8000302:	4b6c      	ldr	r3, [pc, #432]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000304:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000308:	699a      	ldr	r2, [r3, #24]
 800030a:	3a04      	subs	r2, #4
 800030c:	619a      	str	r2, [r3, #24]
	__asm("mov %0,r4" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 800030e:	4b69      	ldr	r3, [pc, #420]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000310:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000314:	699b      	ldr	r3, [r3, #24]
 8000316:	4622      	mov	r2, r4
 8000318:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 800031a:	4b66      	ldr	r3, [pc, #408]	; (80004b4 <PendSV_Handler+0x1c0>)
 800031c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000320:	699a      	ldr	r2, [r3, #24]
 8000322:	3a04      	subs	r2, #4
 8000324:	619a      	str	r2, [r3, #24]
	__asm("mov %0,r5" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000326:	4b63      	ldr	r3, [pc, #396]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000328:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800032c:	699b      	ldr	r3, [r3, #24]
 800032e:	462a      	mov	r2, r5
 8000330:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 8000332:	4b60      	ldr	r3, [pc, #384]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000334:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000338:	699a      	ldr	r2, [r3, #24]
 800033a:	3a04      	subs	r2, #4
 800033c:	619a      	str	r2, [r3, #24]
	__asm("mov %0,r6" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 800033e:	4b5d      	ldr	r3, [pc, #372]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000340:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	4632      	mov	r2, r6
 8000348:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 800034a:	4b5a      	ldr	r3, [pc, #360]	; (80004b4 <PendSV_Handler+0x1c0>)
 800034c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000350:	699a      	ldr	r2, [r3, #24]
 8000352:	3a04      	subs	r2, #4
 8000354:	619a      	str	r2, [r3, #24]
	__asm("mov %0,r7" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000356:	4b57      	ldr	r3, [pc, #348]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000358:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	463a      	mov	r2, r7
 8000360:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 8000362:	4b54      	ldr	r3, [pc, #336]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000364:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000368:	699a      	ldr	r2, [r3, #24]
 800036a:	3a04      	subs	r2, #4
 800036c:	619a      	str	r2, [r3, #24]
	__asm("mov %0,r8" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 800036e:	4b51      	ldr	r3, [pc, #324]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000370:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	4642      	mov	r2, r8
 8000378:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 800037a:	4b4e      	ldr	r3, [pc, #312]	; (80004b4 <PendSV_Handler+0x1c0>)
 800037c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000380:	699a      	ldr	r2, [r3, #24]
 8000382:	3a04      	subs	r2, #4
 8000384:	619a      	str	r2, [r3, #24]
	__asm("mov %0,r9" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000386:	4b4b      	ldr	r3, [pc, #300]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000388:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	464a      	mov	r2, r9
 8000390:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 8000392:	4b48      	ldr	r3, [pc, #288]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000394:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000398:	699a      	ldr	r2, [r3, #24]
 800039a:	3a04      	subs	r2, #4
 800039c:	619a      	str	r2, [r3, #24]
	__asm("mov %0,r10" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 800039e:	4b45      	ldr	r3, [pc, #276]	; (80004b4 <PendSV_Handler+0x1c0>)
 80003a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	4652      	mov	r2, sl
 80003a8:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 80003aa:	4b42      	ldr	r3, [pc, #264]	; (80004b4 <PendSV_Handler+0x1c0>)
 80003ac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80003b0:	699a      	ldr	r2, [r3, #24]
 80003b2:	3a04      	subs	r2, #4
 80003b4:	619a      	str	r2, [r3, #24]
	__asm("mov %0,r11" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 80003b6:	4b3f      	ldr	r3, [pc, #252]	; (80004b4 <PendSV_Handler+0x1c0>)
 80003b8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	465a      	mov	r2, fp
 80003c0:	601a      	str	r2, [r3, #0]


	//====================================
	//Restore the Context of the Next Task
	//====================================
	if(OS_Control.NextTask != NULL)
 80003c2:	4b3c      	ldr	r3, [pc, #240]	; (80004b4 <PendSV_Handler+0x1c0>)
 80003c4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d009      	beq.n	80003e0 <PendSV_Handler+0xec>
	{
		OS_Control.CurrentTask = OS_Control.NextTask ;
 80003cc:	4b39      	ldr	r3, [pc, #228]	; (80004b4 <PendSV_Handler+0x1c0>)
 80003ce:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80003d2:	4a38      	ldr	r2, [pc, #224]	; (80004b4 <PendSV_Handler+0x1c0>)
 80003d4:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
		OS_Control.NextTask = NULL ;
 80003d8:	4b36      	ldr	r3, [pc, #216]	; (80004b4 <PendSV_Handler+0x1c0>)
 80003da:	2200      	movs	r2, #0
 80003dc:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	}
	__asm("mov r11,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 80003e0:	4b34      	ldr	r3, [pc, #208]	; (80004b4 <PendSV_Handler+0x1c0>)
 80003e2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	469b      	mov	fp, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 80003ec:	4b31      	ldr	r3, [pc, #196]	; (80004b4 <PendSV_Handler+0x1c0>)
 80003ee:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80003f2:	699a      	ldr	r2, [r3, #24]
 80003f4:	3204      	adds	r2, #4
 80003f6:	619a      	str	r2, [r3, #24]
	__asm("mov r10,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 80003f8:	4b2e      	ldr	r3, [pc, #184]	; (80004b4 <PendSV_Handler+0x1c0>)
 80003fa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	469a      	mov	sl, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 8000404:	4b2b      	ldr	r3, [pc, #172]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000406:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800040a:	699a      	ldr	r2, [r3, #24]
 800040c:	3204      	adds	r2, #4
 800040e:	619a      	str	r2, [r3, #24]
	__asm("mov r9,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000410:	4b28      	ldr	r3, [pc, #160]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000412:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4699      	mov	r9, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 800041c:	4b25      	ldr	r3, [pc, #148]	; (80004b4 <PendSV_Handler+0x1c0>)
 800041e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000422:	699a      	ldr	r2, [r3, #24]
 8000424:	3204      	adds	r2, #4
 8000426:	619a      	str	r2, [r3, #24]
	__asm("mov r8,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000428:	4b22      	ldr	r3, [pc, #136]	; (80004b4 <PendSV_Handler+0x1c0>)
 800042a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4698      	mov	r8, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 8000434:	4b1f      	ldr	r3, [pc, #124]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000436:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800043a:	699a      	ldr	r2, [r3, #24]
 800043c:	3204      	adds	r2, #4
 800043e:	619a      	str	r2, [r3, #24]
	__asm("mov r7,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000440:	4b1c      	ldr	r3, [pc, #112]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000442:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	461f      	mov	r7, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 800044c:	4b19      	ldr	r3, [pc, #100]	; (80004b4 <PendSV_Handler+0x1c0>)
 800044e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000452:	699a      	ldr	r2, [r3, #24]
 8000454:	3204      	adds	r2, #4
 8000456:	619a      	str	r2, [r3, #24]
	__asm("mov r6,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000458:	4b16      	ldr	r3, [pc, #88]	; (80004b4 <PendSV_Handler+0x1c0>)
 800045a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	461e      	mov	r6, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 8000464:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000466:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800046a:	699a      	ldr	r2, [r3, #24]
 800046c:	3204      	adds	r2, #4
 800046e:	619a      	str	r2, [r3, #24]
	__asm("mov r5,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000470:	4b10      	ldr	r3, [pc, #64]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000472:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	461d      	mov	r5, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 800047c:	4b0d      	ldr	r3, [pc, #52]	; (80004b4 <PendSV_Handler+0x1c0>)
 800047e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000482:	699a      	ldr	r2, [r3, #24]
 8000484:	3204      	adds	r2, #4
 8000486:	619a      	str	r2, [r3, #24]
	__asm("mov r4,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000488:	4b0a      	ldr	r3, [pc, #40]	; (80004b4 <PendSV_Handler+0x1c0>)
 800048a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	461c      	mov	r4, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 8000494:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000496:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800049a:	699a      	ldr	r2, [r3, #24]
 800049c:	3204      	adds	r2, #4
 800049e:	619a      	str	r2, [r3, #24]

	//Update PSP and exit
	OS_SET_PSP(OS_Control.CurrentTask->Current_PSP);
 80004a0:	4b04      	ldr	r3, [pc, #16]	; (80004b4 <PendSV_Handler+0x1c0>)
 80004a2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4618      	mov	r0, r3
 80004aa:	f380 8809 	msr	PSP, r0
	__asm("BX LR");
 80004ae:	4770      	bx	lr


}
 80004b0:	bf00      	nop
 80004b2:	bf00      	nop
 80004b4:	200000b0 	.word	0x200000b0

080004b8 <bubbleSort>:
	return error ;
}

//Handler mode
void bubbleSort()
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
	unsigned int i, j , n;
	Task_ref* temp ;
	n = OS_Control.NoOfActiveTasks ;
 80004be:	4b21      	ldr	r3, [pc, #132]	; (8000544 <bubbleSort+0x8c>)
 80004c0:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80004c4:	607b      	str	r3, [r7, #4]
	for (i = 0; i < n - 1; i++)
 80004c6:	2300      	movs	r3, #0
 80004c8:	60fb      	str	r3, [r7, #12]
 80004ca:	e030      	b.n	800052e <bubbleSort+0x76>

		// Last i elements are already in place
		for (j = 0; j < n - i - 1; j++)
 80004cc:	2300      	movs	r3, #0
 80004ce:	60bb      	str	r3, [r7, #8]
 80004d0:	e023      	b.n	800051a <bubbleSort+0x62>
			if (OS_Control.OSTasks[j]->priority > OS_Control.OSTasks[j + 1]->priority)
 80004d2:	4a1c      	ldr	r2, [pc, #112]	; (8000544 <bubbleSort+0x8c>)
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004da:	791a      	ldrb	r2, [r3, #4]
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	3301      	adds	r3, #1
 80004e0:	4918      	ldr	r1, [pc, #96]	; (8000544 <bubbleSort+0x8c>)
 80004e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004e6:	791b      	ldrb	r3, [r3, #4]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d913      	bls.n	8000514 <bubbleSort+0x5c>
			{
				temp = OS_Control.OSTasks[j] ;
 80004ec:	4a15      	ldr	r2, [pc, #84]	; (8000544 <bubbleSort+0x8c>)
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004f4:	603b      	str	r3, [r7, #0]
				OS_Control.OSTasks[j] = OS_Control.OSTasks[j + 1 ] ;
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	3301      	adds	r3, #1
 80004fa:	4a12      	ldr	r2, [pc, #72]	; (8000544 <bubbleSort+0x8c>)
 80004fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000500:	4910      	ldr	r1, [pc, #64]	; (8000544 <bubbleSort+0x8c>)
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control.OSTasks[j + 1] = temp ;
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	3301      	adds	r3, #1
 800050c:	490d      	ldr	r1, [pc, #52]	; (8000544 <bubbleSort+0x8c>)
 800050e:	683a      	ldr	r2, [r7, #0]
 8000510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (j = 0; j < n - i - 1; j++)
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	3301      	adds	r3, #1
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	687a      	ldr	r2, [r7, #4]
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	1ad3      	subs	r3, r2, r3
 8000520:	3b01      	subs	r3, #1
 8000522:	68ba      	ldr	r2, [r7, #8]
 8000524:	429a      	cmp	r2, r3
 8000526:	d3d4      	bcc.n	80004d2 <bubbleSort+0x1a>
	for (i = 0; i < n - 1; i++)
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	3301      	adds	r3, #1
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	3b01      	subs	r3, #1
 8000532:	68fa      	ldr	r2, [r7, #12]
 8000534:	429a      	cmp	r2, r3
 8000536:	d3c9      	bcc.n	80004cc <bubbleSort+0x14>
			}

}
 8000538:	bf00      	nop
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	200000b0 	.word	0x200000b0

08000548 <MYRTOS_Update_Schadule_Tables>:

//Handler mode
void MYRTOS_Update_Schadule_Tables()
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
	Task_ref* temp = NULL ;
 800054e:	2300      	movs	r3, #0
 8000550:	603b      	str	r3, [r7, #0]
	Task_ref* Ptask ;
	Task_ref* PnextTask ;
	int i = 0 ;
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]

	//1- bubble sort SchTable OS_Control-> OSTASKS[100] (priority high then low)
	bubbleSort();
 8000556:	f7ff ffaf 	bl	80004b8 <bubbleSort>

	//2- free Ready Queue
	while(FIFO_dequeue(&Ready_QUEUE, &temp /*pointer to pointer*/)!=FIFO_EMPTY);
 800055a:	bf00      	nop
 800055c:	463b      	mov	r3, r7
 800055e:	4619      	mov	r1, r3
 8000560:	482b      	ldr	r0, [pc, #172]	; (8000610 <MYRTOS_Update_Schadule_Tables+0xc8>)
 8000562:	f7ff fe89 	bl	8000278 <FIFO_dequeue>
 8000566:	4603      	mov	r3, r0
 8000568:	2b02      	cmp	r3, #2
 800056a:	d1f7      	bne.n	800055c <MYRTOS_Update_Schadule_Tables+0x14>

	//3- update ready queue
	while(i< OS_Control.NoOfActiveTasks)
 800056c:	e044      	b.n	80005f8 <MYRTOS_Update_Schadule_Tables+0xb0>
	{
		Ptask = OS_Control.OSTasks[i] ;
 800056e:	4a29      	ldr	r2, [pc, #164]	; (8000614 <MYRTOS_Update_Schadule_Tables+0xcc>)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000576:	60bb      	str	r3, [r7, #8]
		PnextTask = OS_Control.OSTasks[i+1] ;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	3301      	adds	r3, #1
 800057c:	4a25      	ldr	r2, [pc, #148]	; (8000614 <MYRTOS_Update_Schadule_Tables+0xcc>)
 800057e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000582:	607b      	str	r3, [r7, #4]
		if (Ptask->TaskState != Suspend)
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800058a:	2b00      	cmp	r3, #0
 800058c:	d031      	beq.n	80005f2 <MYRTOS_Update_Schadule_Tables+0xaa>
		{
			//In case of reaching to the end of available OSTASKS
			if (PnextTask->TaskState == Suspend)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000594:	2b00      	cmp	r3, #0
 8000596:	d108      	bne.n	80005aa <MYRTOS_Update_Schadule_Tables+0x62>
			{
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 8000598:	68b9      	ldr	r1, [r7, #8]
 800059a:	481d      	ldr	r0, [pc, #116]	; (8000610 <MYRTOS_Update_Schadule_Tables+0xc8>)
 800059c:	f7ff fe2a 	bl	80001f4 <FIFO_enqueue>
				Ptask->TaskState = ready ;
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	2203      	movs	r2, #3
 80005a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break ;
 80005a8:	e02e      	b.n	8000608 <MYRTOS_Update_Schadule_Tables+0xc0>
			}
			//If Ptask Priority > PnextTask Priority then (lowest number is meaning higher priority)
			if (Ptask->priority < PnextTask->priority )
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	791a      	ldrb	r2, [r3, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	791b      	ldrb	r3, [r3, #4]
 80005b2:	429a      	cmp	r2, r3
 80005b4:	d208      	bcs.n	80005c8 <MYRTOS_Update_Schadule_Tables+0x80>
			{
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 80005b6:	68b9      	ldr	r1, [r7, #8]
 80005b8:	4815      	ldr	r0, [pc, #84]	; (8000610 <MYRTOS_Update_Schadule_Tables+0xc8>)
 80005ba:	f7ff fe1b 	bl	80001f4 <FIFO_enqueue>
				Ptask->TaskState = ready ;
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	2203      	movs	r2, #3
 80005c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break ;
 80005c6:	e01f      	b.n	8000608 <MYRTOS_Update_Schadule_Tables+0xc0>
			}
			else if (Ptask->priority == PnextTask->priority)
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	791a      	ldrb	r2, [r3, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	791b      	ldrb	r3, [r3, #4]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d108      	bne.n	80005e6 <MYRTOS_Update_Schadule_Tables+0x9e>
			{
				//if the Ptask priority == PnextTask Priority then
				//Push Ptask to ready state
				//make the Ptask = PnextTask and PnextTask++
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 80005d4:	68b9      	ldr	r1, [r7, #8]
 80005d6:	480e      	ldr	r0, [pc, #56]	; (8000610 <MYRTOS_Update_Schadule_Tables+0xc8>)
 80005d8:	f7ff fe0c 	bl	80001f4 <FIFO_enqueue>
				Ptask->TaskState = ready ;
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	2203      	movs	r2, #3
 80005e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80005e4:	e005      	b.n	80005f2 <MYRTOS_Update_Schadule_Tables+0xaa>
			}
			else if (Ptask->priority > PnextTask->priority)
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	791a      	ldrb	r2, [r3, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	791b      	ldrb	r3, [r3, #4]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d809      	bhi.n	8000606 <MYRTOS_Update_Schadule_Tables+0xbe>
				break ;
			}
		}


		i++ ;
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	3301      	adds	r3, #1
 80005f6:	60fb      	str	r3, [r7, #12]
	while(i< OS_Control.NoOfActiveTasks)
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <MYRTOS_Update_Schadule_Tables+0xcc>)
 80005fa:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	429a      	cmp	r2, r3
 8000602:	d8b4      	bhi.n	800056e <MYRTOS_Update_Schadule_Tables+0x26>
	}

}
 8000604:	e000      	b.n	8000608 <MYRTOS_Update_Schadule_Tables+0xc0>
				break ;
 8000606:	bf00      	nop
}
 8000608:	bf00      	nop
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000260 	.word	0x20000260
 8000614:	200000b0 	.word	0x200000b0

08000618 <Decide_WhatNext>:

//Handler mode
void Decide_WhatNext()
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	//If Ready Queue is empty && OS_Control->currentTask != suspend
	if (Ready_QUEUE.counter == 0 && OS_Control.CurrentTask->TaskState != Suspend) //FIFO_EMPTY
 800061c:	4b24      	ldr	r3, [pc, #144]	; (80006b0 <Decide_WhatNext+0x98>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d11a      	bne.n	800065a <Decide_WhatNext+0x42>
 8000624:	4b23      	ldr	r3, [pc, #140]	; (80006b4 <Decide_WhatNext+0x9c>)
 8000626:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800062a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800062e:	2b00      	cmp	r3, #0
 8000630:	d013      	beq.n	800065a <Decide_WhatNext+0x42>
	{
		OS_Control.CurrentTask->TaskState = Running ;
 8000632:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <Decide_WhatNext+0x9c>)
 8000634:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000638:	2201      	movs	r2, #1
 800063a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		//Add the current task again(round robin)
		FIFO_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
 800063e:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <Decide_WhatNext+0x9c>)
 8000640:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000644:	4619      	mov	r1, r3
 8000646:	481a      	ldr	r0, [pc, #104]	; (80006b0 <Decide_WhatNext+0x98>)
 8000648:	f7ff fdd4 	bl	80001f4 <FIFO_enqueue>
		OS_Control.NextTask = OS_Control.CurrentTask ;
 800064c:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <Decide_WhatNext+0x9c>)
 800064e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000652:	4a18      	ldr	r2, [pc, #96]	; (80006b4 <Decide_WhatNext+0x9c>)
 8000654:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		{
			FIFO_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
			OS_Control.CurrentTask->TaskState = ready ;
		}
	}
}
 8000658:	e027      	b.n	80006aa <Decide_WhatNext+0x92>
		FIFO_dequeue(&Ready_QUEUE, &OS_Control.NextTask);
 800065a:	4917      	ldr	r1, [pc, #92]	; (80006b8 <Decide_WhatNext+0xa0>)
 800065c:	4814      	ldr	r0, [pc, #80]	; (80006b0 <Decide_WhatNext+0x98>)
 800065e:	f7ff fe0b 	bl	8000278 <FIFO_dequeue>
		OS_Control.NextTask->TaskState = Running ;
 8000662:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <Decide_WhatNext+0x9c>)
 8000664:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000668:	2201      	movs	r2, #1
 800066a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		if ((OS_Control.CurrentTask->priority == OS_Control.NextTask->priority )&&(OS_Control.CurrentTask->TaskState != Suspend))
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <Decide_WhatNext+0x9c>)
 8000670:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000674:	791a      	ldrb	r2, [r3, #4]
 8000676:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <Decide_WhatNext+0x9c>)
 8000678:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800067c:	791b      	ldrb	r3, [r3, #4]
 800067e:	429a      	cmp	r2, r3
 8000680:	d113      	bne.n	80006aa <Decide_WhatNext+0x92>
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <Decide_WhatNext+0x9c>)
 8000684:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000688:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800068c:	2b00      	cmp	r3, #0
 800068e:	d00c      	beq.n	80006aa <Decide_WhatNext+0x92>
			FIFO_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <Decide_WhatNext+0x9c>)
 8000692:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000696:	4619      	mov	r1, r3
 8000698:	4805      	ldr	r0, [pc, #20]	; (80006b0 <Decide_WhatNext+0x98>)
 800069a:	f7ff fdab 	bl	80001f4 <FIFO_enqueue>
			OS_Control.CurrentTask->TaskState = ready ;
 800069e:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <Decide_WhatNext+0x9c>)
 80006a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006a4:	2203      	movs	r2, #3
 80006a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000260 	.word	0x20000260
 80006b4:	200000b0 	.word	0x200000b0
 80006b8:	20000254 	.word	0x20000254

080006bc <OS_SVC>:


//Handler mode
void OS_SVC(int* StackFramePointer)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	//OS_SVC_Set stack start found in -> r0 , r0 is pointed by StackFramePointer
	//OS_SVC_Set stack : r0,r1,r2,r12,LR,PC,XPSR

	unsigned char SVC_number ;

	SVC_number = *((unsigned char*)(((unsigned char*)StackFramePointer[6])-2)) ;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	3318      	adds	r3, #24
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	3b02      	subs	r3, #2
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	73fb      	strb	r3, [r7, #15]

	switch(SVC_number)
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	db1f      	blt.n	8000716 <OS_SVC+0x5a>
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	dd02      	ble.n	80006e0 <OS_SVC+0x24>
 80006da:	2b02      	cmp	r3, #2
 80006dc:	d017      	beq.n	800070e <OS_SVC+0x52>
		//Update Scheduler Table , Ready Queue
		MYRTOS_Update_Schadule_Tables();
		break ;
	}

}
 80006de:	e01a      	b.n	8000716 <OS_SVC+0x5a>
		MYRTOS_Update_Schadule_Tables();
 80006e0:	f7ff ff32 	bl	8000548 <MYRTOS_Update_Schadule_Tables>
		if (OS_Control.OSmodeID == OSRunning)
 80006e4:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <OS_SVC+0x64>)
 80006e6:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d112      	bne.n	8000714 <OS_SVC+0x58>
			if (strcmp(OS_Control.CurrentTask->TaskName,"IdleTask") != 0)
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <OS_SVC+0x64>)
 80006f0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006f4:	331c      	adds	r3, #28
 80006f6:	490b      	ldr	r1, [pc, #44]	; (8000724 <OS_SVC+0x68>)
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff fd39 	bl	8000170 <strcmp>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d007      	beq.n	8000714 <OS_SVC+0x58>
				Decide_WhatNext();
 8000704:	f7ff ff88 	bl	8000618 <Decide_WhatNext>
				trigger_OS_PendSV();
 8000708:	f7ff fd52 	bl	80001b0 <trigger_OS_PendSV>
		break ;
 800070c:	e002      	b.n	8000714 <OS_SVC+0x58>
		MYRTOS_Update_Schadule_Tables();
 800070e:	f7ff ff1b 	bl	8000548 <MYRTOS_Update_Schadule_Tables>
		break ;
 8000712:	e000      	b.n	8000716 <OS_SVC+0x5a>
		break ;
 8000714:	bf00      	nop
}
 8000716:	bf00      	nop
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200000b0 	.word	0x200000b0
 8000724:	080012bc 	.word	0x080012bc

08000728 <MYRTOS_OS_SVC_Set>:

//Thread mode
void MYRTOS_OS_SVC_Set(SVC_ID ID)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
	switch(ID)
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d006      	beq.n	8000746 <MYRTOS_OS_SVC_Set+0x1e>
 8000738:	2b02      	cmp	r3, #2
 800073a:	d006      	beq.n	800074a <MYRTOS_OS_SVC_Set+0x22>
 800073c:	2b00      	cmp	r3, #0
 800073e:	d000      	beq.n	8000742 <MYRTOS_OS_SVC_Set+0x1a>
	case SVC_TaskWaiting :
		__asm("svc #0x02");

		break ;
	}
}
 8000740:	e005      	b.n	800074e <MYRTOS_OS_SVC_Set+0x26>
		__asm("svc #0x00");
 8000742:	df00      	svc	0
		break ;
 8000744:	e003      	b.n	800074e <MYRTOS_OS_SVC_Set+0x26>
		__asm("svc #0x01");
 8000746:	df01      	svc	1
		break ;
 8000748:	e001      	b.n	800074e <MYRTOS_OS_SVC_Set+0x26>
		__asm("svc #0x02");
 800074a:	df02      	svc	2
		break ;
 800074c:	bf00      	nop
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr

08000758 <MYRTOS_Update_TaskWaiting_Time>:
	MYRTOS_idleTask.p_TaskEntry();
}


void MYRTOS_Update_TaskWaiting_Time()
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
	int i ;
	for (i = 0 ; i < OS_Control.NoOfActiveTasks ; i++)
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	e031      	b.n	80007c8 <MYRTOS_Update_TaskWaiting_Time+0x70>
	{
		if ((OS_Control.OSTasks[i]->TaskState == Suspend) && (OS_Control.OSTasks[i]->TimingWaiting.Blocking == Enable ))
 8000764:	4a1d      	ldr	r2, [pc, #116]	; (80007dc <MYRTOS_Update_TaskWaiting_Time+0x84>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800076c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000770:	2b00      	cmp	r3, #0
 8000772:	d126      	bne.n	80007c2 <MYRTOS_Update_TaskWaiting_Time+0x6a>
 8000774:	4a19      	ldr	r2, [pc, #100]	; (80007dc <MYRTOS_Update_TaskWaiting_Time+0x84>)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800077c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000780:	2b00      	cmp	r3, #0
 8000782:	d11e      	bne.n	80007c2 <MYRTOS_Update_TaskWaiting_Time+0x6a>
		{
			OS_Control.OSTasks[i]->TimingWaiting.Ticks_Count-- ;
 8000784:	4a15      	ldr	r2, [pc, #84]	; (80007dc <MYRTOS_Update_TaskWaiting_Time+0x84>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800078c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800078e:	3a01      	subs	r2, #1
 8000790:	641a      	str	r2, [r3, #64]	; 0x40

			if(OS_Control.OSTasks[i]->TimingWaiting.Ticks_Count == 0)
 8000792:	4a12      	ldr	r2, [pc, #72]	; (80007dc <MYRTOS_Update_TaskWaiting_Time+0x84>)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	2b00      	cmp	r3, #0
 800079e:	d110      	bne.n	80007c2 <MYRTOS_Update_TaskWaiting_Time+0x6a>
			{
				OS_Control.OSTasks[i]->TimingWaiting.Blocking = Disable ;
 80007a0:	4a0e      	ldr	r2, [pc, #56]	; (80007dc <MYRTOS_Update_TaskWaiting_Time+0x84>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007a8:	2201      	movs	r2, #1
 80007aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				OS_Control.OSTasks[i]->TaskState = Waiting ;
 80007ae:	4a0b      	ldr	r2, [pc, #44]	; (80007dc <MYRTOS_Update_TaskWaiting_Time+0x84>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b6:	2202      	movs	r2, #2
 80007b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				MYRTOS_OS_SVC_Set(SVC_TaskWaiting);
 80007bc:	2002      	movs	r0, #2
 80007be:	f7ff ffb3 	bl	8000728 <MYRTOS_OS_SVC_Set>
	for (i = 0 ; i < OS_Control.NoOfActiveTasks ; i++)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	3301      	adds	r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	4b04      	ldr	r3, [pc, #16]	; (80007dc <MYRTOS_Update_TaskWaiting_Time+0x84>)
 80007ca:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d8c7      	bhi.n	8000764 <MYRTOS_Update_TaskWaiting_Time+0xc>
			}
		}
	}
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200000b0 	.word	0x200000b0

080007e0 <clock_init>:
#include "Delay.h"



void clock_init(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

	//Enable clock to AFIO
	AFIO_GPIO_CLK_EN();
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <clock_init+0x30>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	4a09      	ldr	r2, [pc, #36]	; (8000810 <clock_init+0x30>)
 80007ea:	f043 0301 	orr.w	r3, r3, #1
 80007ee:	6193      	str	r3, [r2, #24]
	//Enable clock to port A
	RCC_GPIOA_CLK_EN();
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <clock_init+0x30>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	4a06      	ldr	r2, [pc, #24]	; (8000810 <clock_init+0x30>)
 80007f6:	f043 0304 	orr.w	r3, r3, #4
 80007fa:	6193      	str	r3, [r2, #24]
	//Enable clock to port B
	RCC_GPIOB_CLK_EN();
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <clock_init+0x30>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	4a03      	ldr	r2, [pc, #12]	; (8000810 <clock_init+0x30>)
 8000802:	f043 0308 	orr.w	r3, r3, #8
 8000806:	6193      	str	r3, [r2, #24]


}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr
 8000810:	40021000 	.word	0x40021000

08000814 <main>:
//  }
//  counter ++ ;
//}

int main(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
	clock_init();
 800081a:	f7ff ffe1 	bl	80007e0 <clock_init>
	HAL_Delay_Init();
 800081e:	f000 f83b 	bl	8000898 <HAL_Delay_Init>

	GPIO_PinConfig_t PinConfig ;
	//toggle--> PA1
	PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 8000822:	2302      	movs	r3, #2
 8000824:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000826:	2306      	movs	r3, #6
 8000828:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10M;
 800082a:	2301      	movs	r3, #1
 800082c:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOA, &PinConfig);
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	4619      	mov	r1, r3
 8000832:	4803      	ldr	r0, [pc, #12]	; (8000840 <main+0x2c>)
 8000834:	f000 f9ef 	bl	8000c16 <MCAL_GPIO_Init>

	while (1)
	{
		//MCAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1) ;

		Delay_us(10);
 8000838:	200a      	movs	r0, #10
 800083a:	f000 f84f 	bl	80008dc <Delay_us>
 800083e:	e7fb      	b.n	8000838 <main+0x24>
 8000840:	40010800 	.word	0x40010800

08000844 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000844:	480d      	ldr	r0, [pc, #52]	; (800087c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000846:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000848:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800084c:	480c      	ldr	r0, [pc, #48]	; (8000880 <LoopForever+0x6>)
  ldr r1, =_edata
 800084e:	490d      	ldr	r1, [pc, #52]	; (8000884 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000850:	4a0d      	ldr	r2, [pc, #52]	; (8000888 <LoopForever+0xe>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000854:	e002      	b.n	800085c <LoopCopyDataInit>

08000856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085a:	3304      	adds	r3, #4

0800085c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800085c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000860:	d3f9      	bcc.n	8000856 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000862:	4a0a      	ldr	r2, [pc, #40]	; (800088c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000864:	4c0a      	ldr	r4, [pc, #40]	; (8000890 <LoopForever+0x16>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000868:	e001      	b.n	800086e <LoopFillZerobss>

0800086a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800086c:	3204      	adds	r2, #4

0800086e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000870:	d3fb      	bcc.n	800086a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000872:	f000 fcf3 	bl	800125c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000876:	f7ff ffcd 	bl	8000814 <main>

0800087a <LoopForever>:

LoopForever:
    b LoopForever
 800087a:	e7fe      	b.n	800087a <LoopForever>
  ldr   r0, =_estack
 800087c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000884:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000888:	080012d0 	.word	0x080012d0
  ldr r2, =_sbss
 800088c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000890:	20000488 	.word	0x20000488

08000894 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000894:	e7fe      	b.n	8000894 <ADC1_2_IRQHandler>
	...

08000898 <HAL_Delay_Init>:
 * @param [in]   -TIMx :  were x can be (1,2,3,4 depending on device used)to select the Timer Peripheral
 * @retval		 -none
 * Note			 -none
 */
void HAL_Delay_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	Delay_timer_config.TIM_Mode = TIM_Mode_UP_Count ;
 800089c:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <HAL_Delay_Init+0x40>)
 800089e:	2201      	movs	r2, #1
 80008a0:	801a      	strh	r2, [r3, #0]
	Delay_timer_config.Prescaler = 8 ;
 80008a2:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <HAL_Delay_Init+0x40>)
 80008a4:	2208      	movs	r2, #8
 80008a6:	805a      	strh	r2, [r3, #2]
	Delay_timer_config.Auto_Reload_Value = 0xFFFF ;
 80008a8:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <HAL_Delay_Init+0x40>)
 80008aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ae:	80da      	strh	r2, [r3, #6]
	Delay_timer_config.Auto_Reload_status = TIM_Auto_Reload_Not_Bufferd ;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <HAL_Delay_Init+0x40>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	809a      	strh	r2, [r3, #4]
	Delay_timer_config.IRQ_Enable = TIM_IRQ_MODE_None  ;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <HAL_Delay_Init+0x40>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	811a      	strh	r2, [r3, #8]
	Delay_timer_config.P_IRQ_CallBack = NULL ;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <HAL_Delay_Init+0x40>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]

	MCAL_TIM_Init(DELAY_Timer,&Delay_timer_config);
 80008c2:	4905      	ldr	r1, [pc, #20]	; (80008d8 <HAL_Delay_Init+0x40>)
 80008c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80008c8:	f000 fb74 	bl	8000fb4 <MCAL_TIM_Init>
	MCAL_TIM_Count_Reset(DELAY_Timer);
 80008cc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80008d0:	f000 fc6a 	bl	80011a8 <MCAL_TIM_Count_Reset>
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000448 	.word	0x20000448

080008dc <Delay_us>:




void Delay_us(uint16_t Num)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	80fb      	strh	r3, [r7, #6]

	DELAY_Timer->ARR = Num;
 80008e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ea:	88fb      	ldrh	r3, [r7, #6]
 80008ec:	62d3      	str	r3, [r2, #44]	; 0x2c
	MCAL_TIM_Count_Reset(DELAY_Timer);
 80008ee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80008f2:	f000 fc59 	bl	80011a8 <MCAL_TIM_Count_Reset>
	MCAL_TIM_Start(DELAY_Timer);
 80008f6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80008fa:	f000 fc2d 	bl	8001158 <MCAL_TIM_Start>
UDIS=0 in the TIMx_CR1 register.
– When CNT is reinitialized by a trigger event (refer to the synchro control register description),
if URS=0 and UDIS=0 in the TIMx_CR1 register.
	*/

	while(GET_BIT(DELAY_Timer->SR,0) == 0);
 80008fe:	bf00      	nop
 8000900:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000904:	691b      	ldr	r3, [r3, #16]
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	2b00      	cmp	r3, #0
 800090c:	d0f8      	beq.n	8000900 <Delay_us+0x24>
	MCAL_TIM_Stop(DELAY_Timer);
 800090e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000912:	f000 fc35 	bl	8001180 <MCAL_TIM_Stop>
	CLR_BIT(DELAY_Timer->SR,0);
 8000916:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800091a:	691b      	ldr	r3, [r3, #16]
 800091c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000920:	f023 0301 	bic.w	r3, r3, #1
 8000924:	6113      	str	r3, [r2, #16]


}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <EXTI0_IRQHandler>:
 * =====================================================================================
 */


void EXTI0_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	// cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= 1<<0;
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <EXTI0_IRQHandler+0x1c>)
 8000936:	695b      	ldr	r3, [r3, #20]
 8000938:	4a04      	ldr	r2, [pc, #16]	; (800094c <EXTI0_IRQHandler+0x1c>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	6153      	str	r3, [r2, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[0]();
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <EXTI0_IRQHandler+0x20>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4798      	blx	r3
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40010400 	.word	0x40010400
 8000950:	2000001c 	.word	0x2000001c

08000954 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <EXTI1_IRQHandler+0x1c>)
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	4a04      	ldr	r2, [pc, #16]	; (8000970 <EXTI1_IRQHandler+0x1c>)
 800095e:	f043 0302 	orr.w	r3, r3, #2
 8000962:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 8000964:	4b03      	ldr	r3, [pc, #12]	; (8000974 <EXTI1_IRQHandler+0x20>)
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	4798      	blx	r3
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40010400 	.word	0x40010400
 8000974:	2000001c 	.word	0x2000001c

08000978 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <EXTI2_IRQHandler+0x1c>)
 800097e:	695b      	ldr	r3, [r3, #20]
 8000980:	4a04      	ldr	r2, [pc, #16]	; (8000994 <EXTI2_IRQHandler+0x1c>)
 8000982:	f043 0304 	orr.w	r3, r3, #4
 8000986:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 8000988:	4b03      	ldr	r3, [pc, #12]	; (8000998 <EXTI2_IRQHandler+0x20>)
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	4798      	blx	r3
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40010400 	.word	0x40010400
 8000998:	2000001c 	.word	0x2000001c

0800099c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <EXTI3_IRQHandler+0x1c>)
 80009a2:	695b      	ldr	r3, [r3, #20]
 80009a4:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <EXTI3_IRQHandler+0x1c>)
 80009a6:	f043 0308 	orr.w	r3, r3, #8
 80009aa:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 80009ac:	4b03      	ldr	r3, [pc, #12]	; (80009bc <EXTI3_IRQHandler+0x20>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	4798      	blx	r3
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40010400 	.word	0x40010400
 80009bc:	2000001c 	.word	0x2000001c

080009c0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <EXTI4_IRQHandler+0x1c>)
 80009c6:	695b      	ldr	r3, [r3, #20]
 80009c8:	4a04      	ldr	r2, [pc, #16]	; (80009dc <EXTI4_IRQHandler+0x1c>)
 80009ca:	f043 0310 	orr.w	r3, r3, #16
 80009ce:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 80009d0:	4b03      	ldr	r3, [pc, #12]	; (80009e0 <EXTI4_IRQHandler+0x20>)
 80009d2:	691b      	ldr	r3, [r3, #16]
 80009d4:	4798      	blx	r3
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40010400 	.word	0x40010400
 80009e0:	2000001c 	.word	0x2000001c

080009e4 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<5 ) { EXTI->PR |= 1<<5; GP_IRQ_CallBack[5](); }
 80009e8:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <EXTI9_5_IRQHandler+0xa0>)
 80009ea:	695b      	ldr	r3, [r3, #20]
 80009ec:	f003 0320 	and.w	r3, r3, #32
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d008      	beq.n	8000a06 <EXTI9_5_IRQHandler+0x22>
 80009f4:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <EXTI9_5_IRQHandler+0xa0>)
 80009f6:	695b      	ldr	r3, [r3, #20]
 80009f8:	4a22      	ldr	r2, [pc, #136]	; (8000a84 <EXTI9_5_IRQHandler+0xa0>)
 80009fa:	f043 0320 	orr.w	r3, r3, #32
 80009fe:	6153      	str	r3, [r2, #20]
 8000a00:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <EXTI9_5_IRQHandler+0xa4>)
 8000a02:	695b      	ldr	r3, [r3, #20]
 8000a04:	4798      	blx	r3
	if( EXTI->PR & 1<<6 ) { EXTI->PR |= 1<<6; GP_IRQ_CallBack[6](); }
 8000a06:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <EXTI9_5_IRQHandler+0xa0>)
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d008      	beq.n	8000a24 <EXTI9_5_IRQHandler+0x40>
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <EXTI9_5_IRQHandler+0xa0>)
 8000a14:	695b      	ldr	r3, [r3, #20]
 8000a16:	4a1b      	ldr	r2, [pc, #108]	; (8000a84 <EXTI9_5_IRQHandler+0xa0>)
 8000a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a1c:	6153      	str	r3, [r2, #20]
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <EXTI9_5_IRQHandler+0xa4>)
 8000a20:	699b      	ldr	r3, [r3, #24]
 8000a22:	4798      	blx	r3
	if( EXTI->PR & 1<<7 ) { EXTI->PR |= 1<<7; GP_IRQ_CallBack[7](); }
 8000a24:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <EXTI9_5_IRQHandler+0xa0>)
 8000a26:	695b      	ldr	r3, [r3, #20]
 8000a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d008      	beq.n	8000a42 <EXTI9_5_IRQHandler+0x5e>
 8000a30:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <EXTI9_5_IRQHandler+0xa0>)
 8000a32:	695b      	ldr	r3, [r3, #20]
 8000a34:	4a13      	ldr	r2, [pc, #76]	; (8000a84 <EXTI9_5_IRQHandler+0xa0>)
 8000a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a3a:	6153      	str	r3, [r2, #20]
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <EXTI9_5_IRQHandler+0xa4>)
 8000a3e:	69db      	ldr	r3, [r3, #28]
 8000a40:	4798      	blx	r3
	if( EXTI->PR & 1<<8 ) { EXTI->PR |= 1<<8; GP_IRQ_CallBack[8](); }
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <EXTI9_5_IRQHandler+0xa0>)
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d008      	beq.n	8000a60 <EXTI9_5_IRQHandler+0x7c>
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <EXTI9_5_IRQHandler+0xa0>)
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	4a0c      	ldr	r2, [pc, #48]	; (8000a84 <EXTI9_5_IRQHandler+0xa0>)
 8000a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a58:	6153      	str	r3, [r2, #20]
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <EXTI9_5_IRQHandler+0xa4>)
 8000a5c:	6a1b      	ldr	r3, [r3, #32]
 8000a5e:	4798      	blx	r3
	if( EXTI->PR & 1<<9 ) { EXTI->PR |= 1<<9; GP_IRQ_CallBack[9](); }
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <EXTI9_5_IRQHandler+0xa0>)
 8000a62:	695b      	ldr	r3, [r3, #20]
 8000a64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d008      	beq.n	8000a7e <EXTI9_5_IRQHandler+0x9a>
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <EXTI9_5_IRQHandler+0xa0>)
 8000a6e:	695b      	ldr	r3, [r3, #20]
 8000a70:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <EXTI9_5_IRQHandler+0xa0>)
 8000a72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a76:	6153      	str	r3, [r2, #20]
 8000a78:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <EXTI9_5_IRQHandler+0xa4>)
 8000a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a7c:	4798      	blx	r3
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40010400 	.word	0x40010400
 8000a88:	2000001c 	.word	0x2000001c

08000a8c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<10 ) { EXTI->PR |= 1<<10; GP_IRQ_CallBack[10](); }
 8000a90:	4b2d      	ldr	r3, [pc, #180]	; (8000b48 <EXTI15_10_IRQHandler+0xbc>)
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d008      	beq.n	8000aae <EXTI15_10_IRQHandler+0x22>
 8000a9c:	4b2a      	ldr	r3, [pc, #168]	; (8000b48 <EXTI15_10_IRQHandler+0xbc>)
 8000a9e:	695b      	ldr	r3, [r3, #20]
 8000aa0:	4a29      	ldr	r2, [pc, #164]	; (8000b48 <EXTI15_10_IRQHandler+0xbc>)
 8000aa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aa6:	6153      	str	r3, [r2, #20]
 8000aa8:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <EXTI15_10_IRQHandler+0xc0>)
 8000aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aac:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= 1<<11; GP_IRQ_CallBack[11](); }
 8000aae:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <EXTI15_10_IRQHandler+0xbc>)
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d008      	beq.n	8000acc <EXTI15_10_IRQHandler+0x40>
 8000aba:	4b23      	ldr	r3, [pc, #140]	; (8000b48 <EXTI15_10_IRQHandler+0xbc>)
 8000abc:	695b      	ldr	r3, [r3, #20]
 8000abe:	4a22      	ldr	r2, [pc, #136]	; (8000b48 <EXTI15_10_IRQHandler+0xbc>)
 8000ac0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ac4:	6153      	str	r3, [r2, #20]
 8000ac6:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <EXTI15_10_IRQHandler+0xc0>)
 8000ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aca:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= 1<<12; GP_IRQ_CallBack[12](); }
 8000acc:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <EXTI15_10_IRQHandler+0xbc>)
 8000ace:	695b      	ldr	r3, [r3, #20]
 8000ad0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d008      	beq.n	8000aea <EXTI15_10_IRQHandler+0x5e>
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <EXTI15_10_IRQHandler+0xbc>)
 8000ada:	695b      	ldr	r3, [r3, #20]
 8000adc:	4a1a      	ldr	r2, [pc, #104]	; (8000b48 <EXTI15_10_IRQHandler+0xbc>)
 8000ade:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ae2:	6153      	str	r3, [r2, #20]
 8000ae4:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <EXTI15_10_IRQHandler+0xc0>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae8:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= 1<<13; GP_IRQ_CallBack[13](); }
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <EXTI15_10_IRQHandler+0xbc>)
 8000aec:	695b      	ldr	r3, [r3, #20]
 8000aee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d008      	beq.n	8000b08 <EXTI15_10_IRQHandler+0x7c>
 8000af6:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <EXTI15_10_IRQHandler+0xbc>)
 8000af8:	695b      	ldr	r3, [r3, #20]
 8000afa:	4a13      	ldr	r2, [pc, #76]	; (8000b48 <EXTI15_10_IRQHandler+0xbc>)
 8000afc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b00:	6153      	str	r3, [r2, #20]
 8000b02:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <EXTI15_10_IRQHandler+0xc0>)
 8000b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b06:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<14; GP_IRQ_CallBack[14](); }
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <EXTI15_10_IRQHandler+0xbc>)
 8000b0a:	695b      	ldr	r3, [r3, #20]
 8000b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d008      	beq.n	8000b26 <EXTI15_10_IRQHandler+0x9a>
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <EXTI15_10_IRQHandler+0xbc>)
 8000b16:	695b      	ldr	r3, [r3, #20]
 8000b18:	4a0b      	ldr	r2, [pc, #44]	; (8000b48 <EXTI15_10_IRQHandler+0xbc>)
 8000b1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1e:	6153      	str	r3, [r2, #20]
 8000b20:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <EXTI15_10_IRQHandler+0xc0>)
 8000b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b24:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<15; GP_IRQ_CallBack[15](); }
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <EXTI15_10_IRQHandler+0xbc>)
 8000b28:	695b      	ldr	r3, [r3, #20]
 8000b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d008      	beq.n	8000b44 <EXTI15_10_IRQHandler+0xb8>
 8000b32:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <EXTI15_10_IRQHandler+0xbc>)
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <EXTI15_10_IRQHandler+0xbc>)
 8000b38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b3c:	6153      	str	r3, [r2, #20]
 8000b3e:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <EXTI15_10_IRQHandler+0xc0>)
 8000b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b42:	4798      	blx	r3
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40010400 	.word	0x40010400
 8000b4c:	2000001c 	.word	0x2000001c

08000b50 <Get_CRLH_Position>:

#include "Stm32_F103C6_GPIO_Driver.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 8000b5a:	88fb      	ldrh	r3, [r7, #6]
 8000b5c:	2b80      	cmp	r3, #128	; 0x80
 8000b5e:	d042      	beq.n	8000be6 <Get_CRLH_Position+0x96>
 8000b60:	2b80      	cmp	r3, #128	; 0x80
 8000b62:	dc11      	bgt.n	8000b88 <Get_CRLH_Position+0x38>
 8000b64:	2b08      	cmp	r3, #8
 8000b66:	d036      	beq.n	8000bd6 <Get_CRLH_Position+0x86>
 8000b68:	2b08      	cmp	r3, #8
 8000b6a:	dc06      	bgt.n	8000b7a <Get_CRLH_Position+0x2a>
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d02e      	beq.n	8000bce <Get_CRLH_Position+0x7e>
 8000b70:	2b04      	cmp	r3, #4
 8000b72:	d02e      	beq.n	8000bd2 <Get_CRLH_Position+0x82>
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d028      	beq.n	8000bca <Get_CRLH_Position+0x7a>
 8000b78:	e047      	b.n	8000c0a <Get_CRLH_Position+0xba>
 8000b7a:	2b20      	cmp	r3, #32
 8000b7c:	d02f      	beq.n	8000bde <Get_CRLH_Position+0x8e>
 8000b7e:	2b40      	cmp	r3, #64	; 0x40
 8000b80:	d02f      	beq.n	8000be2 <Get_CRLH_Position+0x92>
 8000b82:	2b10      	cmp	r3, #16
 8000b84:	d029      	beq.n	8000bda <Get_CRLH_Position+0x8a>
 8000b86:	e040      	b.n	8000c0a <Get_CRLH_Position+0xba>
 8000b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b8c:	d033      	beq.n	8000bf6 <Get_CRLH_Position+0xa6>
 8000b8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b92:	dc09      	bgt.n	8000ba8 <Get_CRLH_Position+0x58>
 8000b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b98:	d029      	beq.n	8000bee <Get_CRLH_Position+0x9e>
 8000b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b9e:	d028      	beq.n	8000bf2 <Get_CRLH_Position+0xa2>
 8000ba0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ba4:	d021      	beq.n	8000bea <Get_CRLH_Position+0x9a>
 8000ba6:	e030      	b.n	8000c0a <Get_CRLH_Position+0xba>
 8000ba8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bac:	d027      	beq.n	8000bfe <Get_CRLH_Position+0xae>
 8000bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bb2:	dc03      	bgt.n	8000bbc <Get_CRLH_Position+0x6c>
 8000bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bb8:	d01f      	beq.n	8000bfa <Get_CRLH_Position+0xaa>
 8000bba:	e026      	b.n	8000c0a <Get_CRLH_Position+0xba>
 8000bbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000bc0:	d01f      	beq.n	8000c02 <Get_CRLH_Position+0xb2>
 8000bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000bc6:	d01e      	beq.n	8000c06 <Get_CRLH_Position+0xb6>
 8000bc8:	e01f      	b.n	8000c0a <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e01e      	b.n	8000c0c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_1:
		return 4;
 8000bce:	2304      	movs	r3, #4
 8000bd0:	e01c      	b.n	8000c0c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_2:
		return 8;
 8000bd2:	2308      	movs	r3, #8
 8000bd4:	e01a      	b.n	8000c0c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_3:
		return 12;
 8000bd6:	230c      	movs	r3, #12
 8000bd8:	e018      	b.n	8000c0c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_4:
		return 16;
 8000bda:	2310      	movs	r3, #16
 8000bdc:	e016      	b.n	8000c0c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_5:
		return 20;
 8000bde:	2314      	movs	r3, #20
 8000be0:	e014      	b.n	8000c0c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_6:
		return 24;
 8000be2:	2318      	movs	r3, #24
 8000be4:	e012      	b.n	8000c0c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_7:
		return 28;
 8000be6:	231c      	movs	r3, #28
 8000be8:	e010      	b.n	8000c0c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_8:
		return 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	e00e      	b.n	8000c0c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_9:
		return 4;
 8000bee:	2304      	movs	r3, #4
 8000bf0:	e00c      	b.n	8000c0c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_10:
		return 8;
 8000bf2:	2308      	movs	r3, #8
 8000bf4:	e00a      	b.n	8000c0c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_11:
		return 12;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	e008      	b.n	8000c0c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_12:
		return 16;
 8000bfa:	2310      	movs	r3, #16
 8000bfc:	e006      	b.n	8000c0c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_13:
		return 20;
 8000bfe:	2314      	movs	r3, #20
 8000c00:	e004      	b.n	8000c0c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_14:
		return 24;
 8000c02:	2318      	movs	r3, #24
 8000c04:	e002      	b.n	8000c0c <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_15:
		return 28;
 8000c06:	231c      	movs	r3, #28
 8000c08:	e000      	b.n	8000c0c <Get_CRLH_Position+0xbc>
		break;

	default:
		return 0;
 8000c0a:	2300      	movs	r3, #0
		break;
	}
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr

08000c16 <MCAL_GPIO_Init>:
 * @retval			- none
 * Note				- stm32F103c6 MCU has GPIO A,B,C,D,E Modules
 * 					  But LQFP48 package has only GPIO A,B,Part of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx,GPIO_PinConfig_t *PinConfig)
{
 8000c16:	b590      	push	{r4, r7, lr}
 8000c18:	b085      	sub	sp, #20
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
 8000c1e:	6039      	str	r1, [r7, #0]
	// Port configuration register low  (GPIOx_CRL) configure PINS from 0 ==> 7
	// Port configuration register high (GPIOx_CRH) configure PINS from 8 ==> 15

	volatile uint32_t* configregister = NULL ;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_CONFIG = 0 ;
 8000c24:	2300      	movs	r3, #0
 8000c26:	73fb      	strb	r3, [r7, #15]
	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ?  &GPIOx->CRL : &GPIOx->CRH ;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	2bff      	cmp	r3, #255	; 0xff
 8000c2e:	d801      	bhi.n	8000c34 <MCAL_GPIO_Init+0x1e>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	e001      	b.n	8000c38 <MCAL_GPIO_Init+0x22>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3304      	adds	r3, #4
 8000c38:	60bb      	str	r3, [r7, #8]

	//clear CNF MODE
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff ff86 	bl	8000b50 <Get_CRLH_Position>
 8000c44:	4603      	mov	r3, r0
 8000c46:	461a      	mov	r2, r3
 8000c48:	230f      	movs	r3, #15
 8000c4a:	4093      	lsls	r3, r2
 8000c4c:	43da      	mvns	r2, r3
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	401a      	ands	r2, r3
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	601a      	str	r2, [r3, #0]

	//if PIN is output
	if ( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)|| (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) )
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	789b      	ldrb	r3, [r3, #2]
 8000c5c:	2b07      	cmp	r3, #7
 8000c5e:	d00b      	beq.n	8000c78 <MCAL_GPIO_Init+0x62>
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	789b      	ldrb	r3, [r3, #2]
 8000c64:	2b06      	cmp	r3, #6
 8000c66:	d007      	beq.n	8000c78 <MCAL_GPIO_Init+0x62>
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	789b      	ldrb	r3, [r3, #2]
 8000c6c:	2b05      	cmp	r3, #5
 8000c6e:	d003      	beq.n	8000c78 <MCAL_GPIO_Init+0x62>
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	789b      	ldrb	r3, [r3, #2]
 8000c74:	2b04      	cmp	r3, #4
 8000c76:	d10e      	bne.n	8000c96 <MCAL_GPIO_Init+0x80>
	{
		//Set CNF MODE
		PIN_CONFIG = ( (((PinConfig->GPIO_MODE -4 ) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0f) ;
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	789b      	ldrb	r3, [r3, #2]
 8000c7c:	3b04      	subs	r3, #4
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	b25a      	sxtb	r2, r3
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	78db      	ldrb	r3, [r3, #3]
 8000c86:	b25b      	sxtb	r3, r3
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	b25b      	sxtb	r3, r3
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	f003 030f 	and.w	r3, r3, #15
 8000c92:	73fb      	strb	r3, [r7, #15]
 8000c94:	e02c      	b.n	8000cf0 <MCAL_GPIO_Init+0xda>
	}

	else
	{
		if ( (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog) )
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	789b      	ldrb	r3, [r3, #2]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d003      	beq.n	8000ca6 <MCAL_GPIO_Init+0x90>
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	789b      	ldrb	r3, [r3, #2]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d107      	bne.n	8000cb6 <MCAL_GPIO_Init+0xa0>
		{
			//set CNF
			PIN_CONFIG = ( (((PinConfig->GPIO_MODE ) << 2) | (0x00)) & 0x0f) ;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	789b      	ldrb	r3, [r3, #2]
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	f003 030f 	and.w	r3, r3, #15
 8000cb2:	73fb      	strb	r3, [r7, #15]
 8000cb4:	e01c      	b.n	8000cf0 <MCAL_GPIO_Init+0xda>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF ) //Consider it as input floating
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	789b      	ldrb	r3, [r3, #2]
 8000cba:	2b08      	cmp	r3, #8
 8000cbc:	d102      	bne.n	8000cc4 <MCAL_GPIO_Init+0xae>
		{
			PIN_CONFIG = ( (((GPIO_MODE_INPUT_FLO) << 2) | (0x00)) & 0x0f) ;
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	73fb      	strb	r3, [r7, #15]
 8000cc2:	e015      	b.n	8000cf0 <MCAL_GPIO_Init+0xda>
		}
		else //PU PD
		{
			PIN_CONFIG = ( (((GPIO_MODE_INPUT_PU) << 2) | (0x00)) & 0x0f) ;
 8000cc4:	2308      	movs	r3, #8
 8000cc6:	73fb      	strb	r3, [r7, #15]

			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	789b      	ldrb	r3, [r3, #2]
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d107      	bne.n	8000ce0 <MCAL_GPIO_Init+0xca>
			{
				// PXODR = 1 Input pull up
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	683a      	ldr	r2, [r7, #0]
 8000cd6:	8812      	ldrh	r2, [r2, #0]
 8000cd8:	431a      	orrs	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	e007      	b.n	8000cf0 <MCAL_GPIO_Init+0xda>
			}

			else
			{
				// PXODR = 0 Input pull down
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	683a      	ldr	r2, [r7, #0]
 8000ce6:	8812      	ldrh	r2, [r2, #0]
 8000ce8:	43d2      	mvns	r2, r2
 8000cea:	401a      	ands	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//write on CRL or CRH
	(*configregister) |= ( (PIN_CONFIG) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;
 8000cf0:	7bfc      	ldrb	r4, [r7, #15]
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff ff2a 	bl	8000b50 <Get_CRLH_Position>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	fa04 f203 	lsl.w	r2, r4, r3
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	431a      	orrs	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	601a      	str	r2, [r3, #0]


}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd90      	pop	{r4, r7, pc}

08000d14 <Slave_States>:
	/*Send The Address*/
	I2Cx->DR = Address ;
}

void Slave_States(I2C_TypeDef *I2Cx,Slave_State State)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	70fb      	strb	r3, [r7, #3]
	uint8_t index = (I2Cx == I2C1) ? I2C1_INDEX : I2C2_INDEX ;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a32      	ldr	r2, [pc, #200]	; (8000dec <Slave_States+0xd8>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	bf14      	ite	ne
 8000d28:	2301      	movne	r3, #1
 8000d2a:	2300      	moveq	r3, #0
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	73fb      	strb	r3, [r7, #15]

	switch(State)
 8000d30:	78fb      	ldrb	r3, [r7, #3]
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	d856      	bhi.n	8000de4 <Slave_States+0xd0>
 8000d36:	a201      	add	r2, pc, #4	; (adr r2, 8000d3c <Slave_States+0x28>)
 8000d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d3c:	08000d57 	.word	0x08000d57
 8000d40:	08000d51 	.word	0x08000d51
 8000d44:	08000d7b 	.word	0x08000d7b
 8000d48:	08000d93 	.word	0x08000d93
 8000d4c:	08000db7 	.word	0x08000db7
	{
	case I2C_ERROR_AF:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	699b      	ldr	r3, [r3, #24]
		{
			//Slave shouldn't send anything else
		}
		break;
 8000d54:	e046      	b.n	8000de4 <Slave_States+0xd0>

	case I2C_EV_STOP:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	f003 0304 	and.w	r3, r3, #4
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d03b      	beq.n	8000dda <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is Sent by the master
			Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_STOP);
 8000d62:	7bfa      	ldrb	r2, [r7, #15]
 8000d64:	4922      	ldr	r1, [pc, #136]	; (8000df0 <Slave_States+0xdc>)
 8000d66:	4613      	mov	r3, r2
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	4413      	add	r3, r2
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	440b      	add	r3, r1
 8000d70:	3320      	adds	r3, #32
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2000      	movs	r0, #0
 8000d76:	4798      	blx	r3
		}
		break;
 8000d78:	e02f      	b.n	8000dda <Slave_States+0xc6>

	case I2C_EV_ADDR_Matched:
		//Notify APP that The address is matched with The slave address
		Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_ADDR_Matched);
 8000d7a:	7bfa      	ldrb	r2, [r7, #15]
 8000d7c:	491c      	ldr	r1, [pc, #112]	; (8000df0 <Slave_States+0xdc>)
 8000d7e:	4613      	mov	r3, r2
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	4413      	add	r3, r2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	440b      	add	r3, r1
 8000d88:	3320      	adds	r3, #32
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2002      	movs	r0, #2
 8000d8e:	4798      	blx	r3
		break;
 8000d90:	e028      	b.n	8000de4 <Slave_States+0xd0>

	case I2C_EV_DATA_REQ:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	f003 0304 	and.w	r3, r3, #4
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d01f      	beq.n	8000dde <Slave_States+0xca>
		{
			//The APP Layer should send the data (MCAL_I2C_SlaveSendData)in this state
			Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_DATA_REQ);
 8000d9e:	7bfa      	ldrb	r2, [r7, #15]
 8000da0:	4913      	ldr	r1, [pc, #76]	; (8000df0 <Slave_States+0xdc>)
 8000da2:	4613      	mov	r3, r2
 8000da4:	00db      	lsls	r3, r3, #3
 8000da6:	4413      	add	r3, r2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	440b      	add	r3, r1
 8000dac:	3320      	adds	r3, #32
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2003      	movs	r0, #3
 8000db2:	4798      	blx	r3
		}

		break;
 8000db4:	e013      	b.n	8000dde <Slave_States+0xca>

	case I2C_EV_DATA_RCV:
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & (I2C_SR2_TRA)) )
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	f003 0304 	and.w	r3, r3, #4
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d10f      	bne.n	8000de2 <Slave_States+0xce>
		{
			//The APP Layer should read the data (MCAL_I2C_SlaveReceiveData)in this state
			Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_DATA_RCV);
 8000dc2:	7bfa      	ldrb	r2, [r7, #15]
 8000dc4:	490a      	ldr	r1, [pc, #40]	; (8000df0 <Slave_States+0xdc>)
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	4413      	add	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	440b      	add	r3, r1
 8000dd0:	3320      	adds	r3, #32
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2004      	movs	r0, #4
 8000dd6:	4798      	blx	r3
		}

		break;
 8000dd8:	e003      	b.n	8000de2 <Slave_States+0xce>
		break;
 8000dda:	bf00      	nop
 8000ddc:	e002      	b.n	8000de4 <Slave_States+0xd0>
		break;
 8000dde:	bf00      	nop
 8000de0:	e000      	b.n	8000de4 <Slave_States+0xd0>
		break;
 8000de2:	bf00      	nop
	}
}
 8000de4:	bf00      	nop
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40005400 	.word	0x40005400
 8000df0:	20000058 	.word	0x20000058

08000df4 <I2C1_EV_IRQHandler>:
 * 							ISR Functions
 * =====================================================================================
 */

void I2C1_EV_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
	volatile uint32_t dummyRead = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]
	I2C_TypeDef* I2Cx =I2C1 ;
 8000dfe:	4b35      	ldr	r3, [pc, #212]	; (8000ed4 <I2C1_EV_IRQHandler+0xe0>)
 8000e00:	617b      	str	r3, [r7, #20]
	//Interrupt Handler for both master and slave mode of a device
	uint32_t temp1, temp2, temp3;

	temp1 = I2Cx->CR2 & (I2C_CR2_ITEVTEN);
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e0a:	613b      	str	r3, [r7, #16]
	temp2 = I2Cx->CR2 & (I2C_CR2_ITBUFEN);
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e14:	60fb      	str	r3, [r7, #12]

	temp3 = I2Cx->SR1 & (I2C_SR1_STOPF);
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	f003 0310 	and.w	r3, r3, #16
 8000e1e:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by STOPF event
	//Note : Stop detection flag is applicable only slave mode
	if(temp1 && temp3)
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d00c      	beq.n	8000e40 <I2C1_EV_IRQHandler+0x4c>
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d009      	beq.n	8000e40 <I2C1_EV_IRQHandler+0x4c>
	{
		// STOP Flag is Set
		// Clear the STOPF by reading SR1 register followed by writing to CR1 register
		dummyRead = I2Cx->SR1;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	695b      	ldr	r3, [r3, #20]
 8000e30:	607b      	str	r3, [r7, #4]
		I2Cx->CR1 = 0x0000;
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
		Slave_States(I2Cx,I2C_EV_STOP);
 8000e38:	2100      	movs	r1, #0
 8000e3a:	6978      	ldr	r0, [r7, #20]
 8000e3c:	f7ff ff6a 	bl	8000d14 <Slave_States>
	}

	/*---------------------------------------------------*/
	temp3 = I2Cx->SR1 & (I2C_SR1_ADDR);
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	695b      	ldr	r3, [r3, #20]
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by ADDR event
	//Note :When master mode : Address is sent
	//		When slave mode  : Address is matched with own address
	if(temp1 && temp3)
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d012      	beq.n	8000e76 <I2C1_EV_IRQHandler+0x82>
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d00f      	beq.n	8000e76 <I2C1_EV_IRQHandler+0x82>
	{
		// Interrupt is generated because of ADDR event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d109      	bne.n	8000e76 <I2C1_EV_IRQHandler+0x82>
		}
		else
		{
			//Slave mode
			//Clear the ADDR flag (Read SR1 , Read SR2)
			dummyRead = I2Cx->SR1;
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	695b      	ldr	r3, [r3, #20]
 8000e66:	607b      	str	r3, [r7, #4]
			dummyRead = I2Cx->SR2;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	607b      	str	r3, [r7, #4]
			Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 8000e6e:	2102      	movs	r1, #2
 8000e70:	6978      	ldr	r0, [r7, #20]
 8000e72:	f7ff ff4f 	bl	8000d14 <Slave_States>
		}
	}

	/*---------------------------------------------------*/
	temp3 = I2Cx->SR1 & (I2C_SR1_TXE);
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e7e:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by TXE event
	if(temp1 && temp3)
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d00c      	beq.n	8000ea0 <I2C1_EV_IRQHandler+0xac>
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d009      	beq.n	8000ea0 <I2C1_EV_IRQHandler+0xac>
	{
		// Interrupt is generated because of TXE event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d103      	bne.n	8000ea0 <I2C1_EV_IRQHandler+0xac>
			//Master mode
		}
		else
		{
			//Slave mode
			Slave_States(I2Cx,I2C_EV_DATA_REQ);
 8000e98:	2103      	movs	r1, #3
 8000e9a:	6978      	ldr	r0, [r7, #20]
 8000e9c:	f7ff ff3a 	bl	8000d14 <Slave_States>
		}
	}
	/*---------------------------------------------------*/
	temp3 = I2Cx->SR1 & (I2C_SR1_RXNE);
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	695b      	ldr	r3, [r3, #20]
 8000ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ea8:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by RXNE event
	if(temp1 && temp3)
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d00c      	beq.n	8000eca <I2C1_EV_IRQHandler+0xd6>
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d009      	beq.n	8000eca <I2C1_EV_IRQHandler+0xd6>
	{
		// Interrupt is generated because of RXNE event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d103      	bne.n	8000eca <I2C1_EV_IRQHandler+0xd6>
			//Master mode
		}
		else
		{
			//Slave mode
			Slave_States(I2Cx,I2C_EV_DATA_RCV);
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	6978      	ldr	r0, [r7, #20]
 8000ec6:	f7ff ff25 	bl	8000d14 <Slave_States>
		}
	}
}
 8000eca:	bf00      	nop
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40005400 	.word	0x40005400

08000ed8 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
//			//Slave mode
//			Slave_States(I2Cx,I2C_EV_DATA_RCV);
//		}
//	}

}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr

08000ef0 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr

08000efc <SPI1_IRQHandler>:
 * 							ISR Functions
 * =====================================================================================
 */

void SPI1_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;

	irq_src.TXE  = ( ( SPI1->SPI_SR  & (1<<1)) >> 1 ) ;
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <SPI1_IRQHandler+0x54>)
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	085b      	lsrs	r3, r3, #1
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	793b      	ldrb	r3, [r7, #4]
 8000f10:	f362 0300 	bfi	r3, r2, #0, #1
 8000f14:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI1->SPI_SR  & (1<<0)) >> 0 ) ;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <SPI1_IRQHandler+0x54>)
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	793b      	ldrb	r3, [r7, #4]
 8000f22:	f362 0341 	bfi	r3, r2, #1, #1
 8000f26:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI1->SPI_SR  & (1<<4)) >> 4 ) ;
 8000f28:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <SPI1_IRQHandler+0x54>)
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	091b      	lsrs	r3, r3, #4
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	793b      	ldrb	r3, [r7, #4]
 8000f36:	f362 0382 	bfi	r3, r2, #2, #1
 8000f3a:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(irq_src);
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <SPI1_IRQHandler+0x58>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	7938      	ldrb	r0, [r7, #4]
 8000f44:	4798      	blx	r3
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40013000 	.word	0x40013000
 8000f54:	200000a0 	.word	0x200000a0

08000f58 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;

	irq_src.TXE  = ( ( SPI1->SPI_SR  & (1<<1)) >> 1 ) ;
 8000f5e:	4b13      	ldr	r3, [pc, #76]	; (8000fac <SPI2_IRQHandler+0x54>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	085b      	lsrs	r3, r3, #1
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	793b      	ldrb	r3, [r7, #4]
 8000f6c:	f362 0300 	bfi	r3, r2, #0, #1
 8000f70:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI1->SPI_SR  & (1<<0)) >> 0 ) ;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <SPI2_IRQHandler+0x54>)
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	793b      	ldrb	r3, [r7, #4]
 8000f7e:	f362 0341 	bfi	r3, r2, #1, #1
 8000f82:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI1->SPI_SR  & (1<<4)) >> 4 ) ;
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <SPI2_IRQHandler+0x54>)
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	091b      	lsrs	r3, r3, #4
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	793b      	ldrb	r3, [r7, #4]
 8000f92:	f362 0382 	bfi	r3, r2, #2, #1
 8000f96:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(irq_src);
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <SPI2_IRQHandler+0x58>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	7938      	ldrb	r0, [r7, #4]
 8000fa0:	4798      	blx	r3
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40013000 	.word	0x40013000
 8000fb0:	200000a0 	.word	0x200000a0

08000fb4 <MCAL_TIM_Init>:
 * @retval		 -none
 * Note			 -none
 */

Error_status MCAL_TIM_Init(TIM_TypeDef *TIMx,TIM_Config_t *TIM_Config)
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]


	if (TIMx == TIM2)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fc4:	d112      	bne.n	8000fec <MCAL_TIM_Init+0x38>
	{
		RCC_TIM2_CLK_EN();
 8000fc6:	4b5f      	ldr	r3, [pc, #380]	; (8001144 <MCAL_TIM_Init+0x190>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	4a5e      	ldr	r2, [pc, #376]	; (8001144 <MCAL_TIM_Init+0x190>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	61d3      	str	r3, [r2, #28]
		Global_TIM_Config[0] = *TIM_Config ;
 8000fd2:	4a5d      	ldr	r2, [pc, #372]	; (8001148 <MCAL_TIM_Init+0x194>)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	4614      	mov	r4, r2
 8000fd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		NVIC_IQR28_TIM2_Enable();
 8000fde:	4b5b      	ldr	r3, [pc, #364]	; (800114c <MCAL_TIM_Init+0x198>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a5a      	ldr	r2, [pc, #360]	; (800114c <MCAL_TIM_Init+0x198>)
 8000fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	e033      	b.n	8001054 <MCAL_TIM_Init+0xa0>
	}
	else if (TIMx == TIM3)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a58      	ldr	r2, [pc, #352]	; (8001150 <MCAL_TIM_Init+0x19c>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d114      	bne.n	800101e <MCAL_TIM_Init+0x6a>
	{
		RCC_TIM3_CLK_EN();
 8000ff4:	4b53      	ldr	r3, [pc, #332]	; (8001144 <MCAL_TIM_Init+0x190>)
 8000ff6:	69db      	ldr	r3, [r3, #28]
 8000ff8:	4a52      	ldr	r2, [pc, #328]	; (8001144 <MCAL_TIM_Init+0x190>)
 8000ffa:	f043 0302 	orr.w	r3, r3, #2
 8000ffe:	61d3      	str	r3, [r2, #28]
		Global_TIM_Config[1] = *TIM_Config ;
 8001000:	4b51      	ldr	r3, [pc, #324]	; (8001148 <MCAL_TIM_Init+0x194>)
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	f103 0410 	add.w	r4, r3, #16
 8001008:	4613      	mov	r3, r2
 800100a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800100c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		NVIC_IQR29_TIM3_Enable();
 8001010:	4b4e      	ldr	r3, [pc, #312]	; (800114c <MCAL_TIM_Init+0x198>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a4d      	ldr	r2, [pc, #308]	; (800114c <MCAL_TIM_Init+0x198>)
 8001016:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	e01a      	b.n	8001054 <MCAL_TIM_Init+0xa0>

	}
	else if (TIMx == TIM4)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4c      	ldr	r2, [pc, #304]	; (8001154 <MCAL_TIM_Init+0x1a0>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d114      	bne.n	8001050 <MCAL_TIM_Init+0x9c>
	{
		RCC_TIM4_CLK_EN();
 8001026:	4b47      	ldr	r3, [pc, #284]	; (8001144 <MCAL_TIM_Init+0x190>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	4a46      	ldr	r2, [pc, #280]	; (8001144 <MCAL_TIM_Init+0x190>)
 800102c:	f043 0304 	orr.w	r3, r3, #4
 8001030:	61d3      	str	r3, [r2, #28]
		Global_TIM_Config[2] = *TIM_Config ;
 8001032:	4b45      	ldr	r3, [pc, #276]	; (8001148 <MCAL_TIM_Init+0x194>)
 8001034:	683a      	ldr	r2, [r7, #0]
 8001036:	f103 0420 	add.w	r4, r3, #32
 800103a:	4613      	mov	r3, r2
 800103c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800103e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		NVIC_IQR30_TIM4_Enable();
 8001042:	4b42      	ldr	r3, [pc, #264]	; (800114c <MCAL_TIM_Init+0x198>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a41      	ldr	r2, [pc, #260]	; (800114c <MCAL_TIM_Init+0x198>)
 8001048:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	e001      	b.n	8001054 <MCAL_TIM_Init+0xa0>
	}
	else
	{
		return TIMx_NOT_Found ;
 8001050:	2301      	movs	r3, #1
 8001052:	e072      	b.n	800113a <MCAL_TIM_Init+0x186>
	}

	if (TIM_Config->TIM_Mode == TIM_Mode_UP_Count)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d106      	bne.n	800106a <MCAL_TIM_Init+0xb6>
	{
		CLR_BIT(TIMx->CR1,4) ;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f023 0210 	bic.w	r2, r3, #16
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	e010      	b.n	800108c <MCAL_TIM_Init+0xd8>
	}
	else if (TIM_Config->TIM_Mode == TIM_Mode_DOWN_Count)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	2b02      	cmp	r3, #2
 8001070:	d106      	bne.n	8001080 <MCAL_TIM_Init+0xcc>
	{
		SET_BIT(TIMx->CR1,4) ;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f043 0210 	orr.w	r2, r3, #16
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	e005      	b.n	800108c <MCAL_TIM_Init+0xd8>
	}
	else if (TIM_Config->TIM_Mode == TIM_Mode_UP_DOWN_Count)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	2b03      	cmp	r3, #3
 8001086:	d001      	beq.n	800108c <MCAL_TIM_Init+0xd8>
	{

	}
	else
	{
		return TIM_MODE_NOT_Found ;
 8001088:	2302      	movs	r3, #2
 800108a:	e056      	b.n	800113a <MCAL_TIM_Init+0x186>
	}

	CLR_BIT(TIMx->CR1,1) ; //Update disable
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f023 0202 	bic.w	r2, r3, #2
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	601a      	str	r2, [r3, #0]

	TIMx->PSC = (uint16_t)(TIM_Config->Prescaler-1) ; // Prescaler set
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	885b      	ldrh	r3, [r3, #2]
 800109c:	3b01      	subs	r3, #1
 800109e:	b29b      	uxth	r3, r3
 80010a0:	461a      	mov	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	629a      	str	r2, [r3, #40]	; 0x28
	TIMx->CR1 |= TIM_Config->Auto_Reload_status ;  //auto reload status
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	683a      	ldr	r2, [r7, #0]
 80010ac:	8892      	ldrh	r2, [r2, #4]
 80010ae:	431a      	orrs	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	601a      	str	r2, [r3, #0]


	if (TIM_Config->Auto_Reload_Value < 0xffff)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	88db      	ldrh	r3, [r3, #6]
 80010b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010bc:	4293      	cmp	r3, r2
 80010be:	d009      	beq.n	80010d4 <MCAL_TIM_Init+0x120>
	{
		TIMx->ARR = (uint16_t) (TIM_Config->Auto_Reload_Value); //auto reload Value
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	88db      	ldrh	r3, [r3, #6]
 80010c4:	461a      	mov	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	62da      	str	r2, [r3, #44]	; 0x2c
	{
		return TIM_Auto_Reload_Value_Exceeded ;

	}

	if (TIM_Config->IRQ_Enable == TIM_IRQ_MODE_None )
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	891b      	ldrh	r3, [r3, #8]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d10f      	bne.n	80010f2 <MCAL_TIM_Init+0x13e>
 80010d2:	e001      	b.n	80010d8 <MCAL_TIM_Init+0x124>
		return TIM_Auto_Reload_Value_Exceeded ;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e030      	b.n	800113a <MCAL_TIM_Init+0x186>
	{
		CLR_BIT(TIMx->DIER,0);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	f023 0201 	bic.w	r2, r3, #1
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	60da      	str	r2, [r3, #12]
		SET_BIT(TIMx->CR1,1);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f043 0202 	orr.w	r2, r3, #2
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	e020      	b.n	8001134 <MCAL_TIM_Init+0x180>
	}
	else if (TIM_Config->IRQ_Enable == TIM_IRQ_MODE_OverFlow )
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	891b      	ldrh	r3, [r3, #8]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d10c      	bne.n	8001114 <MCAL_TIM_Init+0x160>
	{
		SET_BIT(TIMx->DIER,0);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	f043 0201 	orr.w	r2, r3, #1
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	60da      	str	r2, [r3, #12]
		CLR_BIT(TIMx->CR1,1);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f023 0202 	bic.w	r2, r3, #2
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	e00f      	b.n	8001134 <MCAL_TIM_Init+0x180>
	}
	else if (TIM_Config->IRQ_Enable == TIM_IRQ_MODE_UnderFlow )
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	891b      	ldrh	r3, [r3, #8]
 8001118:	2b02      	cmp	r3, #2
 800111a:	d10b      	bne.n	8001134 <MCAL_TIM_Init+0x180>
	{
		SET_BIT(TIMx->DIER,0);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	f043 0201 	orr.w	r2, r3, #1
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	60da      	str	r2, [r3, #12]
		CLR_BIT(TIMx->CR1,1);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f023 0202 	bic.w	r2, r3, #2
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	601a      	str	r2, [r3, #0]
	}

	MCAL_TIM_Count_Reset(TIMx);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f000 f837 	bl	80011a8 <MCAL_TIM_Count_Reset>

}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	bd90      	pop	{r4, r7, pc}
 8001142:	bf00      	nop
 8001144:	40021000 	.word	0x40021000
 8001148:	20000458 	.word	0x20000458
 800114c:	e000e100 	.word	0xe000e100
 8001150:	40000400 	.word	0x40000400
 8001154:	40000800 	.word	0x40000800

08001158 <MCAL_TIM_Start>:
 * @param [in]   -TIMx :  were x can be (1,2,3,4 depending on device used)to select the Timer Peripheral
 * @retval		 -none
 * Note			 -none
 */
Error_status MCAL_TIM_Start(TIM_TypeDef *TIMx)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
previously set by software. However trigger mode can set the CEN bit automatically by
hardware.
CEN is cleared automatically in one-pulse mode, when an update event occurs.
*/

	if(TIMx != NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d006      	beq.n	8001174 <MCAL_TIM_Start+0x1c>
	{
		SET_BIT(TIMx->CR1,0) ; //Timer Enable
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f043 0201 	orr.w	r2, r3, #1
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	601a      	str	r2, [r3, #0]
	{
		return TIMx_NOT_Found;
	}


}
 8001172:	e000      	b.n	8001176 <MCAL_TIM_Start+0x1e>
		return TIMx_NOT_Found;
 8001174:	2301      	movs	r3, #1
}
 8001176:	4618      	mov	r0, r3
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr

08001180 <MCAL_TIM_Stop>:
 * @param [in]   -TIMx :  were x can be (1,2,3,4 depending on device used)to select the Timer Peripheral
 * @retval		 -none
 * Note			 -none
 */
Error_status MCAL_TIM_Stop(TIM_TypeDef *TIMx)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	previously set by software. However trigger mode can set the CEN bit automatically by
	hardware.
	CEN is cleared automatically in one-pulse mode, when an update event occurs.
	*/

		if(TIMx != NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d006      	beq.n	800119c <MCAL_TIM_Stop+0x1c>
		{
			CLR_BIT(TIMx->CR1,0) ; //Timer Enable
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f023 0201 	bic.w	r2, r3, #1
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	601a      	str	r2, [r3, #0]
			return TIMx_NOT_Found;
		}



}
 800119a:	e000      	b.n	800119e <MCAL_TIM_Stop+0x1e>
			return TIMx_NOT_Found;
 800119c:	2301      	movs	r3, #1
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr

080011a8 <MCAL_TIM_Count_Reset>:
 * @param [in]   -TIMx :  were x can be (1,2,3,4 depending on device used)to select the Timer Peripheral
 * @retval		 -none
 * Note			 -none
 */
Error_status MCAL_TIM_Count_Reset(TIM_TypeDef *TIMx)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]


	if(TIMx != NULL)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d004      	beq.n	80011c0 <MCAL_TIM_Count_Reset+0x18>
	{
		TIMx->CNT = 0x0000;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	625a      	str	r2, [r3, #36]	; 0x24
		return TIMx_No_Error;
 80011bc:	2300      	movs	r3, #0
 80011be:	e000      	b.n	80011c2 <MCAL_TIM_Count_Reset+0x1a>
	}


	return TIMx_NOT_Found;
 80011c0:	2301      	movs	r3, #1

}
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <TIM2_IRQHandler>:
 * 							IRQHandler Functions
 * =====================================================================================
 */

void TIM2_IRQHandler()
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	TIM2->SR = 0x00 ;
 80011d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
	Global_TIM_Config[0].P_IRQ_CallBack();
 80011d8:	4b02      	ldr	r3, [pc, #8]	; (80011e4 <TIM2_IRQHandler+0x18>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	4798      	blx	r3


}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000458 	.word	0x20000458

080011e8 <TIM3_IRQHandler>:
void TIM3_IRQHandler()
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	TIM3->SR = 0x00 ;
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <TIM3_IRQHandler+0x14>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
	Global_TIM_Config[1].P_IRQ_CallBack();
 80011f2:	4b03      	ldr	r3, [pc, #12]	; (8001200 <TIM3_IRQHandler+0x18>)
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	4798      	blx	r3
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40000400 	.word	0x40000400
 8001200:	20000458 	.word	0x20000458

08001204 <TIM4_IRQHandler>:
void TIM4_IRQHandler()
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	TIM4->SR = 0x00 ;
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <TIM4_IRQHandler+0x14>)
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
	Global_TIM_Config[2].P_IRQ_CallBack();
 800120e:	4b03      	ldr	r3, [pc, #12]	; (800121c <TIM4_IRQHandler+0x18>)
 8001210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001212:	4798      	blx	r3
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40000800 	.word	0x40000800
 800121c:	20000458 	.word	0x20000458

08001220 <USART1_IRQHandler>:
 * 							ISR Functions
 * =====================================================================================
 */

void USART1_IRQHandler (void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8001224:	4b02      	ldr	r3, [pc, #8]	; (8001230 <USART1_IRQHandler+0x10>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	4798      	blx	r3
}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	200000a8 	.word	0x200000a8

08001234 <USART2_IRQHandler>:
void USART2_IRQHandler (void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8001238:	4b02      	ldr	r3, [pc, #8]	; (8001244 <USART2_IRQHandler+0x10>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	4798      	blx	r3
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200000a8 	.word	0x200000a8

08001248 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 800124c:	4b02      	ldr	r3, [pc, #8]	; (8001258 <USART3_IRQHandler+0x10>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	4798      	blx	r3
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200000a8 	.word	0x200000a8

0800125c <__libc_init_array>:
 800125c:	b570      	push	{r4, r5, r6, lr}
 800125e:	2500      	movs	r5, #0
 8001260:	4e0c      	ldr	r6, [pc, #48]	; (8001294 <__libc_init_array+0x38>)
 8001262:	4c0d      	ldr	r4, [pc, #52]	; (8001298 <__libc_init_array+0x3c>)
 8001264:	1ba4      	subs	r4, r4, r6
 8001266:	10a4      	asrs	r4, r4, #2
 8001268:	42a5      	cmp	r5, r4
 800126a:	d109      	bne.n	8001280 <__libc_init_array+0x24>
 800126c:	f000 f81a 	bl	80012a4 <_init>
 8001270:	2500      	movs	r5, #0
 8001272:	4e0a      	ldr	r6, [pc, #40]	; (800129c <__libc_init_array+0x40>)
 8001274:	4c0a      	ldr	r4, [pc, #40]	; (80012a0 <__libc_init_array+0x44>)
 8001276:	1ba4      	subs	r4, r4, r6
 8001278:	10a4      	asrs	r4, r4, #2
 800127a:	42a5      	cmp	r5, r4
 800127c:	d105      	bne.n	800128a <__libc_init_array+0x2e>
 800127e:	bd70      	pop	{r4, r5, r6, pc}
 8001280:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001284:	4798      	blx	r3
 8001286:	3501      	adds	r5, #1
 8001288:	e7ee      	b.n	8001268 <__libc_init_array+0xc>
 800128a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800128e:	4798      	blx	r3
 8001290:	3501      	adds	r5, #1
 8001292:	e7f2      	b.n	800127a <__libc_init_array+0x1e>
 8001294:	080012c8 	.word	0x080012c8
 8001298:	080012c8 	.word	0x080012c8
 800129c:	080012c8 	.word	0x080012c8
 80012a0:	080012cc 	.word	0x080012cc

080012a4 <_init>:
 80012a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012a6:	bf00      	nop
 80012a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012aa:	bc08      	pop	{r3}
 80012ac:	469e      	mov	lr, r3
 80012ae:	4770      	bx	lr

080012b0 <_fini>:
 80012b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012b2:	bf00      	nop
 80012b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012b6:	bc08      	pop	{r3}
 80012b8:	469e      	mov	lr, r3
 80012ba:	4770      	bx	lr
