
Drivers.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001158  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08001288  08001288  00011288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001294  08001294  0001129c  2**0
                  CONTENTS
  4 .ARM          00000000  08001294  08001294  0001129c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001294  0800129c  0001129c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001294  08001294  00011294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001298  08001298  00011298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001129c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  20000000  0800129c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  0800129c  0002047c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001129c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008985  00000000  00000000  000112c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015b0  00000000  00000000  00019c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001dbc  00000000  00000000  0001b1fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000450  00000000  00000000  0001cfb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000003a8  00000000  00000000  0001d408  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000050a8  00000000  00000000  0001d7b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00004bb7  00000000  00000000  00022858  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00013db0  00000000  00000000  0002740f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0003b1bf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000f04  00000000  00000000  0003b23c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001270 	.word	0x08001270

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001270 	.word	0x08001270

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <HardFault_Handler>:
#include "CortexMX_OS_porting.h"

unsigned char SysTick_LED ;

void HardFault_Handler (void)
{
 8000184:	b480      	push	{r7}
 8000186:	af00      	add	r7, sp, #0
	while (1) ;
 8000188:	e7fe      	b.n	8000188 <HardFault_Handler+0x4>

0800018a <MemManage_Handler>:
}
void MemManage_Handler (void)
{
 800018a:	b480      	push	{r7}
 800018c:	af00      	add	r7, sp, #0
	while (1) ;
 800018e:	e7fe      	b.n	800018e <MemManage_Handler+0x4>

08000190 <BusFault_Handler>:
}
void BusFault_Handler (void)
{
 8000190:	b480      	push	{r7}
 8000192:	af00      	add	r7, sp, #0
	while (1) ;
 8000194:	e7fe      	b.n	8000194 <BusFault_Handler+0x4>

08000196 <UsageFault_Handler>:
}
void UsageFault_Handler (void)
{
 8000196:	b480      	push	{r7}
 8000198:	af00      	add	r7, sp, #0
	while (1) ;
 800019a:	e7fe      	b.n	800019a <UsageFault_Handler+0x4>

0800019c <SVC_Handler>:
}

__attribute ((naked)) void SVC_Handler()
{
	__asm("tst lr,#4       \n\t"
 800019c:	f01e 0f04 	tst.w	lr, #4
 80001a0:	bf0c      	ite	eq
 80001a2:	f3ef 8008 	mrseq	r0, MSP
 80001a6:	f3ef 8009 	mrsne	r0, PSP
 80001aa:	f000 ba87 	b.w	80006bc <OS_SVC>
			"ITE EQ        \n\t"
			"mrseq r0,MSP  \n\t"
			"mrsne r0,PSP  \n\t"
			"B OS_SVC");
}
 80001ae:	bf00      	nop

080001b0 <trigger_OS_PendSV>:
	__NVIC_SetPriority(PendSV_IRQn, 15);

}

void trigger_OS_PendSV()
{
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk ;
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <trigger_OS_PendSV+0x18>)
 80001b6:	685b      	ldr	r3, [r3, #4]
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <trigger_OS_PendSV+0x18>)
 80001ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80001be:	6053      	str	r3, [r2, #4]
}
 80001c0:	bf00      	nop
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr
 80001c8:	e000ed00 	.word	0xe000ed00

080001cc <SysTick_Handler>:
	SysTick_Config(8000);
}


void SysTick_Handler()
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
	SysTick_LED ^= 1 ;
 80001d0:	4b07      	ldr	r3, [pc, #28]	; (80001f0 <SysTick_Handler+0x24>)
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	f083 0301 	eor.w	r3, r3, #1
 80001d8:	b2da      	uxtb	r2, r3
 80001da:	4b05      	ldr	r3, [pc, #20]	; (80001f0 <SysTick_Handler+0x24>)
 80001dc:	701a      	strb	r2, [r3, #0]

	MYRTOS_Update_TaskWaiting_Time();
 80001de:	f000 fabb 	bl	8000758 <MYRTOS_Update_TaskWaiting_Time>

	//Determine PCurrent & PNext
	Decide_WhatNext();
 80001e2:	f000 fa19 	bl	8000618 <Decide_WhatNext>

	//Switch Context & Restore
	trigger_OS_PendSV();
 80001e6:	f7ff ffe3 	bl	80001b0 <trigger_OS_PendSV>

}
 80001ea:	bf00      	nop
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	200000b0 	.word	0x200000b0

080001f4 <FIFO_enqueue>:
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
 80001fc:	6039      	str	r1, [r7, #0]
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	68db      	ldr	r3, [r3, #12]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d003      	beq.n	800020e <FIFO_enqueue+0x1a>
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	691b      	ldr	r3, [r3, #16]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d101      	bne.n	8000212 <FIFO_enqueue+0x1e>
 800020e:	2303      	movs	r3, #3
 8000210:	e02d      	b.n	800026e <FIFO_enqueue+0x7a>
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	685a      	ldr	r2, [r3, #4]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	689b      	ldr	r3, [r3, #8]
 800021a:	429a      	cmp	r2, r3
 800021c:	d107      	bne.n	800022e <FIFO_enqueue+0x3a>
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	681a      	ldr	r2, [r3, #0]
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	691b      	ldr	r3, [r3, #16]
 8000226:	429a      	cmp	r2, r3
 8000228:	d101      	bne.n	800022e <FIFO_enqueue+0x3a>
 800022a:	2301      	movs	r3, #1
 800022c:	e01f      	b.n	800026e <FIFO_enqueue+0x7a>
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	689b      	ldr	r3, [r3, #8]
 8000232:	683a      	ldr	r2, [r7, #0]
 8000234:	601a      	str	r2, [r3, #0]
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	1c5a      	adds	r2, r3, #1
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	601a      	str	r2, [r3, #0]
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	689b      	ldr	r3, [r3, #8]
 8000244:	687a      	ldr	r2, [r7, #4]
 8000246:	68d2      	ldr	r2, [r2, #12]
 8000248:	4611      	mov	r1, r2
 800024a:	687a      	ldr	r2, [r7, #4]
 800024c:	6912      	ldr	r2, [r2, #16]
 800024e:	0092      	lsls	r2, r2, #2
 8000250:	440a      	add	r2, r1
 8000252:	3a04      	subs	r2, #4
 8000254:	4293      	cmp	r3, r2
 8000256:	d104      	bne.n	8000262 <FIFO_enqueue+0x6e>
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	68da      	ldr	r2, [r3, #12]
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	609a      	str	r2, [r3, #8]
 8000260:	e004      	b.n	800026c <FIFO_enqueue+0x78>
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	689b      	ldr	r3, [r3, #8]
 8000266:	1d1a      	adds	r2, r3, #4
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	609a      	str	r2, [r3, #8]
 800026c:	2300      	movs	r3, #0
 800026e:	4618      	mov	r0, r3
 8000270:	370c      	adds	r7, #12
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr

08000278 <FIFO_dequeue>:
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
 8000280:	6039      	str	r1, [r7, #0]
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	68db      	ldr	r3, [r3, #12]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d003      	beq.n	8000292 <FIFO_dequeue+0x1a>
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	691b      	ldr	r3, [r3, #16]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d101      	bne.n	8000296 <FIFO_dequeue+0x1e>
 8000292:	2303      	movs	r3, #3
 8000294:	e028      	b.n	80002e8 <FIFO_dequeue+0x70>
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	685a      	ldr	r2, [r3, #4]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	689b      	ldr	r3, [r3, #8]
 800029e:	429a      	cmp	r2, r3
 80002a0:	d101      	bne.n	80002a6 <FIFO_dequeue+0x2e>
 80002a2:	2302      	movs	r3, #2
 80002a4:	e020      	b.n	80002e8 <FIFO_dequeue+0x70>
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	681a      	ldr	r2, [r3, #0]
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	601a      	str	r2, [r3, #0]
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	1e5a      	subs	r2, r3, #1
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	687a      	ldr	r2, [r7, #4]
 80002c0:	68d2      	ldr	r2, [r2, #12]
 80002c2:	4611      	mov	r1, r2
 80002c4:	687a      	ldr	r2, [r7, #4]
 80002c6:	6912      	ldr	r2, [r2, #16]
 80002c8:	0092      	lsls	r2, r2, #2
 80002ca:	440a      	add	r2, r1
 80002cc:	3a04      	subs	r2, #4
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d104      	bne.n	80002dc <FIFO_dequeue+0x64>
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	68da      	ldr	r2, [r3, #12]
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	e004      	b.n	80002e6 <FIFO_dequeue+0x6e>
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	1d1a      	adds	r2, r3, #4
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	605a      	str	r2, [r3, #4]
 80002e6:	2300      	movs	r3, #0
 80002e8:	4618      	mov	r0, r3
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bc80      	pop	{r7}
 80002f0:	4770      	bx	lr
	...

080002f4 <PendSV_Handler>:
 80002f4:	4b6f      	ldr	r3, [pc, #444]	; (80004b4 <PendSV_Handler+0x1c0>)
 80002f6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80002fa:	f3ef 8009 	mrs	r0, PSP
 80002fe:	4602      	mov	r2, r0
 8000300:	619a      	str	r2, [r3, #24]
 8000302:	4b6c      	ldr	r3, [pc, #432]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000304:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000308:	699a      	ldr	r2, [r3, #24]
 800030a:	3a04      	subs	r2, #4
 800030c:	619a      	str	r2, [r3, #24]
 800030e:	4b69      	ldr	r3, [pc, #420]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000310:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000314:	699b      	ldr	r3, [r3, #24]
 8000316:	4622      	mov	r2, r4
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	4b66      	ldr	r3, [pc, #408]	; (80004b4 <PendSV_Handler+0x1c0>)
 800031c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000320:	699a      	ldr	r2, [r3, #24]
 8000322:	3a04      	subs	r2, #4
 8000324:	619a      	str	r2, [r3, #24]
 8000326:	4b63      	ldr	r3, [pc, #396]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000328:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800032c:	699b      	ldr	r3, [r3, #24]
 800032e:	462a      	mov	r2, r5
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	4b60      	ldr	r3, [pc, #384]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000334:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000338:	699a      	ldr	r2, [r3, #24]
 800033a:	3a04      	subs	r2, #4
 800033c:	619a      	str	r2, [r3, #24]
 800033e:	4b5d      	ldr	r3, [pc, #372]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000340:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	4632      	mov	r2, r6
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	4b5a      	ldr	r3, [pc, #360]	; (80004b4 <PendSV_Handler+0x1c0>)
 800034c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000350:	699a      	ldr	r2, [r3, #24]
 8000352:	3a04      	subs	r2, #4
 8000354:	619a      	str	r2, [r3, #24]
 8000356:	4b57      	ldr	r3, [pc, #348]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000358:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	463a      	mov	r2, r7
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	4b54      	ldr	r3, [pc, #336]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000364:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000368:	699a      	ldr	r2, [r3, #24]
 800036a:	3a04      	subs	r2, #4
 800036c:	619a      	str	r2, [r3, #24]
 800036e:	4b51      	ldr	r3, [pc, #324]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000370:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	4642      	mov	r2, r8
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	4b4e      	ldr	r3, [pc, #312]	; (80004b4 <PendSV_Handler+0x1c0>)
 800037c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000380:	699a      	ldr	r2, [r3, #24]
 8000382:	3a04      	subs	r2, #4
 8000384:	619a      	str	r2, [r3, #24]
 8000386:	4b4b      	ldr	r3, [pc, #300]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000388:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	464a      	mov	r2, r9
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	4b48      	ldr	r3, [pc, #288]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000394:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000398:	699a      	ldr	r2, [r3, #24]
 800039a:	3a04      	subs	r2, #4
 800039c:	619a      	str	r2, [r3, #24]
 800039e:	4b45      	ldr	r3, [pc, #276]	; (80004b4 <PendSV_Handler+0x1c0>)
 80003a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	4652      	mov	r2, sl
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	4b42      	ldr	r3, [pc, #264]	; (80004b4 <PendSV_Handler+0x1c0>)
 80003ac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80003b0:	699a      	ldr	r2, [r3, #24]
 80003b2:	3a04      	subs	r2, #4
 80003b4:	619a      	str	r2, [r3, #24]
 80003b6:	4b3f      	ldr	r3, [pc, #252]	; (80004b4 <PendSV_Handler+0x1c0>)
 80003b8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	465a      	mov	r2, fp
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	4b3c      	ldr	r3, [pc, #240]	; (80004b4 <PendSV_Handler+0x1c0>)
 80003c4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d009      	beq.n	80003e0 <PendSV_Handler+0xec>
 80003cc:	4b39      	ldr	r3, [pc, #228]	; (80004b4 <PendSV_Handler+0x1c0>)
 80003ce:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80003d2:	4a38      	ldr	r2, [pc, #224]	; (80004b4 <PendSV_Handler+0x1c0>)
 80003d4:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
 80003d8:	4b36      	ldr	r3, [pc, #216]	; (80004b4 <PendSV_Handler+0x1c0>)
 80003da:	2200      	movs	r2, #0
 80003dc:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 80003e0:	4b34      	ldr	r3, [pc, #208]	; (80004b4 <PendSV_Handler+0x1c0>)
 80003e2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	469b      	mov	fp, r3
 80003ec:	4b31      	ldr	r3, [pc, #196]	; (80004b4 <PendSV_Handler+0x1c0>)
 80003ee:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80003f2:	699a      	ldr	r2, [r3, #24]
 80003f4:	3204      	adds	r2, #4
 80003f6:	619a      	str	r2, [r3, #24]
 80003f8:	4b2e      	ldr	r3, [pc, #184]	; (80004b4 <PendSV_Handler+0x1c0>)
 80003fa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	469a      	mov	sl, r3
 8000404:	4b2b      	ldr	r3, [pc, #172]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000406:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800040a:	699a      	ldr	r2, [r3, #24]
 800040c:	3204      	adds	r2, #4
 800040e:	619a      	str	r2, [r3, #24]
 8000410:	4b28      	ldr	r3, [pc, #160]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000412:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4699      	mov	r9, r3
 800041c:	4b25      	ldr	r3, [pc, #148]	; (80004b4 <PendSV_Handler+0x1c0>)
 800041e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000422:	699a      	ldr	r2, [r3, #24]
 8000424:	3204      	adds	r2, #4
 8000426:	619a      	str	r2, [r3, #24]
 8000428:	4b22      	ldr	r3, [pc, #136]	; (80004b4 <PendSV_Handler+0x1c0>)
 800042a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4698      	mov	r8, r3
 8000434:	4b1f      	ldr	r3, [pc, #124]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000436:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800043a:	699a      	ldr	r2, [r3, #24]
 800043c:	3204      	adds	r2, #4
 800043e:	619a      	str	r2, [r3, #24]
 8000440:	4b1c      	ldr	r3, [pc, #112]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000442:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	461f      	mov	r7, r3
 800044c:	4b19      	ldr	r3, [pc, #100]	; (80004b4 <PendSV_Handler+0x1c0>)
 800044e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000452:	699a      	ldr	r2, [r3, #24]
 8000454:	3204      	adds	r2, #4
 8000456:	619a      	str	r2, [r3, #24]
 8000458:	4b16      	ldr	r3, [pc, #88]	; (80004b4 <PendSV_Handler+0x1c0>)
 800045a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	461e      	mov	r6, r3
 8000464:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000466:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800046a:	699a      	ldr	r2, [r3, #24]
 800046c:	3204      	adds	r2, #4
 800046e:	619a      	str	r2, [r3, #24]
 8000470:	4b10      	ldr	r3, [pc, #64]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000472:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	461d      	mov	r5, r3
 800047c:	4b0d      	ldr	r3, [pc, #52]	; (80004b4 <PendSV_Handler+0x1c0>)
 800047e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000482:	699a      	ldr	r2, [r3, #24]
 8000484:	3204      	adds	r2, #4
 8000486:	619a      	str	r2, [r3, #24]
 8000488:	4b0a      	ldr	r3, [pc, #40]	; (80004b4 <PendSV_Handler+0x1c0>)
 800048a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	461c      	mov	r4, r3
 8000494:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000496:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800049a:	699a      	ldr	r2, [r3, #24]
 800049c:	3204      	adds	r2, #4
 800049e:	619a      	str	r2, [r3, #24]
 80004a0:	4b04      	ldr	r3, [pc, #16]	; (80004b4 <PendSV_Handler+0x1c0>)
 80004a2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4618      	mov	r0, r3
 80004aa:	f380 8809 	msr	PSP, r0
 80004ae:	4770      	bx	lr
 80004b0:	bf00      	nop
 80004b2:	bf00      	nop
 80004b4:	200000b4 	.word	0x200000b4

080004b8 <bubbleSort>:
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4b21      	ldr	r3, [pc, #132]	; (8000544 <bubbleSort+0x8c>)
 80004c0:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80004c4:	607b      	str	r3, [r7, #4]
 80004c6:	2300      	movs	r3, #0
 80004c8:	60fb      	str	r3, [r7, #12]
 80004ca:	e030      	b.n	800052e <bubbleSort+0x76>
 80004cc:	2300      	movs	r3, #0
 80004ce:	60bb      	str	r3, [r7, #8]
 80004d0:	e023      	b.n	800051a <bubbleSort+0x62>
 80004d2:	4a1c      	ldr	r2, [pc, #112]	; (8000544 <bubbleSort+0x8c>)
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004da:	791a      	ldrb	r2, [r3, #4]
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	3301      	adds	r3, #1
 80004e0:	4918      	ldr	r1, [pc, #96]	; (8000544 <bubbleSort+0x8c>)
 80004e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004e6:	791b      	ldrb	r3, [r3, #4]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d913      	bls.n	8000514 <bubbleSort+0x5c>
 80004ec:	4a15      	ldr	r2, [pc, #84]	; (8000544 <bubbleSort+0x8c>)
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004f4:	603b      	str	r3, [r7, #0]
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	3301      	adds	r3, #1
 80004fa:	4a12      	ldr	r2, [pc, #72]	; (8000544 <bubbleSort+0x8c>)
 80004fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000500:	4910      	ldr	r1, [pc, #64]	; (8000544 <bubbleSort+0x8c>)
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	3301      	adds	r3, #1
 800050c:	490d      	ldr	r1, [pc, #52]	; (8000544 <bubbleSort+0x8c>)
 800050e:	683a      	ldr	r2, [r7, #0]
 8000510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	3301      	adds	r3, #1
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	687a      	ldr	r2, [r7, #4]
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	1ad3      	subs	r3, r2, r3
 8000520:	3b01      	subs	r3, #1
 8000522:	68ba      	ldr	r2, [r7, #8]
 8000524:	429a      	cmp	r2, r3
 8000526:	d3d4      	bcc.n	80004d2 <bubbleSort+0x1a>
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	3301      	adds	r3, #1
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	3b01      	subs	r3, #1
 8000532:	68fa      	ldr	r2, [r7, #12]
 8000534:	429a      	cmp	r2, r3
 8000536:	d3c9      	bcc.n	80004cc <bubbleSort+0x14>
 8000538:	bf00      	nop
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	200000b4 	.word	0x200000b4

08000548 <MYRTOS_Update_Schadule_Tables>:
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	2300      	movs	r3, #0
 8000550:	603b      	str	r3, [r7, #0]
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	f7ff ffaf 	bl	80004b8 <bubbleSort>
 800055a:	bf00      	nop
 800055c:	463b      	mov	r3, r7
 800055e:	4619      	mov	r1, r3
 8000560:	482b      	ldr	r0, [pc, #172]	; (8000610 <MYRTOS_Update_Schadule_Tables+0xc8>)
 8000562:	f7ff fe89 	bl	8000278 <FIFO_dequeue>
 8000566:	4603      	mov	r3, r0
 8000568:	2b02      	cmp	r3, #2
 800056a:	d1f7      	bne.n	800055c <MYRTOS_Update_Schadule_Tables+0x14>
 800056c:	e044      	b.n	80005f8 <MYRTOS_Update_Schadule_Tables+0xb0>
 800056e:	4a29      	ldr	r2, [pc, #164]	; (8000614 <MYRTOS_Update_Schadule_Tables+0xcc>)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	3301      	adds	r3, #1
 800057c:	4a25      	ldr	r2, [pc, #148]	; (8000614 <MYRTOS_Update_Schadule_Tables+0xcc>)
 800057e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800058a:	2b00      	cmp	r3, #0
 800058c:	d031      	beq.n	80005f2 <MYRTOS_Update_Schadule_Tables+0xaa>
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000594:	2b00      	cmp	r3, #0
 8000596:	d108      	bne.n	80005aa <MYRTOS_Update_Schadule_Tables+0x62>
 8000598:	68b9      	ldr	r1, [r7, #8]
 800059a:	481d      	ldr	r0, [pc, #116]	; (8000610 <MYRTOS_Update_Schadule_Tables+0xc8>)
 800059c:	f7ff fe2a 	bl	80001f4 <FIFO_enqueue>
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	2203      	movs	r2, #3
 80005a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80005a8:	e02e      	b.n	8000608 <MYRTOS_Update_Schadule_Tables+0xc0>
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	791a      	ldrb	r2, [r3, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	791b      	ldrb	r3, [r3, #4]
 80005b2:	429a      	cmp	r2, r3
 80005b4:	d208      	bcs.n	80005c8 <MYRTOS_Update_Schadule_Tables+0x80>
 80005b6:	68b9      	ldr	r1, [r7, #8]
 80005b8:	4815      	ldr	r0, [pc, #84]	; (8000610 <MYRTOS_Update_Schadule_Tables+0xc8>)
 80005ba:	f7ff fe1b 	bl	80001f4 <FIFO_enqueue>
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	2203      	movs	r2, #3
 80005c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80005c6:	e01f      	b.n	8000608 <MYRTOS_Update_Schadule_Tables+0xc0>
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	791a      	ldrb	r2, [r3, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	791b      	ldrb	r3, [r3, #4]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d108      	bne.n	80005e6 <MYRTOS_Update_Schadule_Tables+0x9e>
 80005d4:	68b9      	ldr	r1, [r7, #8]
 80005d6:	480e      	ldr	r0, [pc, #56]	; (8000610 <MYRTOS_Update_Schadule_Tables+0xc8>)
 80005d8:	f7ff fe0c 	bl	80001f4 <FIFO_enqueue>
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	2203      	movs	r2, #3
 80005e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80005e4:	e005      	b.n	80005f2 <MYRTOS_Update_Schadule_Tables+0xaa>
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	791a      	ldrb	r2, [r3, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	791b      	ldrb	r3, [r3, #4]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d809      	bhi.n	8000606 <MYRTOS_Update_Schadule_Tables+0xbe>
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	3301      	adds	r3, #1
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <MYRTOS_Update_Schadule_Tables+0xcc>)
 80005fa:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	429a      	cmp	r2, r3
 8000602:	d8b4      	bhi.n	800056e <MYRTOS_Update_Schadule_Tables+0x26>
 8000604:	e000      	b.n	8000608 <MYRTOS_Update_Schadule_Tables+0xc0>
 8000606:	bf00      	nop
 8000608:	bf00      	nop
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000264 	.word	0x20000264
 8000614:	200000b4 	.word	0x200000b4

08000618 <Decide_WhatNext>:
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
 800061c:	4b24      	ldr	r3, [pc, #144]	; (80006b0 <Decide_WhatNext+0x98>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d11a      	bne.n	800065a <Decide_WhatNext+0x42>
 8000624:	4b23      	ldr	r3, [pc, #140]	; (80006b4 <Decide_WhatNext+0x9c>)
 8000626:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800062a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800062e:	2b00      	cmp	r3, #0
 8000630:	d013      	beq.n	800065a <Decide_WhatNext+0x42>
 8000632:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <Decide_WhatNext+0x9c>)
 8000634:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000638:	2201      	movs	r2, #1
 800063a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800063e:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <Decide_WhatNext+0x9c>)
 8000640:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000644:	4619      	mov	r1, r3
 8000646:	481a      	ldr	r0, [pc, #104]	; (80006b0 <Decide_WhatNext+0x98>)
 8000648:	f7ff fdd4 	bl	80001f4 <FIFO_enqueue>
 800064c:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <Decide_WhatNext+0x9c>)
 800064e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000652:	4a18      	ldr	r2, [pc, #96]	; (80006b4 <Decide_WhatNext+0x9c>)
 8000654:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
 8000658:	e027      	b.n	80006aa <Decide_WhatNext+0x92>
 800065a:	4917      	ldr	r1, [pc, #92]	; (80006b8 <Decide_WhatNext+0xa0>)
 800065c:	4814      	ldr	r0, [pc, #80]	; (80006b0 <Decide_WhatNext+0x98>)
 800065e:	f7ff fe0b 	bl	8000278 <FIFO_dequeue>
 8000662:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <Decide_WhatNext+0x9c>)
 8000664:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000668:	2201      	movs	r2, #1
 800066a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <Decide_WhatNext+0x9c>)
 8000670:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000674:	791a      	ldrb	r2, [r3, #4]
 8000676:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <Decide_WhatNext+0x9c>)
 8000678:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800067c:	791b      	ldrb	r3, [r3, #4]
 800067e:	429a      	cmp	r2, r3
 8000680:	d113      	bne.n	80006aa <Decide_WhatNext+0x92>
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <Decide_WhatNext+0x9c>)
 8000684:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000688:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800068c:	2b00      	cmp	r3, #0
 800068e:	d00c      	beq.n	80006aa <Decide_WhatNext+0x92>
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <Decide_WhatNext+0x9c>)
 8000692:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000696:	4619      	mov	r1, r3
 8000698:	4805      	ldr	r0, [pc, #20]	; (80006b0 <Decide_WhatNext+0x98>)
 800069a:	f7ff fdab 	bl	80001f4 <FIFO_enqueue>
 800069e:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <Decide_WhatNext+0x9c>)
 80006a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006a4:	2203      	movs	r2, #3
 80006a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000264 	.word	0x20000264
 80006b4:	200000b4 	.word	0x200000b4
 80006b8:	20000258 	.word	0x20000258

080006bc <OS_SVC>:
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	3318      	adds	r3, #24
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	3b02      	subs	r3, #2
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	73fb      	strb	r3, [r7, #15]
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	db1f      	blt.n	8000716 <OS_SVC+0x5a>
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	dd02      	ble.n	80006e0 <OS_SVC+0x24>
 80006da:	2b02      	cmp	r3, #2
 80006dc:	d017      	beq.n	800070e <OS_SVC+0x52>
 80006de:	e01a      	b.n	8000716 <OS_SVC+0x5a>
 80006e0:	f7ff ff32 	bl	8000548 <MYRTOS_Update_Schadule_Tables>
 80006e4:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <OS_SVC+0x64>)
 80006e6:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d112      	bne.n	8000714 <OS_SVC+0x58>
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <OS_SVC+0x64>)
 80006f0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006f4:	331c      	adds	r3, #28
 80006f6:	490b      	ldr	r1, [pc, #44]	; (8000724 <OS_SVC+0x68>)
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff fd39 	bl	8000170 <strcmp>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d007      	beq.n	8000714 <OS_SVC+0x58>
 8000704:	f7ff ff88 	bl	8000618 <Decide_WhatNext>
 8000708:	f7ff fd52 	bl	80001b0 <trigger_OS_PendSV>
 800070c:	e002      	b.n	8000714 <OS_SVC+0x58>
 800070e:	f7ff ff1b 	bl	8000548 <MYRTOS_Update_Schadule_Tables>
 8000712:	e000      	b.n	8000716 <OS_SVC+0x5a>
 8000714:	bf00      	nop
 8000716:	bf00      	nop
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200000b4 	.word	0x200000b4
 8000724:	08001288 	.word	0x08001288

08000728 <MYRTOS_OS_SVC_Set>:
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d006      	beq.n	8000746 <MYRTOS_OS_SVC_Set+0x1e>
 8000738:	2b02      	cmp	r3, #2
 800073a:	d006      	beq.n	800074a <MYRTOS_OS_SVC_Set+0x22>
 800073c:	2b00      	cmp	r3, #0
 800073e:	d000      	beq.n	8000742 <MYRTOS_OS_SVC_Set+0x1a>
 8000740:	e005      	b.n	800074e <MYRTOS_OS_SVC_Set+0x26>
 8000742:	df00      	svc	0
 8000744:	e003      	b.n	800074e <MYRTOS_OS_SVC_Set+0x26>
 8000746:	df01      	svc	1
 8000748:	e001      	b.n	800074e <MYRTOS_OS_SVC_Set+0x26>
 800074a:	df02      	svc	2
 800074c:	bf00      	nop
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr

08000758 <MYRTOS_Update_TaskWaiting_Time>:
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	e031      	b.n	80007c8 <MYRTOS_Update_TaskWaiting_Time+0x70>
 8000764:	4a1d      	ldr	r2, [pc, #116]	; (80007dc <MYRTOS_Update_TaskWaiting_Time+0x84>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800076c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000770:	2b00      	cmp	r3, #0
 8000772:	d126      	bne.n	80007c2 <MYRTOS_Update_TaskWaiting_Time+0x6a>
 8000774:	4a19      	ldr	r2, [pc, #100]	; (80007dc <MYRTOS_Update_TaskWaiting_Time+0x84>)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800077c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000780:	2b00      	cmp	r3, #0
 8000782:	d11e      	bne.n	80007c2 <MYRTOS_Update_TaskWaiting_Time+0x6a>
 8000784:	4a15      	ldr	r2, [pc, #84]	; (80007dc <MYRTOS_Update_TaskWaiting_Time+0x84>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800078c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800078e:	3a01      	subs	r2, #1
 8000790:	641a      	str	r2, [r3, #64]	; 0x40
 8000792:	4a12      	ldr	r2, [pc, #72]	; (80007dc <MYRTOS_Update_TaskWaiting_Time+0x84>)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	2b00      	cmp	r3, #0
 800079e:	d110      	bne.n	80007c2 <MYRTOS_Update_TaskWaiting_Time+0x6a>
 80007a0:	4a0e      	ldr	r2, [pc, #56]	; (80007dc <MYRTOS_Update_TaskWaiting_Time+0x84>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007a8:	2201      	movs	r2, #1
 80007aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80007ae:	4a0b      	ldr	r2, [pc, #44]	; (80007dc <MYRTOS_Update_TaskWaiting_Time+0x84>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b6:	2202      	movs	r2, #2
 80007b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80007bc:	2002      	movs	r0, #2
 80007be:	f7ff ffb3 	bl	8000728 <MYRTOS_OS_SVC_Set>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	3301      	adds	r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	4b04      	ldr	r3, [pc, #16]	; (80007dc <MYRTOS_Update_TaskWaiting_Time+0x84>)
 80007ca:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d8c7      	bhi.n	8000764 <MYRTOS_Update_TaskWaiting_Time+0xc>
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200000b4 	.word	0x200000b4

080007e0 <clock_init>:
#include "Stm32_F103C8_TIM_Driver.h"



void clock_init(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

	//Enable clock to AFIO
	AFIO_GPIO_CLK_EN();
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <clock_init+0x30>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	4a09      	ldr	r2, [pc, #36]	; (8000810 <clock_init+0x30>)
 80007ea:	f043 0301 	orr.w	r3, r3, #1
 80007ee:	6193      	str	r3, [r2, #24]
	//Enable clock to port A
	RCC_GPIOA_CLK_EN();
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <clock_init+0x30>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	4a06      	ldr	r2, [pc, #24]	; (8000810 <clock_init+0x30>)
 80007f6:	f043 0304 	orr.w	r3, r3, #4
 80007fa:	6193      	str	r3, [r2, #24]
	//Enable clock to port B
	RCC_GPIOB_CLK_EN();
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <clock_init+0x30>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	4a03      	ldr	r2, [pc, #12]	; (8000810 <clock_init+0x30>)
 8000802:	f043 0308 	orr.w	r3, r3, #8
 8000806:	6193      	str	r3, [r2, #24]


}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr
 8000810:	40021000 	.word	0x40021000

08000814 <timer2>:
void timer2 ()
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  static int counter = 0 ;

  if(counter == 0)
 8000818:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <timer2+0x30>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d103      	bne.n	8000828 <timer2+0x14>
  TIM2->CNT = Counter_Preload_Value;
 8000820:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000824:	2200      	movs	r2, #0
 8000826:	625a      	str	r2, [r3, #36]	; 0x24

  if (counter == 0)
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <timer2+0x30>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d106      	bne.n	800083e <timer2+0x2a>
  {

	  counter = 0 ;
 8000830:	4b04      	ldr	r3, [pc, #16]	; (8000844 <timer2+0x30>)
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]

	  MCAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1) ;
 8000836:	2102      	movs	r1, #2
 8000838:	4803      	ldr	r0, [pc, #12]	; (8000848 <timer2+0x34>)
 800083a:	f000 fa4f 	bl	8000cdc <MCAL_GPIO_TogglePin>

  }
 // counter ++ ;
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	2000001c 	.word	0x2000001c
 8000848:	40010800 	.word	0x40010800

0800084c <main>:

int main(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
	clock_init();
 8000852:	f7ff ffc5 	bl	80007e0 <clock_init>


	TIM_Config_t timer_config ;
	GPIO_PinConfig_t PinConfig ;

	timer_config.TIM_Mode = TIM_Mode_UP_Count;
 8000856:	2301      	movs	r3, #1
 8000858:	813b      	strh	r3, [r7, #8]
	timer_config.Prescaler = 8 ;
 800085a:	2308      	movs	r3, #8
 800085c:	817b      	strh	r3, [r7, #10]
	timer_config.Auto_Reload_Value = 0x0A ;
 800085e:	230a      	movs	r3, #10
 8000860:	823b      	strh	r3, [r7, #16]
	timer_config.Auto_Reload_status = TIM_Auto_Reload_Not_Bufferd ;
 8000862:	2300      	movs	r3, #0
 8000864:	81fb      	strh	r3, [r7, #14]
	timer_config.IRQ_Enable = TIM_IRQ_MODE_OverFlow;
 8000866:	2301      	movs	r3, #1
 8000868:	827b      	strh	r3, [r7, #18]
	timer_config.P_IRQ_CallBack = timer2 ;
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <main+0x50>)
 800086c:	617b      	str	r3, [r7, #20]

	MCAL_TIM_Init(TIM2,&timer_config );
 800086e:	f107 0308 	add.w	r3, r7, #8
 8000872:	4619      	mov	r1, r3
 8000874:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000878:	f000 fb92 	bl	8000fa0 <MCAL_TIM_Init>


	//toggle--> PA1
	PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 800087c:	2302      	movs	r3, #2
 800087e:	80bb      	strh	r3, [r7, #4]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000880:	2306      	movs	r3, #6
 8000882:	71bb      	strb	r3, [r7, #6]
	PinConfig.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000884:	2301      	movs	r3, #1
 8000886:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	4619      	mov	r1, r3
 800088c:	4804      	ldr	r0, [pc, #16]	; (80008a0 <main+0x54>)
 800088e:	f000 f9a6 	bl	8000bde <MCAL_GPIO_Init>

	MCAL_TIM_Start(TIM2);
 8000892:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000896:	f000 fc6b 	bl	8001170 <MCAL_TIM_Start>
	while (1)
 800089a:	e7fe      	b.n	800089a <main+0x4e>
 800089c:	08000815 	.word	0x08000815
 80008a0:	40010800 	.word	0x40010800

080008a4 <Reset_Handler>:
 80008a4:	480d      	ldr	r0, [pc, #52]	; (80008dc <LoopForever+0x2>)
 80008a6:	4685      	mov	sp, r0
 80008a8:	f3af 8000 	nop.w
 80008ac:	480c      	ldr	r0, [pc, #48]	; (80008e0 <LoopForever+0x6>)
 80008ae:	490d      	ldr	r1, [pc, #52]	; (80008e4 <LoopForever+0xa>)
 80008b0:	4a0d      	ldr	r2, [pc, #52]	; (80008e8 <LoopForever+0xe>)
 80008b2:	2300      	movs	r3, #0
 80008b4:	e002      	b.n	80008bc <LoopCopyDataInit>

080008b6 <CopyDataInit>:
 80008b6:	58d4      	ldr	r4, [r2, r3]
 80008b8:	50c4      	str	r4, [r0, r3]
 80008ba:	3304      	adds	r3, #4

080008bc <LoopCopyDataInit>:
 80008bc:	18c4      	adds	r4, r0, r3
 80008be:	428c      	cmp	r4, r1
 80008c0:	d3f9      	bcc.n	80008b6 <CopyDataInit>
 80008c2:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <LoopForever+0x12>)
 80008c4:	4c0a      	ldr	r4, [pc, #40]	; (80008f0 <LoopForever+0x16>)
 80008c6:	2300      	movs	r3, #0
 80008c8:	e001      	b.n	80008ce <LoopFillZerobss>

080008ca <FillZerobss>:
 80008ca:	6013      	str	r3, [r2, #0]
 80008cc:	3204      	adds	r2, #4

080008ce <LoopFillZerobss>:
 80008ce:	42a2      	cmp	r2, r4
 80008d0:	d3fb      	bcc.n	80008ca <FillZerobss>
 80008d2:	f000 fca9 	bl	8001228 <__libc_init_array>
 80008d6:	f7ff ffb9 	bl	800084c <main>

080008da <LoopForever>:
 80008da:	e7fe      	b.n	80008da <LoopForever>
 80008dc:	20002800 	.word	0x20002800
 80008e0:	20000000 	.word	0x20000000
 80008e4:	20000000 	.word	0x20000000
 80008e8:	0800129c 	.word	0x0800129c
 80008ec:	20000000 	.word	0x20000000
 80008f0:	2000047c 	.word	0x2000047c

080008f4 <ADC1_2_IRQHandler>:
 80008f4:	e7fe      	b.n	80008f4 <ADC1_2_IRQHandler>
	...

080008f8 <EXTI0_IRQHandler>:
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <EXTI0_IRQHandler+0x1c>)
 80008fe:	695b      	ldr	r3, [r3, #20]
 8000900:	4a04      	ldr	r2, [pc, #16]	; (8000914 <EXTI0_IRQHandler+0x1c>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	6153      	str	r3, [r2, #20]
 8000908:	4b03      	ldr	r3, [pc, #12]	; (8000918 <EXTI0_IRQHandler+0x20>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4798      	blx	r3
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40010400 	.word	0x40010400
 8000918:	20000020 	.word	0x20000020

0800091c <EXTI1_IRQHandler>:
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <EXTI1_IRQHandler+0x1c>)
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	4a04      	ldr	r2, [pc, #16]	; (8000938 <EXTI1_IRQHandler+0x1c>)
 8000926:	f043 0302 	orr.w	r3, r3, #2
 800092a:	6153      	str	r3, [r2, #20]
 800092c:	4b03      	ldr	r3, [pc, #12]	; (800093c <EXTI1_IRQHandler+0x20>)
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	4798      	blx	r3
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40010400 	.word	0x40010400
 800093c:	20000020 	.word	0x20000020

08000940 <EXTI2_IRQHandler>:
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <EXTI2_IRQHandler+0x1c>)
 8000946:	695b      	ldr	r3, [r3, #20]
 8000948:	4a04      	ldr	r2, [pc, #16]	; (800095c <EXTI2_IRQHandler+0x1c>)
 800094a:	f043 0304 	orr.w	r3, r3, #4
 800094e:	6153      	str	r3, [r2, #20]
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <EXTI2_IRQHandler+0x20>)
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	4798      	blx	r3
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40010400 	.word	0x40010400
 8000960:	20000020 	.word	0x20000020

08000964 <EXTI3_IRQHandler>:
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
 8000968:	4b05      	ldr	r3, [pc, #20]	; (8000980 <EXTI3_IRQHandler+0x1c>)
 800096a:	695b      	ldr	r3, [r3, #20]
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <EXTI3_IRQHandler+0x1c>)
 800096e:	f043 0308 	orr.w	r3, r3, #8
 8000972:	6153      	str	r3, [r2, #20]
 8000974:	4b03      	ldr	r3, [pc, #12]	; (8000984 <EXTI3_IRQHandler+0x20>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	4798      	blx	r3
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40010400 	.word	0x40010400
 8000984:	20000020 	.word	0x20000020

08000988 <EXTI4_IRQHandler>:
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <EXTI4_IRQHandler+0x1c>)
 800098e:	695b      	ldr	r3, [r3, #20]
 8000990:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <EXTI4_IRQHandler+0x1c>)
 8000992:	f043 0310 	orr.w	r3, r3, #16
 8000996:	6153      	str	r3, [r2, #20]
 8000998:	4b03      	ldr	r3, [pc, #12]	; (80009a8 <EXTI4_IRQHandler+0x20>)
 800099a:	691b      	ldr	r3, [r3, #16]
 800099c:	4798      	blx	r3
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40010400 	.word	0x40010400
 80009a8:	20000020 	.word	0x20000020

080009ac <EXTI9_5_IRQHandler>:
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <EXTI9_5_IRQHandler+0xa0>)
 80009b2:	695b      	ldr	r3, [r3, #20]
 80009b4:	f003 0320 	and.w	r3, r3, #32
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d008      	beq.n	80009ce <EXTI9_5_IRQHandler+0x22>
 80009bc:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <EXTI9_5_IRQHandler+0xa0>)
 80009be:	695b      	ldr	r3, [r3, #20]
 80009c0:	4a22      	ldr	r2, [pc, #136]	; (8000a4c <EXTI9_5_IRQHandler+0xa0>)
 80009c2:	f043 0320 	orr.w	r3, r3, #32
 80009c6:	6153      	str	r3, [r2, #20]
 80009c8:	4b21      	ldr	r3, [pc, #132]	; (8000a50 <EXTI9_5_IRQHandler+0xa4>)
 80009ca:	695b      	ldr	r3, [r3, #20]
 80009cc:	4798      	blx	r3
 80009ce:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <EXTI9_5_IRQHandler+0xa0>)
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d008      	beq.n	80009ec <EXTI9_5_IRQHandler+0x40>
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <EXTI9_5_IRQHandler+0xa0>)
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	4a1b      	ldr	r2, [pc, #108]	; (8000a4c <EXTI9_5_IRQHandler+0xa0>)
 80009e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009e4:	6153      	str	r3, [r2, #20]
 80009e6:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <EXTI9_5_IRQHandler+0xa4>)
 80009e8:	699b      	ldr	r3, [r3, #24]
 80009ea:	4798      	blx	r3
 80009ec:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <EXTI9_5_IRQHandler+0xa0>)
 80009ee:	695b      	ldr	r3, [r3, #20]
 80009f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d008      	beq.n	8000a0a <EXTI9_5_IRQHandler+0x5e>
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <EXTI9_5_IRQHandler+0xa0>)
 80009fa:	695b      	ldr	r3, [r3, #20]
 80009fc:	4a13      	ldr	r2, [pc, #76]	; (8000a4c <EXTI9_5_IRQHandler+0xa0>)
 80009fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a02:	6153      	str	r3, [r2, #20]
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <EXTI9_5_IRQHandler+0xa4>)
 8000a06:	69db      	ldr	r3, [r3, #28]
 8000a08:	4798      	blx	r3
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <EXTI9_5_IRQHandler+0xa0>)
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d008      	beq.n	8000a28 <EXTI9_5_IRQHandler+0x7c>
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <EXTI9_5_IRQHandler+0xa0>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	4a0c      	ldr	r2, [pc, #48]	; (8000a4c <EXTI9_5_IRQHandler+0xa0>)
 8000a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a20:	6153      	str	r3, [r2, #20]
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <EXTI9_5_IRQHandler+0xa4>)
 8000a24:	6a1b      	ldr	r3, [r3, #32]
 8000a26:	4798      	blx	r3
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <EXTI9_5_IRQHandler+0xa0>)
 8000a2a:	695b      	ldr	r3, [r3, #20]
 8000a2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d008      	beq.n	8000a46 <EXTI9_5_IRQHandler+0x9a>
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <EXTI9_5_IRQHandler+0xa0>)
 8000a36:	695b      	ldr	r3, [r3, #20]
 8000a38:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <EXTI9_5_IRQHandler+0xa0>)
 8000a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a3e:	6153      	str	r3, [r2, #20]
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <EXTI9_5_IRQHandler+0xa4>)
 8000a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a44:	4798      	blx	r3
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40010400 	.word	0x40010400
 8000a50:	20000020 	.word	0x20000020

08000a54 <EXTI15_10_IRQHandler>:
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	4b2d      	ldr	r3, [pc, #180]	; (8000b10 <EXTI15_10_IRQHandler+0xbc>)
 8000a5a:	695b      	ldr	r3, [r3, #20]
 8000a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d008      	beq.n	8000a76 <EXTI15_10_IRQHandler+0x22>
 8000a64:	4b2a      	ldr	r3, [pc, #168]	; (8000b10 <EXTI15_10_IRQHandler+0xbc>)
 8000a66:	695b      	ldr	r3, [r3, #20]
 8000a68:	4a29      	ldr	r2, [pc, #164]	; (8000b10 <EXTI15_10_IRQHandler+0xbc>)
 8000a6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a6e:	6153      	str	r3, [r2, #20]
 8000a70:	4b28      	ldr	r3, [pc, #160]	; (8000b14 <EXTI15_10_IRQHandler+0xc0>)
 8000a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a74:	4798      	blx	r3
 8000a76:	4b26      	ldr	r3, [pc, #152]	; (8000b10 <EXTI15_10_IRQHandler+0xbc>)
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d008      	beq.n	8000a94 <EXTI15_10_IRQHandler+0x40>
 8000a82:	4b23      	ldr	r3, [pc, #140]	; (8000b10 <EXTI15_10_IRQHandler+0xbc>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	4a22      	ldr	r2, [pc, #136]	; (8000b10 <EXTI15_10_IRQHandler+0xbc>)
 8000a88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a8c:	6153      	str	r3, [r2, #20]
 8000a8e:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <EXTI15_10_IRQHandler+0xc0>)
 8000a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a92:	4798      	blx	r3
 8000a94:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <EXTI15_10_IRQHandler+0xbc>)
 8000a96:	695b      	ldr	r3, [r3, #20]
 8000a98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d008      	beq.n	8000ab2 <EXTI15_10_IRQHandler+0x5e>
 8000aa0:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <EXTI15_10_IRQHandler+0xbc>)
 8000aa2:	695b      	ldr	r3, [r3, #20]
 8000aa4:	4a1a      	ldr	r2, [pc, #104]	; (8000b10 <EXTI15_10_IRQHandler+0xbc>)
 8000aa6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000aaa:	6153      	str	r3, [r2, #20]
 8000aac:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <EXTI15_10_IRQHandler+0xc0>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab0:	4798      	blx	r3
 8000ab2:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <EXTI15_10_IRQHandler+0xbc>)
 8000ab4:	695b      	ldr	r3, [r3, #20]
 8000ab6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d008      	beq.n	8000ad0 <EXTI15_10_IRQHandler+0x7c>
 8000abe:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <EXTI15_10_IRQHandler+0xbc>)
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	4a13      	ldr	r2, [pc, #76]	; (8000b10 <EXTI15_10_IRQHandler+0xbc>)
 8000ac4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ac8:	6153      	str	r3, [r2, #20]
 8000aca:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <EXTI15_10_IRQHandler+0xc0>)
 8000acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ace:	4798      	blx	r3
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <EXTI15_10_IRQHandler+0xbc>)
 8000ad2:	695b      	ldr	r3, [r3, #20]
 8000ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d008      	beq.n	8000aee <EXTI15_10_IRQHandler+0x9a>
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <EXTI15_10_IRQHandler+0xbc>)
 8000ade:	695b      	ldr	r3, [r3, #20]
 8000ae0:	4a0b      	ldr	r2, [pc, #44]	; (8000b10 <EXTI15_10_IRQHandler+0xbc>)
 8000ae2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae6:	6153      	str	r3, [r2, #20]
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <EXTI15_10_IRQHandler+0xc0>)
 8000aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000aec:	4798      	blx	r3
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <EXTI15_10_IRQHandler+0xbc>)
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d008      	beq.n	8000b0c <EXTI15_10_IRQHandler+0xb8>
 8000afa:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <EXTI15_10_IRQHandler+0xbc>)
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <EXTI15_10_IRQHandler+0xbc>)
 8000b00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b04:	6153      	str	r3, [r2, #20]
 8000b06:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <EXTI15_10_IRQHandler+0xc0>)
 8000b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b0a:	4798      	blx	r3
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40010400 	.word	0x40010400
 8000b14:	20000020 	.word	0x20000020

08000b18 <Get_CRLH_Position>:
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	80fb      	strh	r3, [r7, #6]
 8000b22:	88fb      	ldrh	r3, [r7, #6]
 8000b24:	2b80      	cmp	r3, #128	; 0x80
 8000b26:	d042      	beq.n	8000bae <Get_CRLH_Position+0x96>
 8000b28:	2b80      	cmp	r3, #128	; 0x80
 8000b2a:	dc11      	bgt.n	8000b50 <Get_CRLH_Position+0x38>
 8000b2c:	2b08      	cmp	r3, #8
 8000b2e:	d036      	beq.n	8000b9e <Get_CRLH_Position+0x86>
 8000b30:	2b08      	cmp	r3, #8
 8000b32:	dc06      	bgt.n	8000b42 <Get_CRLH_Position+0x2a>
 8000b34:	2b02      	cmp	r3, #2
 8000b36:	d02e      	beq.n	8000b96 <Get_CRLH_Position+0x7e>
 8000b38:	2b04      	cmp	r3, #4
 8000b3a:	d02e      	beq.n	8000b9a <Get_CRLH_Position+0x82>
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d028      	beq.n	8000b92 <Get_CRLH_Position+0x7a>
 8000b40:	e047      	b.n	8000bd2 <Get_CRLH_Position+0xba>
 8000b42:	2b20      	cmp	r3, #32
 8000b44:	d02f      	beq.n	8000ba6 <Get_CRLH_Position+0x8e>
 8000b46:	2b40      	cmp	r3, #64	; 0x40
 8000b48:	d02f      	beq.n	8000baa <Get_CRLH_Position+0x92>
 8000b4a:	2b10      	cmp	r3, #16
 8000b4c:	d029      	beq.n	8000ba2 <Get_CRLH_Position+0x8a>
 8000b4e:	e040      	b.n	8000bd2 <Get_CRLH_Position+0xba>
 8000b50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b54:	d033      	beq.n	8000bbe <Get_CRLH_Position+0xa6>
 8000b56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b5a:	dc09      	bgt.n	8000b70 <Get_CRLH_Position+0x58>
 8000b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b60:	d029      	beq.n	8000bb6 <Get_CRLH_Position+0x9e>
 8000b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b66:	d028      	beq.n	8000bba <Get_CRLH_Position+0xa2>
 8000b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b6c:	d021      	beq.n	8000bb2 <Get_CRLH_Position+0x9a>
 8000b6e:	e030      	b.n	8000bd2 <Get_CRLH_Position+0xba>
 8000b70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b74:	d027      	beq.n	8000bc6 <Get_CRLH_Position+0xae>
 8000b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b7a:	dc03      	bgt.n	8000b84 <Get_CRLH_Position+0x6c>
 8000b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b80:	d01f      	beq.n	8000bc2 <Get_CRLH_Position+0xaa>
 8000b82:	e026      	b.n	8000bd2 <Get_CRLH_Position+0xba>
 8000b84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000b88:	d01f      	beq.n	8000bca <Get_CRLH_Position+0xb2>
 8000b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b8e:	d01e      	beq.n	8000bce <Get_CRLH_Position+0xb6>
 8000b90:	e01f      	b.n	8000bd2 <Get_CRLH_Position+0xba>
 8000b92:	2300      	movs	r3, #0
 8000b94:	e01e      	b.n	8000bd4 <Get_CRLH_Position+0xbc>
 8000b96:	2304      	movs	r3, #4
 8000b98:	e01c      	b.n	8000bd4 <Get_CRLH_Position+0xbc>
 8000b9a:	2308      	movs	r3, #8
 8000b9c:	e01a      	b.n	8000bd4 <Get_CRLH_Position+0xbc>
 8000b9e:	230c      	movs	r3, #12
 8000ba0:	e018      	b.n	8000bd4 <Get_CRLH_Position+0xbc>
 8000ba2:	2310      	movs	r3, #16
 8000ba4:	e016      	b.n	8000bd4 <Get_CRLH_Position+0xbc>
 8000ba6:	2314      	movs	r3, #20
 8000ba8:	e014      	b.n	8000bd4 <Get_CRLH_Position+0xbc>
 8000baa:	2318      	movs	r3, #24
 8000bac:	e012      	b.n	8000bd4 <Get_CRLH_Position+0xbc>
 8000bae:	231c      	movs	r3, #28
 8000bb0:	e010      	b.n	8000bd4 <Get_CRLH_Position+0xbc>
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e00e      	b.n	8000bd4 <Get_CRLH_Position+0xbc>
 8000bb6:	2304      	movs	r3, #4
 8000bb8:	e00c      	b.n	8000bd4 <Get_CRLH_Position+0xbc>
 8000bba:	2308      	movs	r3, #8
 8000bbc:	e00a      	b.n	8000bd4 <Get_CRLH_Position+0xbc>
 8000bbe:	230c      	movs	r3, #12
 8000bc0:	e008      	b.n	8000bd4 <Get_CRLH_Position+0xbc>
 8000bc2:	2310      	movs	r3, #16
 8000bc4:	e006      	b.n	8000bd4 <Get_CRLH_Position+0xbc>
 8000bc6:	2314      	movs	r3, #20
 8000bc8:	e004      	b.n	8000bd4 <Get_CRLH_Position+0xbc>
 8000bca:	2318      	movs	r3, #24
 8000bcc:	e002      	b.n	8000bd4 <Get_CRLH_Position+0xbc>
 8000bce:	231c      	movs	r3, #28
 8000bd0:	e000      	b.n	8000bd4 <Get_CRLH_Position+0xbc>
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr

08000bde <MCAL_GPIO_Init>:
 8000bde:	b590      	push	{r4, r7, lr}
 8000be0:	b085      	sub	sp, #20
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
 8000be6:	6039      	str	r1, [r7, #0]
 8000be8:	2300      	movs	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	2300      	movs	r3, #0
 8000bee:	73fb      	strb	r3, [r7, #15]
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	2bff      	cmp	r3, #255	; 0xff
 8000bf6:	d801      	bhi.n	8000bfc <MCAL_GPIO_Init+0x1e>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	e001      	b.n	8000c00 <MCAL_GPIO_Init+0x22>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3304      	adds	r3, #4
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ff86 	bl	8000b18 <Get_CRLH_Position>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	461a      	mov	r2, r3
 8000c10:	230f      	movs	r3, #15
 8000c12:	4093      	lsls	r3, r2
 8000c14:	43da      	mvns	r2, r3
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	789b      	ldrb	r3, [r3, #2]
 8000c24:	2b07      	cmp	r3, #7
 8000c26:	d00b      	beq.n	8000c40 <MCAL_GPIO_Init+0x62>
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	789b      	ldrb	r3, [r3, #2]
 8000c2c:	2b06      	cmp	r3, #6
 8000c2e:	d007      	beq.n	8000c40 <MCAL_GPIO_Init+0x62>
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	789b      	ldrb	r3, [r3, #2]
 8000c34:	2b05      	cmp	r3, #5
 8000c36:	d003      	beq.n	8000c40 <MCAL_GPIO_Init+0x62>
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	789b      	ldrb	r3, [r3, #2]
 8000c3c:	2b04      	cmp	r3, #4
 8000c3e:	d10e      	bne.n	8000c5e <MCAL_GPIO_Init+0x80>
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	789b      	ldrb	r3, [r3, #2]
 8000c44:	3b04      	subs	r3, #4
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	b25a      	sxtb	r2, r3
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	78db      	ldrb	r3, [r3, #3]
 8000c4e:	b25b      	sxtb	r3, r3
 8000c50:	4313      	orrs	r3, r2
 8000c52:	b25b      	sxtb	r3, r3
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	f003 030f 	and.w	r3, r3, #15
 8000c5a:	73fb      	strb	r3, [r7, #15]
 8000c5c:	e02c      	b.n	8000cb8 <MCAL_GPIO_Init+0xda>
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	789b      	ldrb	r3, [r3, #2]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d003      	beq.n	8000c6e <MCAL_GPIO_Init+0x90>
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	789b      	ldrb	r3, [r3, #2]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d107      	bne.n	8000c7e <MCAL_GPIO_Init+0xa0>
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	789b      	ldrb	r3, [r3, #2]
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	73fb      	strb	r3, [r7, #15]
 8000c7c:	e01c      	b.n	8000cb8 <MCAL_GPIO_Init+0xda>
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	789b      	ldrb	r3, [r3, #2]
 8000c82:	2b08      	cmp	r3, #8
 8000c84:	d102      	bne.n	8000c8c <MCAL_GPIO_Init+0xae>
 8000c86:	2304      	movs	r3, #4
 8000c88:	73fb      	strb	r3, [r7, #15]
 8000c8a:	e015      	b.n	8000cb8 <MCAL_GPIO_Init+0xda>
 8000c8c:	2308      	movs	r3, #8
 8000c8e:	73fb      	strb	r3, [r7, #15]
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	789b      	ldrb	r3, [r3, #2]
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d107      	bne.n	8000ca8 <MCAL_GPIO_Init+0xca>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	683a      	ldr	r2, [r7, #0]
 8000c9e:	8812      	ldrh	r2, [r2, #0]
 8000ca0:	431a      	orrs	r2, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	e007      	b.n	8000cb8 <MCAL_GPIO_Init+0xda>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	683a      	ldr	r2, [r7, #0]
 8000cae:	8812      	ldrh	r2, [r2, #0]
 8000cb0:	43d2      	mvns	r2, r2
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	7bfc      	ldrb	r4, [r7, #15]
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff ff2a 	bl	8000b18 <Get_CRLH_Position>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	fa04 f203 	lsl.w	r2, r4, r3
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	431a      	orrs	r2, r3
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd90      	pop	{r4, r7, pc}

08000cdc <MCAL_GPIO_TogglePin>:
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	807b      	strh	r3, [r7, #2]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	68da      	ldr	r2, [r3, #12]
 8000cec:	887b      	ldrh	r3, [r7, #2]
 8000cee:	405a      	eors	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	60da      	str	r2, [r3, #12]
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr
	...

08000d00 <Slave_States>:
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	70fb      	strb	r3, [r7, #3]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a32      	ldr	r2, [pc, #200]	; (8000dd8 <Slave_States+0xd8>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	bf14      	ite	ne
 8000d14:	2301      	movne	r3, #1
 8000d16:	2300      	moveq	r3, #0
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	73fb      	strb	r3, [r7, #15]
 8000d1c:	78fb      	ldrb	r3, [r7, #3]
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	d856      	bhi.n	8000dd0 <Slave_States+0xd0>
 8000d22:	a201      	add	r2, pc, #4	; (adr r2, 8000d28 <Slave_States+0x28>)
 8000d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d28:	08000d43 	.word	0x08000d43
 8000d2c:	08000d3d 	.word	0x08000d3d
 8000d30:	08000d67 	.word	0x08000d67
 8000d34:	08000d7f 	.word	0x08000d7f
 8000d38:	08000da3 	.word	0x08000da3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	e046      	b.n	8000dd0 <Slave_States+0xd0>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	f003 0304 	and.w	r3, r3, #4
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d03b      	beq.n	8000dc6 <Slave_States+0xc6>
 8000d4e:	7bfa      	ldrb	r2, [r7, #15]
 8000d50:	4922      	ldr	r1, [pc, #136]	; (8000ddc <Slave_States+0xdc>)
 8000d52:	4613      	mov	r3, r2
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	4413      	add	r3, r2
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	440b      	add	r3, r1
 8000d5c:	3320      	adds	r3, #32
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2000      	movs	r0, #0
 8000d62:	4798      	blx	r3
 8000d64:	e02f      	b.n	8000dc6 <Slave_States+0xc6>
 8000d66:	7bfa      	ldrb	r2, [r7, #15]
 8000d68:	491c      	ldr	r1, [pc, #112]	; (8000ddc <Slave_States+0xdc>)
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	4413      	add	r3, r2
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	440b      	add	r3, r1
 8000d74:	3320      	adds	r3, #32
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2002      	movs	r0, #2
 8000d7a:	4798      	blx	r3
 8000d7c:	e028      	b.n	8000dd0 <Slave_States+0xd0>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	f003 0304 	and.w	r3, r3, #4
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d01f      	beq.n	8000dca <Slave_States+0xca>
 8000d8a:	7bfa      	ldrb	r2, [r7, #15]
 8000d8c:	4913      	ldr	r1, [pc, #76]	; (8000ddc <Slave_States+0xdc>)
 8000d8e:	4613      	mov	r3, r2
 8000d90:	00db      	lsls	r3, r3, #3
 8000d92:	4413      	add	r3, r2
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	440b      	add	r3, r1
 8000d98:	3320      	adds	r3, #32
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	4798      	blx	r3
 8000da0:	e013      	b.n	8000dca <Slave_States+0xca>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	f003 0304 	and.w	r3, r3, #4
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d10f      	bne.n	8000dce <Slave_States+0xce>
 8000dae:	7bfa      	ldrb	r2, [r7, #15]
 8000db0:	490a      	ldr	r1, [pc, #40]	; (8000ddc <Slave_States+0xdc>)
 8000db2:	4613      	mov	r3, r2
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	4413      	add	r3, r2
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	440b      	add	r3, r1
 8000dbc:	3320      	adds	r3, #32
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2004      	movs	r0, #4
 8000dc2:	4798      	blx	r3
 8000dc4:	e003      	b.n	8000dce <Slave_States+0xce>
 8000dc6:	bf00      	nop
 8000dc8:	e002      	b.n	8000dd0 <Slave_States+0xd0>
 8000dca:	bf00      	nop
 8000dcc:	e000      	b.n	8000dd0 <Slave_States+0xd0>
 8000dce:	bf00      	nop
 8000dd0:	bf00      	nop
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40005400 	.word	0x40005400
 8000ddc:	2000005c 	.word	0x2000005c

08000de0 <I2C1_EV_IRQHandler>:
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	4b35      	ldr	r3, [pc, #212]	; (8000ec0 <I2C1_EV_IRQHandler+0xe0>)
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	695b      	ldr	r3, [r3, #20]
 8000e06:	f003 0310 	and.w	r3, r3, #16
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d00c      	beq.n	8000e2c <I2C1_EV_IRQHandler+0x4c>
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d009      	beq.n	8000e2c <I2C1_EV_IRQHandler+0x4c>
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	2100      	movs	r1, #0
 8000e26:	6978      	ldr	r0, [r7, #20]
 8000e28:	f7ff ff6a 	bl	8000d00 <Slave_States>
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	695b      	ldr	r3, [r3, #20]
 8000e30:	f003 0302 	and.w	r3, r3, #2
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d012      	beq.n	8000e62 <I2C1_EV_IRQHandler+0x82>
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d00f      	beq.n	8000e62 <I2C1_EV_IRQHandler+0x82>
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d109      	bne.n	8000e62 <I2C1_EV_IRQHandler+0x82>
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	2102      	movs	r1, #2
 8000e5c:	6978      	ldr	r0, [r7, #20]
 8000e5e:	f7ff ff4f 	bl	8000d00 <Slave_States>
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	695b      	ldr	r3, [r3, #20]
 8000e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d00c      	beq.n	8000e8c <I2C1_EV_IRQHandler+0xac>
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d009      	beq.n	8000e8c <I2C1_EV_IRQHandler+0xac>
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d103      	bne.n	8000e8c <I2C1_EV_IRQHandler+0xac>
 8000e84:	2103      	movs	r1, #3
 8000e86:	6978      	ldr	r0, [r7, #20]
 8000e88:	f7ff ff3a 	bl	8000d00 <Slave_States>
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	695b      	ldr	r3, [r3, #20]
 8000e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d00c      	beq.n	8000eb6 <I2C1_EV_IRQHandler+0xd6>
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d009      	beq.n	8000eb6 <I2C1_EV_IRQHandler+0xd6>
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d103      	bne.n	8000eb6 <I2C1_EV_IRQHandler+0xd6>
 8000eae:	2104      	movs	r1, #4
 8000eb0:	6978      	ldr	r0, [r7, #20]
 8000eb2:	f7ff ff25 	bl	8000d00 <Slave_States>
 8000eb6:	bf00      	nop
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40005400 	.word	0x40005400

08000ec4 <I2C1_ER_IRQHandler>:
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr

08000ed0 <I2C2_EV_IRQHandler>:
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <I2C2_ER_IRQHandler>:
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <SPI1_IRQHandler>:
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <SPI1_IRQHandler+0x54>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	085b      	lsrs	r3, r3, #1
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	793b      	ldrb	r3, [r7, #4]
 8000efc:	f362 0300 	bfi	r3, r2, #0, #1
 8000f00:	713b      	strb	r3, [r7, #4]
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <SPI1_IRQHandler+0x54>)
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	793b      	ldrb	r3, [r7, #4]
 8000f0e:	f362 0341 	bfi	r3, r2, #1, #1
 8000f12:	713b      	strb	r3, [r7, #4]
 8000f14:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <SPI1_IRQHandler+0x54>)
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	091b      	lsrs	r3, r3, #4
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	793b      	ldrb	r3, [r7, #4]
 8000f22:	f362 0382 	bfi	r3, r2, #2, #1
 8000f26:	713b      	strb	r3, [r7, #4]
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <SPI1_IRQHandler+0x58>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	7938      	ldrb	r0, [r7, #4]
 8000f30:	4798      	blx	r3
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40013000 	.word	0x40013000
 8000f40:	200000a4 	.word	0x200000a4

08000f44 <SPI2_IRQHandler>:
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <SPI2_IRQHandler+0x54>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	085b      	lsrs	r3, r3, #1
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	793b      	ldrb	r3, [r7, #4]
 8000f58:	f362 0300 	bfi	r3, r2, #0, #1
 8000f5c:	713b      	strb	r3, [r7, #4]
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <SPI2_IRQHandler+0x54>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	793b      	ldrb	r3, [r7, #4]
 8000f6a:	f362 0341 	bfi	r3, r2, #1, #1
 8000f6e:	713b      	strb	r3, [r7, #4]
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <SPI2_IRQHandler+0x54>)
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	091b      	lsrs	r3, r3, #4
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	793b      	ldrb	r3, [r7, #4]
 8000f7e:	f362 0382 	bfi	r3, r2, #2, #1
 8000f82:	713b      	strb	r3, [r7, #4]
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <SPI2_IRQHandler+0x58>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	7938      	ldrb	r0, [r7, #4]
 8000f8c:	4798      	blx	r3
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40013000 	.word	0x40013000
 8000f9c:	200000a4 	.word	0x200000a4

08000fa0 <MCAL_TIM_Init>:
 * @retval		 -none
 * Note			 -none
 */

Error_status MCAL_TIM_Init(TIM_TypeDef *TIMx,TIM_Config_t *TIM_Config)
{
 8000fa0:	b490      	push	{r4, r7}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]


	if (TIMx == TIM2)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fb0:	d112      	bne.n	8000fd8 <MCAL_TIM_Init+0x38>
	{
		RCC_TIM2_CLK_EN();
 8000fb2:	4b6a      	ldr	r3, [pc, #424]	; (800115c <MCAL_TIM_Init+0x1bc>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	4a69      	ldr	r2, [pc, #420]	; (800115c <MCAL_TIM_Init+0x1bc>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	61d3      	str	r3, [r2, #28]
		Global_TIM_Config[0] = *TIM_Config ;
 8000fbe:	4a68      	ldr	r2, [pc, #416]	; (8001160 <MCAL_TIM_Init+0x1c0>)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	4614      	mov	r4, r2
 8000fc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		NVIC_IQR28_TIM2_Enable();
 8000fca:	4b66      	ldr	r3, [pc, #408]	; (8001164 <MCAL_TIM_Init+0x1c4>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a65      	ldr	r2, [pc, #404]	; (8001164 <MCAL_TIM_Init+0x1c4>)
 8000fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	6013      	str	r3, [r2, #0]
 8000fd6:	e033      	b.n	8001040 <MCAL_TIM_Init+0xa0>
	}
	else if (TIMx == TIM3)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a63      	ldr	r2, [pc, #396]	; (8001168 <MCAL_TIM_Init+0x1c8>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d114      	bne.n	800100a <MCAL_TIM_Init+0x6a>
	{
		RCC_TIM3_CLK_EN();
 8000fe0:	4b5e      	ldr	r3, [pc, #376]	; (800115c <MCAL_TIM_Init+0x1bc>)
 8000fe2:	69db      	ldr	r3, [r3, #28]
 8000fe4:	4a5d      	ldr	r2, [pc, #372]	; (800115c <MCAL_TIM_Init+0x1bc>)
 8000fe6:	f043 0302 	orr.w	r3, r3, #2
 8000fea:	61d3      	str	r3, [r2, #28]
		Global_TIM_Config[1] = *TIM_Config ;
 8000fec:	4b5c      	ldr	r3, [pc, #368]	; (8001160 <MCAL_TIM_Init+0x1c0>)
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	f103 0410 	add.w	r4, r3, #16
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ff8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		NVIC_IQR29_TIM3_Enable();
 8000ffc:	4b59      	ldr	r3, [pc, #356]	; (8001164 <MCAL_TIM_Init+0x1c4>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a58      	ldr	r2, [pc, #352]	; (8001164 <MCAL_TIM_Init+0x1c4>)
 8001002:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	e01a      	b.n	8001040 <MCAL_TIM_Init+0xa0>

	}
	else if (TIMx == TIM4)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a57      	ldr	r2, [pc, #348]	; (800116c <MCAL_TIM_Init+0x1cc>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d114      	bne.n	800103c <MCAL_TIM_Init+0x9c>
	{
		RCC_TIM4_CLK_EN();
 8001012:	4b52      	ldr	r3, [pc, #328]	; (800115c <MCAL_TIM_Init+0x1bc>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	4a51      	ldr	r2, [pc, #324]	; (800115c <MCAL_TIM_Init+0x1bc>)
 8001018:	f043 0304 	orr.w	r3, r3, #4
 800101c:	61d3      	str	r3, [r2, #28]
		Global_TIM_Config[2] = *TIM_Config ;
 800101e:	4b50      	ldr	r3, [pc, #320]	; (8001160 <MCAL_TIM_Init+0x1c0>)
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	f103 0420 	add.w	r4, r3, #32
 8001026:	4613      	mov	r3, r2
 8001028:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800102a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		NVIC_IQR30_TIM4_Enable();
 800102e:	4b4d      	ldr	r3, [pc, #308]	; (8001164 <MCAL_TIM_Init+0x1c4>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a4c      	ldr	r2, [pc, #304]	; (8001164 <MCAL_TIM_Init+0x1c4>)
 8001034:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	e001      	b.n	8001040 <MCAL_TIM_Init+0xa0>
	}
	else
	{
		return TIMx_NOT_Found ;
 800103c:	2301      	movs	r3, #1
 800103e:	e088      	b.n	8001152 <MCAL_TIM_Init+0x1b2>
	}

	if (TIM_Config->TIM_Mode == TIM_Mode_UP_Count)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d10c      	bne.n	8001062 <MCAL_TIM_Init+0xc2>
– Setting the UG bit
– Update generation through the slave mode controller
1: Only counter overflow/underflow generates an update interrupt or DMA request if
enabled.
		 */
		SET_BIT(TIMx->CR1,2) ;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f043 0204 	orr.w	r2, r3, #4
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	601a      	str	r2, [r3, #0]

		//Bit 4 DIR: Direction
		CLR_BIT(TIMx->CR1,4) ;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f023 0210 	bic.w	r2, r3, #16
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	e023      	b.n	80010aa <MCAL_TIM_Init+0x10a>
	}
	else if (TIM_Config->TIM_Mode == TIM_Mode_DOWN_Count)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d10c      	bne.n	8001084 <MCAL_TIM_Init+0xe4>
	{

		//Bit 2 URS: Update request source
		SET_BIT(TIMx->CR1,2) ;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f043 0204 	orr.w	r2, r3, #4
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	601a      	str	r2, [r3, #0]

		//Bit 4 DIR: Direction
		SET_BIT(TIMx->CR1,4) ;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f043 0210 	orr.w	r2, r3, #16
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	e012      	b.n	80010aa <MCAL_TIM_Init+0x10a>
	}
	else if (TIM_Config->TIM_Mode == TIM_Mode_UP_DOWN_Count)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	2b03      	cmp	r3, #3
 800108a:	d106      	bne.n	800109a <MCAL_TIM_Init+0xfa>
	{
		SET_BIT(TIMx->CR1,2) ;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f043 0204 	orr.w	r2, r3, #4
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	e007      	b.n	80010aa <MCAL_TIM_Init+0x10a>
	}
	else
	{
		CLR_BIT(TIMx->CR1,2) ;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f023 0204 	bic.w	r2, r3, #4
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	601a      	str	r2, [r3, #0]
		return TIM_MODE_NOT_Found ;
 80010a6:	2302      	movs	r3, #2
 80010a8:	e053      	b.n	8001152 <MCAL_TIM_Init+0x1b2>
	}

	SET_BIT(TIMx->CR1,1) ; //Update enable Bit 1 UDIS: Update disable
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f043 0202 	orr.w	r2, r3, #2
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	601a      	str	r2, [r3, #0]

	TIMx->PSC = (uint16_t)(TIM_Config->Prescaler-1) ; // Prescaler set
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	885b      	ldrh	r3, [r3, #2]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	b29b      	uxth	r3, r3
 80010be:	461a      	mov	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	629a      	str	r2, [r3, #40]	; 0x28
	TIMx->CR1 |= TIM_Config->Auto_Reload_status ;  //auto reload status
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	88d2      	ldrh	r2, [r2, #6]
 80010cc:	431a      	orrs	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	601a      	str	r2, [r3, #0]


	if (TIM_Config->Auto_Reload_Value < 0xffff)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	891b      	ldrh	r3, [r3, #8]
 80010d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010da:	4293      	cmp	r3, r2
 80010dc:	d009      	beq.n	80010f2 <MCAL_TIM_Init+0x152>
	{
		TIMx->ARR = (uint16_t) (TIM_Config->Auto_Reload_Value); //auto reload Value
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	891b      	ldrh	r3, [r3, #8]
 80010e2:	461a      	mov	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	62da      	str	r2, [r3, #44]	; 0x2c
	{
		return TIM_Auto_Reload_Value_Exceeded ;

	}

	if (TIM_Config->IRQ_Enable == TIM_IRQ_MODE_None )
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	895b      	ldrh	r3, [r3, #10]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d10f      	bne.n	8001110 <MCAL_TIM_Init+0x170>
 80010f0:	e001      	b.n	80010f6 <MCAL_TIM_Init+0x156>
		return TIM_Auto_Reload_Value_Exceeded ;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e02d      	b.n	8001152 <MCAL_TIM_Init+0x1b2>
	{
		CLR_BIT(TIMx->DIER,0);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	f023 0201 	bic.w	r2, r3, #1
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	60da      	str	r2, [r3, #12]
		SET_BIT(TIMx->CR1,1);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f043 0202 	orr.w	r2, r3, #2
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	e020      	b.n	8001152 <MCAL_TIM_Init+0x1b2>
	}
	else if (TIM_Config->IRQ_Enable == TIM_IRQ_MODE_OverFlow )
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	895b      	ldrh	r3, [r3, #10]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d10c      	bne.n	8001132 <MCAL_TIM_Init+0x192>
	{
		SET_BIT(TIMx->DIER,0);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	f043 0201 	orr.w	r2, r3, #1
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	60da      	str	r2, [r3, #12]
		CLR_BIT(TIMx->CR1,1);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f023 0202 	bic.w	r2, r3, #2
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	e00f      	b.n	8001152 <MCAL_TIM_Init+0x1b2>
	}
	else if (TIM_Config->IRQ_Enable == TIM_IRQ_MODE_UnderFlow )
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	895b      	ldrh	r3, [r3, #10]
 8001136:	2b02      	cmp	r3, #2
 8001138:	d10b      	bne.n	8001152 <MCAL_TIM_Init+0x1b2>
	{
		SET_BIT(TIMx->DIER,0);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	f043 0201 	orr.w	r2, r3, #1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	60da      	str	r2, [r3, #12]
		CLR_BIT(TIMx->CR1,1);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f023 0202 	bic.w	r2, r3, #2
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	601a      	str	r2, [r3, #0]





}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bc90      	pop	{r4, r7}
 800115a:	4770      	bx	lr
 800115c:	40021000 	.word	0x40021000
 8001160:	2000044c 	.word	0x2000044c
 8001164:	e000e100 	.word	0xe000e100
 8001168:	40000400 	.word	0x40000400
 800116c:	40000800 	.word	0x40000800

08001170 <MCAL_TIM_Start>:
 * @param [in]   -TIMx :  were x can be (1,2,3,4 depending on device used)to select the Timer Peripheral
 * @retval		 -none
 * Note			 -none
 */
Error_status MCAL_TIM_Start(TIM_TypeDef *TIMx)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
previously set by software. However trigger mode can set the CEN bit automatically by
hardware.
CEN is cleared automatically in one-pulse mode, when an update event occurs.
*/

	if(TIMx != NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d006      	beq.n	800118c <MCAL_TIM_Start+0x1c>
	{
		SET_BIT(TIMx->CR1,0) ; //Timer Enable
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f043 0201 	orr.w	r2, r3, #1
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	601a      	str	r2, [r3, #0]
	{
		return TIMx_NOT_Found;
	}


}
 800118a:	e000      	b.n	800118e <MCAL_TIM_Start+0x1e>
		return TIMx_NOT_Found;
 800118c:	2301      	movs	r3, #1
}
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <TIM2_IRQHandler>:
 * 							IRQHandler Functions
 * =====================================================================================
 */

void TIM2_IRQHandler()
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	TIM2->SR = 0x00 ;
 800119c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
	Global_TIM_Config[0].P_IRQ_CallBack();
 80011a4:	4b02      	ldr	r3, [pc, #8]	; (80011b0 <TIM2_IRQHandler+0x18>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	4798      	blx	r3


}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	2000044c 	.word	0x2000044c

080011b4 <TIM3_IRQHandler>:
void TIM3_IRQHandler()
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	TIM3->SR = 0x00 ;
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <TIM3_IRQHandler+0x14>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
	Global_TIM_Config[1].P_IRQ_CallBack();
 80011be:	4b03      	ldr	r3, [pc, #12]	; (80011cc <TIM3_IRQHandler+0x18>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	4798      	blx	r3
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40000400 	.word	0x40000400
 80011cc:	2000044c 	.word	0x2000044c

080011d0 <TIM4_IRQHandler>:
void TIM4_IRQHandler()
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	TIM4->SR = 0x00 ;
 80011d4:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <TIM4_IRQHandler+0x14>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
	Global_TIM_Config[2].P_IRQ_CallBack();
 80011da:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <TIM4_IRQHandler+0x18>)
 80011dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011de:	4798      	blx	r3
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40000800 	.word	0x40000800
 80011e8:	2000044c 	.word	0x2000044c

080011ec <USART1_IRQHandler>:
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	4b02      	ldr	r3, [pc, #8]	; (80011fc <USART1_IRQHandler+0x10>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	4798      	blx	r3
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200000ac 	.word	0x200000ac

08001200 <USART2_IRQHandler>:
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
 8001204:	4b02      	ldr	r3, [pc, #8]	; (8001210 <USART2_IRQHandler+0x10>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	4798      	blx	r3
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200000ac 	.word	0x200000ac

08001214 <USART3_IRQHandler>:
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
 8001218:	4b02      	ldr	r3, [pc, #8]	; (8001224 <USART3_IRQHandler+0x10>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	4798      	blx	r3
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	200000ac 	.word	0x200000ac

08001228 <__libc_init_array>:
 8001228:	b570      	push	{r4, r5, r6, lr}
 800122a:	2500      	movs	r5, #0
 800122c:	4e0c      	ldr	r6, [pc, #48]	; (8001260 <__libc_init_array+0x38>)
 800122e:	4c0d      	ldr	r4, [pc, #52]	; (8001264 <__libc_init_array+0x3c>)
 8001230:	1ba4      	subs	r4, r4, r6
 8001232:	10a4      	asrs	r4, r4, #2
 8001234:	42a5      	cmp	r5, r4
 8001236:	d109      	bne.n	800124c <__libc_init_array+0x24>
 8001238:	f000 f81a 	bl	8001270 <_init>
 800123c:	2500      	movs	r5, #0
 800123e:	4e0a      	ldr	r6, [pc, #40]	; (8001268 <__libc_init_array+0x40>)
 8001240:	4c0a      	ldr	r4, [pc, #40]	; (800126c <__libc_init_array+0x44>)
 8001242:	1ba4      	subs	r4, r4, r6
 8001244:	10a4      	asrs	r4, r4, #2
 8001246:	42a5      	cmp	r5, r4
 8001248:	d105      	bne.n	8001256 <__libc_init_array+0x2e>
 800124a:	bd70      	pop	{r4, r5, r6, pc}
 800124c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001250:	4798      	blx	r3
 8001252:	3501      	adds	r5, #1
 8001254:	e7ee      	b.n	8001234 <__libc_init_array+0xc>
 8001256:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800125a:	4798      	blx	r3
 800125c:	3501      	adds	r5, #1
 800125e:	e7f2      	b.n	8001246 <__libc_init_array+0x1e>
 8001260:	08001294 	.word	0x08001294
 8001264:	08001294 	.word	0x08001294
 8001268:	08001294 	.word	0x08001294
 800126c:	08001298 	.word	0x08001298

08001270 <_init>:
 8001270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001272:	bf00      	nop
 8001274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001276:	bc08      	pop	{r3}
 8001278:	469e      	mov	lr, r3
 800127a:	4770      	bx	lr

0800127c <_fini>:
 800127c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800127e:	bf00      	nop
 8001280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001282:	bc08      	pop	{r3}
 8001284:	469e      	mov	lr, r3
 8001286:	4770      	bx	lr
