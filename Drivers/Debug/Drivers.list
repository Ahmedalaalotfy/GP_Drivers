
Drivers.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017c8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080018f8  080018f8  000118f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001904  08001904  0001190c  2**0
                  CONTENTS
  4 .ARM          00000000  08001904  08001904  0001190c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001904  0800190c  0001190c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001904  08001904  00011904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001908  08001908  00011908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001190c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  20000000  0800190c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  0800190c  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001190c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a6d  00000000  00000000  00011935  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015c3  00000000  00000000  0001a3a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001d84  00000000  00000000  0001b965  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000448  00000000  00000000  0001d6f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000003a0  00000000  00000000  0001db38  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000512a  00000000  00000000  0001ded8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00004c8f  00000000  00000000  00023002  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00013ffb  00000000  00000000  00027c91  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0003bc8c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000eec  00000000  00000000  0003bd08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080018e0 	.word	0x080018e0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080018e0 	.word	0x080018e0

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <HardFault_Handler>:
#include "CortexMX_OS_porting.h"

unsigned char SysTick_LED ;

void HardFault_Handler (void)
{
 8000184:	b480      	push	{r7}
 8000186:	af00      	add	r7, sp, #0
	while (1) ;
 8000188:	e7fe      	b.n	8000188 <HardFault_Handler+0x4>

0800018a <MemManage_Handler>:
}
void MemManage_Handler (void)
{
 800018a:	b480      	push	{r7}
 800018c:	af00      	add	r7, sp, #0
	while (1) ;
 800018e:	e7fe      	b.n	800018e <MemManage_Handler+0x4>

08000190 <BusFault_Handler>:
}
void BusFault_Handler (void)
{
 8000190:	b480      	push	{r7}
 8000192:	af00      	add	r7, sp, #0
	while (1) ;
 8000194:	e7fe      	b.n	8000194 <BusFault_Handler+0x4>

08000196 <UsageFault_Handler>:
}
void UsageFault_Handler (void)
{
 8000196:	b480      	push	{r7}
 8000198:	af00      	add	r7, sp, #0
	while (1) ;
 800019a:	e7fe      	b.n	800019a <UsageFault_Handler+0x4>

0800019c <SVC_Handler>:
}

__attribute ((naked)) void SVC_Handler()
{
	__asm("tst lr,#4       \n\t"
 800019c:	f01e 0f04 	tst.w	lr, #4
 80001a0:	bf0c      	ite	eq
 80001a2:	f3ef 8008 	mrseq	r0, MSP
 80001a6:	f3ef 8009 	mrsne	r0, PSP
 80001aa:	f000 ba87 	b.w	80006bc <OS_SVC>
			"ITE EQ        \n\t"
			"mrseq r0,MSP  \n\t"
			"mrsne r0,PSP  \n\t"
			"B OS_SVC");
}
 80001ae:	bf00      	nop

080001b0 <trigger_OS_PendSV>:
	__NVIC_SetPriority(PendSV_IRQn, 15);

}

void trigger_OS_PendSV()
{
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk ;
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <trigger_OS_PendSV+0x18>)
 80001b6:	685b      	ldr	r3, [r3, #4]
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <trigger_OS_PendSV+0x18>)
 80001ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80001be:	6053      	str	r3, [r2, #4]
}
 80001c0:	bf00      	nop
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bc80      	pop	{r7}
 80001c6:	4770      	bx	lr
 80001c8:	e000ed00 	.word	0xe000ed00

080001cc <SysTick_Handler>:
	SysTick_Config(8000);
}


void SysTick_Handler()
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
	SysTick_LED ^= 1 ;
 80001d0:	4b07      	ldr	r3, [pc, #28]	; (80001f0 <SysTick_Handler+0x24>)
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	f083 0301 	eor.w	r3, r3, #1
 80001d8:	b2da      	uxtb	r2, r3
 80001da:	4b05      	ldr	r3, [pc, #20]	; (80001f0 <SysTick_Handler+0x24>)
 80001dc:	701a      	strb	r2, [r3, #0]

	MYRTOS_Update_TaskWaiting_Time();
 80001de:	f000 fabb 	bl	8000758 <MYRTOS_Update_TaskWaiting_Time>

	//Determine PCurrent & PNext
	Decide_WhatNext();
 80001e2:	f000 fa19 	bl	8000618 <Decide_WhatNext>

	//Switch Context & Restore
	trigger_OS_PendSV();
 80001e6:	f7ff ffe3 	bl	80001b0 <trigger_OS_PendSV>

}
 80001ea:	bf00      	nop
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	200000ac 	.word	0x200000ac

080001f4 <FIFO_enqueue>:

}

/* *********************************** */

Buffer_status FIFO_enqueue (FIFO_Buf_t* fifo,element_type item){
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
 80001fc:	6039      	str	r1, [r7, #0]

	/* fifo null*/

	if (!fifo->base || !fifo->length)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	68db      	ldr	r3, [r3, #12]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d003      	beq.n	800020e <FIFO_enqueue+0x1a>
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	691b      	ldr	r3, [r3, #16]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d101      	bne.n	8000212 <FIFO_enqueue+0x1e>
		return FIFO_NULL;
 800020e:	2303      	movs	r3, #3
 8000210:	e02d      	b.n	800026e <FIFO_enqueue+0x7a>
	/*fifo is full*/

	/* fifo full */
	if ((fifo->head == fifo->tail) && (fifo->counter == fifo->length))
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	685a      	ldr	r2, [r3, #4]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	689b      	ldr	r3, [r3, #8]
 800021a:	429a      	cmp	r2, r3
 800021c:	d107      	bne.n	800022e <FIFO_enqueue+0x3a>
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	681a      	ldr	r2, [r3, #0]
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	691b      	ldr	r3, [r3, #16]
 8000226:	429a      	cmp	r2, r3
 8000228:	d101      	bne.n	800022e <FIFO_enqueue+0x3a>
		return FIFO_FULL;
 800022a:	2301      	movs	r3, #1
 800022c:	e01f      	b.n	800026e <FIFO_enqueue+0x7a>

	*(fifo->tail)=item;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	689b      	ldr	r3, [r3, #8]
 8000232:	683a      	ldr	r2, [r7, #0]
 8000234:	601a      	str	r2, [r3, #0]
	fifo->counter++;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	1c5a      	adds	r2, r3, #1
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	601a      	str	r2, [r3, #0]

	/*for circular fifo again */

	/* circular enqueue */
	if (fifo->tail == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	689b      	ldr	r3, [r3, #8]
 8000244:	687a      	ldr	r2, [r7, #4]
 8000246:	68d2      	ldr	r2, [r2, #12]
 8000248:	4611      	mov	r1, r2
 800024a:	687a      	ldr	r2, [r7, #4]
 800024c:	6912      	ldr	r2, [r2, #16]
 800024e:	0092      	lsls	r2, r2, #2
 8000250:	440a      	add	r2, r1
 8000252:	3a04      	subs	r2, #4
 8000254:	4293      	cmp	r3, r2
 8000256:	d104      	bne.n	8000262 <FIFO_enqueue+0x6e>
		fifo->tail = fifo->base;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	68da      	ldr	r2, [r3, #12]
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	609a      	str	r2, [r3, #8]
 8000260:	e004      	b.n	800026c <FIFO_enqueue+0x78>
	else
		fifo->tail++;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	689b      	ldr	r3, [r3, #8]
 8000266:	1d1a      	adds	r2, r3, #4
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	609a      	str	r2, [r3, #8]

	return FIFO_NO_ERROR;
 800026c:	2300      	movs	r3, #0


}
 800026e:	4618      	mov	r0, r3
 8000270:	370c      	adds	r7, #12
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr

08000278 <FIFO_dequeue>:

/* *********************************** */

Buffer_status FIFO_dequeue (FIFO_Buf_t* fifo, element_type* item){
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
 8000280:	6039      	str	r1, [r7, #0]
	/* check fifo valid */
	if (!fifo->base || !fifo->length)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	68db      	ldr	r3, [r3, #12]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d003      	beq.n	8000292 <FIFO_dequeue+0x1a>
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	691b      	ldr	r3, [r3, #16]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d101      	bne.n	8000296 <FIFO_dequeue+0x1e>
		return FIFO_NULL;
 8000292:	2303      	movs	r3, #3
 8000294:	e028      	b.n	80002e8 <FIFO_dequeue+0x70>

	/* fifo empty */
	if (fifo->head == fifo->tail)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	685a      	ldr	r2, [r3, #4]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	689b      	ldr	r3, [r3, #8]
 800029e:	429a      	cmp	r2, r3
 80002a0:	d101      	bne.n	80002a6 <FIFO_dequeue+0x2e>
		return FIFO_EMPTY;
 80002a2:	2302      	movs	r3, #2
 80002a4:	e020      	b.n	80002e8 <FIFO_dequeue+0x70>



	*item = *(fifo->head);
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	681a      	ldr	r2, [r3, #0]
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	601a      	str	r2, [r3, #0]
	fifo->counter--;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	1e5a      	subs	r2, r3, #1
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	601a      	str	r2, [r3, #0]

	/* circular dequeue */
	if (fifo->head == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	687a      	ldr	r2, [r7, #4]
 80002c0:	68d2      	ldr	r2, [r2, #12]
 80002c2:	4611      	mov	r1, r2
 80002c4:	687a      	ldr	r2, [r7, #4]
 80002c6:	6912      	ldr	r2, [r2, #16]
 80002c8:	0092      	lsls	r2, r2, #2
 80002ca:	440a      	add	r2, r1
 80002cc:	3a04      	subs	r2, #4
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d104      	bne.n	80002dc <FIFO_dequeue+0x64>
		fifo->head = fifo->base;
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	68da      	ldr	r2, [r3, #12]
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	e004      	b.n	80002e6 <FIFO_dequeue+0x6e>
	else
		fifo->head++;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	1d1a      	adds	r2, r3, #4
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR;
 80002e6:	2300      	movs	r3, #0
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bc80      	pop	{r7}
 80002f0:	4770      	bx	lr
	...

080002f4 <PendSV_Handler>:
{
	//====================================
	//Save the Context of the Current Task
	//====================================
	//Get the Current Task "Current PSP from CPU register" as CPU Push XPSR,.....,R0
	OS_GET_PSP(OS_Control.CurrentTask->Current_PSP);
 80002f4:	4b6f      	ldr	r3, [pc, #444]	; (80004b4 <PendSV_Handler+0x1c0>)
 80002f6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80002fa:	f3ef 8009 	mrs	r0, PSP
 80002fe:	4602      	mov	r2, r0
 8000300:	619a      	str	r2, [r3, #24]

	//using this Current_PSP (Pointer) tp store (R4 to R11)
	OS_Control.CurrentTask->Current_PSP-- ;
 8000302:	4b6c      	ldr	r3, [pc, #432]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000304:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000308:	699a      	ldr	r2, [r3, #24]
 800030a:	3a04      	subs	r2, #4
 800030c:	619a      	str	r2, [r3, #24]
	__asm("mov %0,r4" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 800030e:	4b69      	ldr	r3, [pc, #420]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000310:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000314:	699b      	ldr	r3, [r3, #24]
 8000316:	4622      	mov	r2, r4
 8000318:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 800031a:	4b66      	ldr	r3, [pc, #408]	; (80004b4 <PendSV_Handler+0x1c0>)
 800031c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000320:	699a      	ldr	r2, [r3, #24]
 8000322:	3a04      	subs	r2, #4
 8000324:	619a      	str	r2, [r3, #24]
	__asm("mov %0,r5" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000326:	4b63      	ldr	r3, [pc, #396]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000328:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800032c:	699b      	ldr	r3, [r3, #24]
 800032e:	462a      	mov	r2, r5
 8000330:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 8000332:	4b60      	ldr	r3, [pc, #384]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000334:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000338:	699a      	ldr	r2, [r3, #24]
 800033a:	3a04      	subs	r2, #4
 800033c:	619a      	str	r2, [r3, #24]
	__asm("mov %0,r6" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 800033e:	4b5d      	ldr	r3, [pc, #372]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000340:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	4632      	mov	r2, r6
 8000348:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 800034a:	4b5a      	ldr	r3, [pc, #360]	; (80004b4 <PendSV_Handler+0x1c0>)
 800034c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000350:	699a      	ldr	r2, [r3, #24]
 8000352:	3a04      	subs	r2, #4
 8000354:	619a      	str	r2, [r3, #24]
	__asm("mov %0,r7" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000356:	4b57      	ldr	r3, [pc, #348]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000358:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	463a      	mov	r2, r7
 8000360:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 8000362:	4b54      	ldr	r3, [pc, #336]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000364:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000368:	699a      	ldr	r2, [r3, #24]
 800036a:	3a04      	subs	r2, #4
 800036c:	619a      	str	r2, [r3, #24]
	__asm("mov %0,r8" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 800036e:	4b51      	ldr	r3, [pc, #324]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000370:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	4642      	mov	r2, r8
 8000378:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 800037a:	4b4e      	ldr	r3, [pc, #312]	; (80004b4 <PendSV_Handler+0x1c0>)
 800037c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000380:	699a      	ldr	r2, [r3, #24]
 8000382:	3a04      	subs	r2, #4
 8000384:	619a      	str	r2, [r3, #24]
	__asm("mov %0,r9" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000386:	4b4b      	ldr	r3, [pc, #300]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000388:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	464a      	mov	r2, r9
 8000390:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 8000392:	4b48      	ldr	r3, [pc, #288]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000394:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000398:	699a      	ldr	r2, [r3, #24]
 800039a:	3a04      	subs	r2, #4
 800039c:	619a      	str	r2, [r3, #24]
	__asm("mov %0,r10" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 800039e:	4b45      	ldr	r3, [pc, #276]	; (80004b4 <PendSV_Handler+0x1c0>)
 80003a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	4652      	mov	r2, sl
 80003a8:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP-- ;
 80003aa:	4b42      	ldr	r3, [pc, #264]	; (80004b4 <PendSV_Handler+0x1c0>)
 80003ac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80003b0:	699a      	ldr	r2, [r3, #24]
 80003b2:	3a04      	subs	r2, #4
 80003b4:	619a      	str	r2, [r3, #24]
	__asm("mov %0,r11" : "=r" (*(OS_Control.CurrentTask->Current_PSP)));
 80003b6:	4b3f      	ldr	r3, [pc, #252]	; (80004b4 <PendSV_Handler+0x1c0>)
 80003b8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	465a      	mov	r2, fp
 80003c0:	601a      	str	r2, [r3, #0]


	//====================================
	//Restore the Context of the Next Task
	//====================================
	if(OS_Control.NextTask != NULL)
 80003c2:	4b3c      	ldr	r3, [pc, #240]	; (80004b4 <PendSV_Handler+0x1c0>)
 80003c4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d009      	beq.n	80003e0 <PendSV_Handler+0xec>
	{
		OS_Control.CurrentTask = OS_Control.NextTask ;
 80003cc:	4b39      	ldr	r3, [pc, #228]	; (80004b4 <PendSV_Handler+0x1c0>)
 80003ce:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80003d2:	4a38      	ldr	r2, [pc, #224]	; (80004b4 <PendSV_Handler+0x1c0>)
 80003d4:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
		OS_Control.NextTask = NULL ;
 80003d8:	4b36      	ldr	r3, [pc, #216]	; (80004b4 <PendSV_Handler+0x1c0>)
 80003da:	2200      	movs	r2, #0
 80003dc:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	}
	__asm("mov r11,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 80003e0:	4b34      	ldr	r3, [pc, #208]	; (80004b4 <PendSV_Handler+0x1c0>)
 80003e2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	469b      	mov	fp, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 80003ec:	4b31      	ldr	r3, [pc, #196]	; (80004b4 <PendSV_Handler+0x1c0>)
 80003ee:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80003f2:	699a      	ldr	r2, [r3, #24]
 80003f4:	3204      	adds	r2, #4
 80003f6:	619a      	str	r2, [r3, #24]
	__asm("mov r10,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 80003f8:	4b2e      	ldr	r3, [pc, #184]	; (80004b4 <PendSV_Handler+0x1c0>)
 80003fa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	469a      	mov	sl, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 8000404:	4b2b      	ldr	r3, [pc, #172]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000406:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800040a:	699a      	ldr	r2, [r3, #24]
 800040c:	3204      	adds	r2, #4
 800040e:	619a      	str	r2, [r3, #24]
	__asm("mov r9,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000410:	4b28      	ldr	r3, [pc, #160]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000412:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4699      	mov	r9, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 800041c:	4b25      	ldr	r3, [pc, #148]	; (80004b4 <PendSV_Handler+0x1c0>)
 800041e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000422:	699a      	ldr	r2, [r3, #24]
 8000424:	3204      	adds	r2, #4
 8000426:	619a      	str	r2, [r3, #24]
	__asm("mov r8,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000428:	4b22      	ldr	r3, [pc, #136]	; (80004b4 <PendSV_Handler+0x1c0>)
 800042a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4698      	mov	r8, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 8000434:	4b1f      	ldr	r3, [pc, #124]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000436:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800043a:	699a      	ldr	r2, [r3, #24]
 800043c:	3204      	adds	r2, #4
 800043e:	619a      	str	r2, [r3, #24]
	__asm("mov r7,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000440:	4b1c      	ldr	r3, [pc, #112]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000442:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	461f      	mov	r7, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 800044c:	4b19      	ldr	r3, [pc, #100]	; (80004b4 <PendSV_Handler+0x1c0>)
 800044e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000452:	699a      	ldr	r2, [r3, #24]
 8000454:	3204      	adds	r2, #4
 8000456:	619a      	str	r2, [r3, #24]
	__asm("mov r6,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000458:	4b16      	ldr	r3, [pc, #88]	; (80004b4 <PendSV_Handler+0x1c0>)
 800045a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	461e      	mov	r6, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 8000464:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000466:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800046a:	699a      	ldr	r2, [r3, #24]
 800046c:	3204      	adds	r2, #4
 800046e:	619a      	str	r2, [r3, #24]
	__asm("mov r5,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000470:	4b10      	ldr	r3, [pc, #64]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000472:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	461d      	mov	r5, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 800047c:	4b0d      	ldr	r3, [pc, #52]	; (80004b4 <PendSV_Handler+0x1c0>)
 800047e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000482:	699a      	ldr	r2, [r3, #24]
 8000484:	3204      	adds	r2, #4
 8000486:	619a      	str	r2, [r3, #24]
	__asm("mov r4,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)));
 8000488:	4b0a      	ldr	r3, [pc, #40]	; (80004b4 <PendSV_Handler+0x1c0>)
 800048a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	461c      	mov	r4, r3
	OS_Control.CurrentTask->Current_PSP++ ;
 8000494:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <PendSV_Handler+0x1c0>)
 8000496:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800049a:	699a      	ldr	r2, [r3, #24]
 800049c:	3204      	adds	r2, #4
 800049e:	619a      	str	r2, [r3, #24]

	//Update PSP and exit
	OS_SET_PSP(OS_Control.CurrentTask->Current_PSP);
 80004a0:	4b04      	ldr	r3, [pc, #16]	; (80004b4 <PendSV_Handler+0x1c0>)
 80004a2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4618      	mov	r0, r3
 80004aa:	f380 8809 	msr	PSP, r0
	__asm("BX LR");
 80004ae:	4770      	bx	lr


}
 80004b0:	bf00      	nop
 80004b2:	bf00      	nop
 80004b4:	200000b0 	.word	0x200000b0

080004b8 <bubbleSort>:
	return error ;
}

//Handler mode
void bubbleSort()
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
	unsigned int i, j , n;
	Task_ref* temp ;
	n = OS_Control.NoOfActiveTasks ;
 80004be:	4b21      	ldr	r3, [pc, #132]	; (8000544 <bubbleSort+0x8c>)
 80004c0:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80004c4:	607b      	str	r3, [r7, #4]
	for (i = 0; i < n - 1; i++)
 80004c6:	2300      	movs	r3, #0
 80004c8:	60fb      	str	r3, [r7, #12]
 80004ca:	e030      	b.n	800052e <bubbleSort+0x76>

		// Last i elements are already in place
		for (j = 0; j < n - i - 1; j++)
 80004cc:	2300      	movs	r3, #0
 80004ce:	60bb      	str	r3, [r7, #8]
 80004d0:	e023      	b.n	800051a <bubbleSort+0x62>
			if (OS_Control.OSTasks[j]->priority > OS_Control.OSTasks[j + 1]->priority)
 80004d2:	4a1c      	ldr	r2, [pc, #112]	; (8000544 <bubbleSort+0x8c>)
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004da:	791a      	ldrb	r2, [r3, #4]
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	3301      	adds	r3, #1
 80004e0:	4918      	ldr	r1, [pc, #96]	; (8000544 <bubbleSort+0x8c>)
 80004e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004e6:	791b      	ldrb	r3, [r3, #4]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d913      	bls.n	8000514 <bubbleSort+0x5c>
			{
				temp = OS_Control.OSTasks[j] ;
 80004ec:	4a15      	ldr	r2, [pc, #84]	; (8000544 <bubbleSort+0x8c>)
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004f4:	603b      	str	r3, [r7, #0]
				OS_Control.OSTasks[j] = OS_Control.OSTasks[j + 1 ] ;
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	3301      	adds	r3, #1
 80004fa:	4a12      	ldr	r2, [pc, #72]	; (8000544 <bubbleSort+0x8c>)
 80004fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000500:	4910      	ldr	r1, [pc, #64]	; (8000544 <bubbleSort+0x8c>)
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control.OSTasks[j + 1] = temp ;
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	3301      	adds	r3, #1
 800050c:	490d      	ldr	r1, [pc, #52]	; (8000544 <bubbleSort+0x8c>)
 800050e:	683a      	ldr	r2, [r7, #0]
 8000510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (j = 0; j < n - i - 1; j++)
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	3301      	adds	r3, #1
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	687a      	ldr	r2, [r7, #4]
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	1ad3      	subs	r3, r2, r3
 8000520:	3b01      	subs	r3, #1
 8000522:	68ba      	ldr	r2, [r7, #8]
 8000524:	429a      	cmp	r2, r3
 8000526:	d3d4      	bcc.n	80004d2 <bubbleSort+0x1a>
	for (i = 0; i < n - 1; i++)
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	3301      	adds	r3, #1
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	3b01      	subs	r3, #1
 8000532:	68fa      	ldr	r2, [r7, #12]
 8000534:	429a      	cmp	r2, r3
 8000536:	d3c9      	bcc.n	80004cc <bubbleSort+0x14>
			}

}
 8000538:	bf00      	nop
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	200000b0 	.word	0x200000b0

08000548 <MYRTOS_Update_Schadule_Tables>:

//Handler mode
void MYRTOS_Update_Schadule_Tables()
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
	Task_ref* temp = NULL ;
 800054e:	2300      	movs	r3, #0
 8000550:	603b      	str	r3, [r7, #0]
	Task_ref* Ptask ;
	Task_ref* PnextTask ;
	int i = 0 ;
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]

	//1- bubble sort SchTable OS_Control-> OSTASKS[100] (priority high then low)
	bubbleSort();
 8000556:	f7ff ffaf 	bl	80004b8 <bubbleSort>

	//2- free Ready Queue
	while(FIFO_dequeue(&Ready_QUEUE, &temp /*pointer to pointer*/)!=FIFO_EMPTY);
 800055a:	bf00      	nop
 800055c:	463b      	mov	r3, r7
 800055e:	4619      	mov	r1, r3
 8000560:	482b      	ldr	r0, [pc, #172]	; (8000610 <MYRTOS_Update_Schadule_Tables+0xc8>)
 8000562:	f7ff fe89 	bl	8000278 <FIFO_dequeue>
 8000566:	4603      	mov	r3, r0
 8000568:	2b02      	cmp	r3, #2
 800056a:	d1f7      	bne.n	800055c <MYRTOS_Update_Schadule_Tables+0x14>

	//3- update ready queue
	while(i< OS_Control.NoOfActiveTasks)
 800056c:	e044      	b.n	80005f8 <MYRTOS_Update_Schadule_Tables+0xb0>
	{
		Ptask = OS_Control.OSTasks[i] ;
 800056e:	4a29      	ldr	r2, [pc, #164]	; (8000614 <MYRTOS_Update_Schadule_Tables+0xcc>)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000576:	60bb      	str	r3, [r7, #8]
		PnextTask = OS_Control.OSTasks[i+1] ;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	3301      	adds	r3, #1
 800057c:	4a25      	ldr	r2, [pc, #148]	; (8000614 <MYRTOS_Update_Schadule_Tables+0xcc>)
 800057e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000582:	607b      	str	r3, [r7, #4]
		if (Ptask->TaskState != Suspend)
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800058a:	2b00      	cmp	r3, #0
 800058c:	d031      	beq.n	80005f2 <MYRTOS_Update_Schadule_Tables+0xaa>
		{
			//In case of reaching to the end of available OSTASKS
			if (PnextTask->TaskState == Suspend)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000594:	2b00      	cmp	r3, #0
 8000596:	d108      	bne.n	80005aa <MYRTOS_Update_Schadule_Tables+0x62>
			{
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 8000598:	68b9      	ldr	r1, [r7, #8]
 800059a:	481d      	ldr	r0, [pc, #116]	; (8000610 <MYRTOS_Update_Schadule_Tables+0xc8>)
 800059c:	f7ff fe2a 	bl	80001f4 <FIFO_enqueue>
				Ptask->TaskState = ready ;
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	2203      	movs	r2, #3
 80005a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break ;
 80005a8:	e02e      	b.n	8000608 <MYRTOS_Update_Schadule_Tables+0xc0>
			}
			//If Ptask Priority > PnextTask Priority then (lowest number is meaning higher priority)
			if (Ptask->priority < PnextTask->priority )
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	791a      	ldrb	r2, [r3, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	791b      	ldrb	r3, [r3, #4]
 80005b2:	429a      	cmp	r2, r3
 80005b4:	d208      	bcs.n	80005c8 <MYRTOS_Update_Schadule_Tables+0x80>
			{
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 80005b6:	68b9      	ldr	r1, [r7, #8]
 80005b8:	4815      	ldr	r0, [pc, #84]	; (8000610 <MYRTOS_Update_Schadule_Tables+0xc8>)
 80005ba:	f7ff fe1b 	bl	80001f4 <FIFO_enqueue>
				Ptask->TaskState = ready ;
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	2203      	movs	r2, #3
 80005c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break ;
 80005c6:	e01f      	b.n	8000608 <MYRTOS_Update_Schadule_Tables+0xc0>
			}
			else if (Ptask->priority == PnextTask->priority)
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	791a      	ldrb	r2, [r3, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	791b      	ldrb	r3, [r3, #4]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d108      	bne.n	80005e6 <MYRTOS_Update_Schadule_Tables+0x9e>
			{
				//if the Ptask priority == PnextTask Priority then
				//Push Ptask to ready state
				//make the Ptask = PnextTask and PnextTask++
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 80005d4:	68b9      	ldr	r1, [r7, #8]
 80005d6:	480e      	ldr	r0, [pc, #56]	; (8000610 <MYRTOS_Update_Schadule_Tables+0xc8>)
 80005d8:	f7ff fe0c 	bl	80001f4 <FIFO_enqueue>
				Ptask->TaskState = ready ;
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	2203      	movs	r2, #3
 80005e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80005e4:	e005      	b.n	80005f2 <MYRTOS_Update_Schadule_Tables+0xaa>
			}
			else if (Ptask->priority > PnextTask->priority)
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	791a      	ldrb	r2, [r3, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	791b      	ldrb	r3, [r3, #4]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d809      	bhi.n	8000606 <MYRTOS_Update_Schadule_Tables+0xbe>
				break ;
			}
		}


		i++ ;
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	3301      	adds	r3, #1
 80005f6:	60fb      	str	r3, [r7, #12]
	while(i< OS_Control.NoOfActiveTasks)
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <MYRTOS_Update_Schadule_Tables+0xcc>)
 80005fa:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	429a      	cmp	r2, r3
 8000602:	d8b4      	bhi.n	800056e <MYRTOS_Update_Schadule_Tables+0x26>
	}

}
 8000604:	e000      	b.n	8000608 <MYRTOS_Update_Schadule_Tables+0xc0>
				break ;
 8000606:	bf00      	nop
}
 8000608:	bf00      	nop
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000260 	.word	0x20000260
 8000614:	200000b0 	.word	0x200000b0

08000618 <Decide_WhatNext>:

//Handler mode
void Decide_WhatNext()
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	//If Ready Queue is empty && OS_Control->currentTask != suspend
	if (Ready_QUEUE.counter == 0 && OS_Control.CurrentTask->TaskState != Suspend) //FIFO_EMPTY
 800061c:	4b24      	ldr	r3, [pc, #144]	; (80006b0 <Decide_WhatNext+0x98>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d11a      	bne.n	800065a <Decide_WhatNext+0x42>
 8000624:	4b23      	ldr	r3, [pc, #140]	; (80006b4 <Decide_WhatNext+0x9c>)
 8000626:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800062a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800062e:	2b00      	cmp	r3, #0
 8000630:	d013      	beq.n	800065a <Decide_WhatNext+0x42>
	{
		OS_Control.CurrentTask->TaskState = Running ;
 8000632:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <Decide_WhatNext+0x9c>)
 8000634:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000638:	2201      	movs	r2, #1
 800063a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		//Add the current task again(round robin)
		FIFO_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
 800063e:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <Decide_WhatNext+0x9c>)
 8000640:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000644:	4619      	mov	r1, r3
 8000646:	481a      	ldr	r0, [pc, #104]	; (80006b0 <Decide_WhatNext+0x98>)
 8000648:	f7ff fdd4 	bl	80001f4 <FIFO_enqueue>
		OS_Control.NextTask = OS_Control.CurrentTask ;
 800064c:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <Decide_WhatNext+0x9c>)
 800064e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000652:	4a18      	ldr	r2, [pc, #96]	; (80006b4 <Decide_WhatNext+0x9c>)
 8000654:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		{
			FIFO_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
			OS_Control.CurrentTask->TaskState = ready ;
		}
	}
}
 8000658:	e027      	b.n	80006aa <Decide_WhatNext+0x92>
		FIFO_dequeue(&Ready_QUEUE, &OS_Control.NextTask);
 800065a:	4917      	ldr	r1, [pc, #92]	; (80006b8 <Decide_WhatNext+0xa0>)
 800065c:	4814      	ldr	r0, [pc, #80]	; (80006b0 <Decide_WhatNext+0x98>)
 800065e:	f7ff fe0b 	bl	8000278 <FIFO_dequeue>
		OS_Control.NextTask->TaskState = Running ;
 8000662:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <Decide_WhatNext+0x9c>)
 8000664:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000668:	2201      	movs	r2, #1
 800066a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		if ((OS_Control.CurrentTask->priority == OS_Control.NextTask->priority )&&(OS_Control.CurrentTask->TaskState != Suspend))
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <Decide_WhatNext+0x9c>)
 8000670:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000674:	791a      	ldrb	r2, [r3, #4]
 8000676:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <Decide_WhatNext+0x9c>)
 8000678:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800067c:	791b      	ldrb	r3, [r3, #4]
 800067e:	429a      	cmp	r2, r3
 8000680:	d113      	bne.n	80006aa <Decide_WhatNext+0x92>
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <Decide_WhatNext+0x9c>)
 8000684:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000688:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800068c:	2b00      	cmp	r3, #0
 800068e:	d00c      	beq.n	80006aa <Decide_WhatNext+0x92>
			FIFO_enqueue(&Ready_QUEUE, OS_Control.CurrentTask);
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <Decide_WhatNext+0x9c>)
 8000692:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000696:	4619      	mov	r1, r3
 8000698:	4805      	ldr	r0, [pc, #20]	; (80006b0 <Decide_WhatNext+0x98>)
 800069a:	f7ff fdab 	bl	80001f4 <FIFO_enqueue>
			OS_Control.CurrentTask->TaskState = ready ;
 800069e:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <Decide_WhatNext+0x9c>)
 80006a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006a4:	2203      	movs	r2, #3
 80006a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000260 	.word	0x20000260
 80006b4:	200000b0 	.word	0x200000b0
 80006b8:	20000254 	.word	0x20000254

080006bc <OS_SVC>:


//Handler mode
void OS_SVC(int* StackFramePointer)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	//OS_SVC_Set stack start found in -> r0 , r0 is pointed by StackFramePointer
	//OS_SVC_Set stack : r0,r1,r2,r12,LR,PC,XPSR

	unsigned char SVC_number ;

	SVC_number = *((unsigned char*)(((unsigned char*)StackFramePointer[6])-2)) ;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	3318      	adds	r3, #24
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	3b02      	subs	r3, #2
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	73fb      	strb	r3, [r7, #15]

	switch(SVC_number)
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	db1f      	blt.n	8000716 <OS_SVC+0x5a>
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	dd02      	ble.n	80006e0 <OS_SVC+0x24>
 80006da:	2b02      	cmp	r3, #2
 80006dc:	d017      	beq.n	800070e <OS_SVC+0x52>
		//Update Scheduler Table , Ready Queue
		MYRTOS_Update_Schadule_Tables();
		break ;
	}

}
 80006de:	e01a      	b.n	8000716 <OS_SVC+0x5a>
		MYRTOS_Update_Schadule_Tables();
 80006e0:	f7ff ff32 	bl	8000548 <MYRTOS_Update_Schadule_Tables>
		if (OS_Control.OSmodeID == OSRunning)
 80006e4:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <OS_SVC+0x64>)
 80006e6:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d112      	bne.n	8000714 <OS_SVC+0x58>
			if (strcmp(OS_Control.CurrentTask->TaskName,"IdleTask") != 0)
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <OS_SVC+0x64>)
 80006f0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006f4:	331c      	adds	r3, #28
 80006f6:	490b      	ldr	r1, [pc, #44]	; (8000724 <OS_SVC+0x68>)
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff fd39 	bl	8000170 <strcmp>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d007      	beq.n	8000714 <OS_SVC+0x58>
				Decide_WhatNext();
 8000704:	f7ff ff88 	bl	8000618 <Decide_WhatNext>
				trigger_OS_PendSV();
 8000708:	f7ff fd52 	bl	80001b0 <trigger_OS_PendSV>
		break ;
 800070c:	e002      	b.n	8000714 <OS_SVC+0x58>
		MYRTOS_Update_Schadule_Tables();
 800070e:	f7ff ff1b 	bl	8000548 <MYRTOS_Update_Schadule_Tables>
		break ;
 8000712:	e000      	b.n	8000716 <OS_SVC+0x5a>
		break ;
 8000714:	bf00      	nop
}
 8000716:	bf00      	nop
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200000b0 	.word	0x200000b0
 8000724:	080018f8 	.word	0x080018f8

08000728 <MYRTOS_OS_SVC_Set>:

//Thread mode
void MYRTOS_OS_SVC_Set(SVC_ID ID)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
	switch(ID)
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d006      	beq.n	8000746 <MYRTOS_OS_SVC_Set+0x1e>
 8000738:	2b02      	cmp	r3, #2
 800073a:	d006      	beq.n	800074a <MYRTOS_OS_SVC_Set+0x22>
 800073c:	2b00      	cmp	r3, #0
 800073e:	d000      	beq.n	8000742 <MYRTOS_OS_SVC_Set+0x1a>
	case SVC_TaskWaiting :
		__asm("svc #0x02");

		break ;
	}
}
 8000740:	e005      	b.n	800074e <MYRTOS_OS_SVC_Set+0x26>
		__asm("svc #0x00");
 8000742:	df00      	svc	0
		break ;
 8000744:	e003      	b.n	800074e <MYRTOS_OS_SVC_Set+0x26>
		__asm("svc #0x01");
 8000746:	df01      	svc	1
		break ;
 8000748:	e001      	b.n	800074e <MYRTOS_OS_SVC_Set+0x26>
		__asm("svc #0x02");
 800074a:	df02      	svc	2
		break ;
 800074c:	bf00      	nop
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr

08000758 <MYRTOS_Update_TaskWaiting_Time>:
	MYRTOS_idleTask.p_TaskEntry();
}


void MYRTOS_Update_TaskWaiting_Time()
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
	int i ;
	for (i = 0 ; i < OS_Control.NoOfActiveTasks ; i++)
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	e031      	b.n	80007c8 <MYRTOS_Update_TaskWaiting_Time+0x70>
	{
		if ((OS_Control.OSTasks[i]->TaskState == Suspend) && (OS_Control.OSTasks[i]->TimingWaiting.Blocking == Enable ))
 8000764:	4a1d      	ldr	r2, [pc, #116]	; (80007dc <MYRTOS_Update_TaskWaiting_Time+0x84>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800076c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000770:	2b00      	cmp	r3, #0
 8000772:	d126      	bne.n	80007c2 <MYRTOS_Update_TaskWaiting_Time+0x6a>
 8000774:	4a19      	ldr	r2, [pc, #100]	; (80007dc <MYRTOS_Update_TaskWaiting_Time+0x84>)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800077c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000780:	2b00      	cmp	r3, #0
 8000782:	d11e      	bne.n	80007c2 <MYRTOS_Update_TaskWaiting_Time+0x6a>
		{
			OS_Control.OSTasks[i]->TimingWaiting.Ticks_Count-- ;
 8000784:	4a15      	ldr	r2, [pc, #84]	; (80007dc <MYRTOS_Update_TaskWaiting_Time+0x84>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800078c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800078e:	3a01      	subs	r2, #1
 8000790:	641a      	str	r2, [r3, #64]	; 0x40

			if(OS_Control.OSTasks[i]->TimingWaiting.Ticks_Count == 0)
 8000792:	4a12      	ldr	r2, [pc, #72]	; (80007dc <MYRTOS_Update_TaskWaiting_Time+0x84>)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	2b00      	cmp	r3, #0
 800079e:	d110      	bne.n	80007c2 <MYRTOS_Update_TaskWaiting_Time+0x6a>
			{
				OS_Control.OSTasks[i]->TimingWaiting.Blocking = Disable ;
 80007a0:	4a0e      	ldr	r2, [pc, #56]	; (80007dc <MYRTOS_Update_TaskWaiting_Time+0x84>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007a8:	2201      	movs	r2, #1
 80007aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				OS_Control.OSTasks[i]->TaskState = Waiting ;
 80007ae:	4a0b      	ldr	r2, [pc, #44]	; (80007dc <MYRTOS_Update_TaskWaiting_Time+0x84>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b6:	2202      	movs	r2, #2
 80007b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				MYRTOS_OS_SVC_Set(SVC_TaskWaiting);
 80007bc:	2002      	movs	r0, #2
 80007be:	f7ff ffb3 	bl	8000728 <MYRTOS_OS_SVC_Set>
	for (i = 0 ; i < OS_Control.NoOfActiveTasks ; i++)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	3301      	adds	r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	4b04      	ldr	r3, [pc, #16]	; (80007dc <MYRTOS_Update_TaskWaiting_Time+0x84>)
 80007ca:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d8c7      	bhi.n	8000764 <MYRTOS_Update_TaskWaiting_Time+0xc>
			}
		}
	}
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200000b0 	.word	0x200000b0

080007e0 <clock_init>:
#include "Stm32_F103C8_TIM_Driver.h"



void clock_init(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

	//Enable clock to AFIO
	AFIO_GPIO_CLK_EN();
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <clock_init+0x30>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	4a09      	ldr	r2, [pc, #36]	; (8000810 <clock_init+0x30>)
 80007ea:	f043 0301 	orr.w	r3, r3, #1
 80007ee:	6193      	str	r3, [r2, #24]
	//Enable clock to port A
	RCC_GPIOA_CLK_EN();
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <clock_init+0x30>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	4a06      	ldr	r2, [pc, #24]	; (8000810 <clock_init+0x30>)
 80007f6:	f043 0304 	orr.w	r3, r3, #4
 80007fa:	6193      	str	r3, [r2, #24]
	//Enable clock to port B
	RCC_GPIOB_CLK_EN();
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <clock_init+0x30>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	4a03      	ldr	r2, [pc, #12]	; (8000810 <clock_init+0x30>)
 8000802:	f043 0308 	orr.w	r3, r3, #8
 8000806:	6193      	str	r3, [r2, #24]


}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr
 8000810:	40021000 	.word	0x40021000

08000814 <main>:


int main(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
	clock_init();
 800081a:	f7ff ffe1 	bl	80007e0 <clock_init>


	TIM_Config_t timer_config ;


	timer_config.TIM_Mode =  TIM_Mode_PWM;
 800081e:	2302      	movs	r3, #2
 8000820:	803b      	strh	r3, [r7, #0]
	//timer_config.PWM.Channel = TIM_CHANNEL_4;
	timer_config.PWM.Ouptut_On_Compare_Match = PWM_Compare_Match_High;
 8000822:	2301      	movs	r3, #1
 8000824:	73bb      	strb	r3, [r7, #14]
	timer_config.PWM.Mode = PWM_Mode_EDGE_DOWN;
 8000826:	2302      	movs	r3, #2
 8000828:	72fb      	strb	r3, [r7, #11]
	timer_config.PWM.Compare_value = 45000;
 800082a:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 800082e:	81bb      	strh	r3, [r7, #12]
	timer_config.Prescaler = 8 ;
 8000830:	2308      	movs	r3, #8
 8000832:	807b      	strh	r3, [r7, #2]
	timer_config.Auto_Reload_Value = 60000 ;
 8000834:	f64e 2360 	movw	r3, #60000	; 0xea60
 8000838:	80fb      	strh	r3, [r7, #6]
	timer_config.IRQ_Enable = TIM_IRQ_MODE_None;
 800083a:	2300      	movs	r3, #0
 800083c:	823b      	strh	r3, [r7, #16]
	timer_config.P_IRQ_CallBack = NULL ;
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]

	MCAL_TIM_GPIO_Set_Pins(TIM3, TIM_CHANNEL_1, TIM_Mode_PWM);
 8000842:	2202      	movs	r2, #2
 8000844:	2101      	movs	r1, #1
 8000846:	481c      	ldr	r0, [pc, #112]	; (80008b8 <main+0xa4>)
 8000848:	f000 fe96 	bl	8001578 <MCAL_TIM_GPIO_Set_Pins>
	MCAL_TIM_GPIO_Set_Pins(TIM3, TIM_CHANNEL_2, TIM_Mode_PWM);
 800084c:	2202      	movs	r2, #2
 800084e:	2102      	movs	r1, #2
 8000850:	4819      	ldr	r0, [pc, #100]	; (80008b8 <main+0xa4>)
 8000852:	f000 fe91 	bl	8001578 <MCAL_TIM_GPIO_Set_Pins>
	MCAL_TIM_GPIO_Set_Pins(TIM3, TIM_CHANNEL_3, TIM_Mode_PWM);
 8000856:	2202      	movs	r2, #2
 8000858:	2103      	movs	r1, #3
 800085a:	4817      	ldr	r0, [pc, #92]	; (80008b8 <main+0xa4>)
 800085c:	f000 fe8c 	bl	8001578 <MCAL_TIM_GPIO_Set_Pins>
	MCAL_TIM_GPIO_Set_Pins(TIM3, TIM_CHANNEL_4, TIM_Mode_PWM);
 8000860:	2202      	movs	r2, #2
 8000862:	2104      	movs	r1, #4
 8000864:	4814      	ldr	r0, [pc, #80]	; (80008b8 <main+0xa4>)
 8000866:	f000 fe87 	bl	8001578 <MCAL_TIM_GPIO_Set_Pins>


	timer_config.PWM.Channel = TIM_CHANNEL_1;
 800086a:	2301      	movs	r3, #1
 800086c:	72bb      	strb	r3, [r7, #10]
	MCAL_TIM_Init(TIM3,&timer_config );
 800086e:	463b      	mov	r3, r7
 8000870:	4619      	mov	r1, r3
 8000872:	4811      	ldr	r0, [pc, #68]	; (80008b8 <main+0xa4>)
 8000874:	f000 fb8e 	bl	8000f94 <MCAL_TIM_Init>

	timer_config.PWM.Channel = TIM_CHANNEL_2;
 8000878:	2302      	movs	r3, #2
 800087a:	72bb      	strb	r3, [r7, #10]
	MCAL_TIM_Init(TIM3,&timer_config );
 800087c:	463b      	mov	r3, r7
 800087e:	4619      	mov	r1, r3
 8000880:	480d      	ldr	r0, [pc, #52]	; (80008b8 <main+0xa4>)
 8000882:	f000 fb87 	bl	8000f94 <MCAL_TIM_Init>

	timer_config.PWM.Compare_value = 15000;
 8000886:	f643 2398 	movw	r3, #15000	; 0x3a98
 800088a:	81bb      	strh	r3, [r7, #12]
	timer_config.Auto_Reload_Value = 60000 ;
 800088c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8000890:	80fb      	strh	r3, [r7, #6]
	timer_config.PWM.Channel = TIM_CHANNEL_3;
 8000892:	2303      	movs	r3, #3
 8000894:	72bb      	strb	r3, [r7, #10]
	MCAL_TIM_Init(TIM3,&timer_config );
 8000896:	463b      	mov	r3, r7
 8000898:	4619      	mov	r1, r3
 800089a:	4807      	ldr	r0, [pc, #28]	; (80008b8 <main+0xa4>)
 800089c:	f000 fb7a 	bl	8000f94 <MCAL_TIM_Init>

	timer_config.PWM.Channel = TIM_CHANNEL_4;
 80008a0:	2304      	movs	r3, #4
 80008a2:	72bb      	strb	r3, [r7, #10]
	MCAL_TIM_Init(TIM3,&timer_config );
 80008a4:	463b      	mov	r3, r7
 80008a6:	4619      	mov	r1, r3
 80008a8:	4803      	ldr	r0, [pc, #12]	; (80008b8 <main+0xa4>)
 80008aa:	f000 fb73 	bl	8000f94 <MCAL_TIM_Init>


	MCAL_TIM_Start(TIM3);
 80008ae:	4802      	ldr	r0, [pc, #8]	; (80008b8 <main+0xa4>)
 80008b0:	f000 ff94 	bl	80017dc <MCAL_TIM_Start>

	while (1)
 80008b4:	e7fe      	b.n	80008b4 <main+0xa0>
 80008b6:	bf00      	nop
 80008b8:	40000400 	.word	0x40000400

080008bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008bc:	480d      	ldr	r0, [pc, #52]	; (80008f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008be:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c4:	480c      	ldr	r0, [pc, #48]	; (80008f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80008c6:	490d      	ldr	r1, [pc, #52]	; (80008fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80008c8:	4a0d      	ldr	r2, [pc, #52]	; (8000900 <LoopForever+0xe>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008cc:	e002      	b.n	80008d4 <LoopCopyDataInit>

080008ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d2:	3304      	adds	r3, #4

080008d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d8:	d3f9      	bcc.n	80008ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008da:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008dc:	4c0a      	ldr	r4, [pc, #40]	; (8000908 <LoopForever+0x16>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e0:	e001      	b.n	80008e6 <LoopFillZerobss>

080008e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e4:	3204      	adds	r2, #4

080008e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e8:	d3fb      	bcc.n	80008e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008ea:	f000 ffd5 	bl	8001898 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ee:	f7ff ff91 	bl	8000814 <main>

080008f2 <LoopForever>:

LoopForever:
    b LoopForever
 80008f2:	e7fe      	b.n	80008f2 <LoopForever>
  ldr   r0, =_estack
 80008f4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80008f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008fc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000900:	0800190c 	.word	0x0800190c
  ldr r2, =_sbss
 8000904:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000908:	20000490 	.word	0x20000490

0800090c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800090c:	e7fe      	b.n	800090c <ADC1_2_IRQHandler>
	...

08000910 <EXTI0_IRQHandler>:
 * =====================================================================================
 */


void EXTI0_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	// cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= 1<<0;
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <EXTI0_IRQHandler+0x1c>)
 8000916:	695b      	ldr	r3, [r3, #20]
 8000918:	4a04      	ldr	r2, [pc, #16]	; (800092c <EXTI0_IRQHandler+0x1c>)
 800091a:	f043 0301 	orr.w	r3, r3, #1
 800091e:	6153      	str	r3, [r2, #20]
	//Call IRQ_CALL
	GP_IRQ_CallBack[0]();
 8000920:	4b03      	ldr	r3, [pc, #12]	; (8000930 <EXTI0_IRQHandler+0x20>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4798      	blx	r3
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40010400 	.word	0x40010400
 8000930:	2000001c 	.word	0x2000001c

08000934 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <EXTI1_IRQHandler+0x1c>)
 800093a:	695b      	ldr	r3, [r3, #20]
 800093c:	4a04      	ldr	r2, [pc, #16]	; (8000950 <EXTI1_IRQHandler+0x1c>)
 800093e:	f043 0302 	orr.w	r3, r3, #2
 8000942:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 8000944:	4b03      	ldr	r3, [pc, #12]	; (8000954 <EXTI1_IRQHandler+0x20>)
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	4798      	blx	r3
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40010400 	.word	0x40010400
 8000954:	2000001c 	.word	0x2000001c

08000958 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <EXTI2_IRQHandler+0x1c>)
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	4a04      	ldr	r2, [pc, #16]	; (8000974 <EXTI2_IRQHandler+0x1c>)
 8000962:	f043 0304 	orr.w	r3, r3, #4
 8000966:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 8000968:	4b03      	ldr	r3, [pc, #12]	; (8000978 <EXTI2_IRQHandler+0x20>)
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	4798      	blx	r3
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40010400 	.word	0x40010400
 8000978:	2000001c 	.word	0x2000001c

0800097c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <EXTI3_IRQHandler+0x1c>)
 8000982:	695b      	ldr	r3, [r3, #20]
 8000984:	4a04      	ldr	r2, [pc, #16]	; (8000998 <EXTI3_IRQHandler+0x1c>)
 8000986:	f043 0308 	orr.w	r3, r3, #8
 800098a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 800098c:	4b03      	ldr	r3, [pc, #12]	; (800099c <EXTI3_IRQHandler+0x20>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	4798      	blx	r3
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40010400 	.word	0x40010400
 800099c:	2000001c 	.word	0x2000001c

080009a0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <EXTI4_IRQHandler+0x1c>)
 80009a6:	695b      	ldr	r3, [r3, #20]
 80009a8:	4a04      	ldr	r2, [pc, #16]	; (80009bc <EXTI4_IRQHandler+0x1c>)
 80009aa:	f043 0310 	orr.w	r3, r3, #16
 80009ae:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 80009b0:	4b03      	ldr	r3, [pc, #12]	; (80009c0 <EXTI4_IRQHandler+0x20>)
 80009b2:	691b      	ldr	r3, [r3, #16]
 80009b4:	4798      	blx	r3
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40010400 	.word	0x40010400
 80009c0:	2000001c 	.word	0x2000001c

080009c4 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<5 ) { EXTI->PR |= 1<<5; GP_IRQ_CallBack[5](); }
 80009c8:	4b26      	ldr	r3, [pc, #152]	; (8000a64 <EXTI9_5_IRQHandler+0xa0>)
 80009ca:	695b      	ldr	r3, [r3, #20]
 80009cc:	f003 0320 	and.w	r3, r3, #32
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d008      	beq.n	80009e6 <EXTI9_5_IRQHandler+0x22>
 80009d4:	4b23      	ldr	r3, [pc, #140]	; (8000a64 <EXTI9_5_IRQHandler+0xa0>)
 80009d6:	695b      	ldr	r3, [r3, #20]
 80009d8:	4a22      	ldr	r2, [pc, #136]	; (8000a64 <EXTI9_5_IRQHandler+0xa0>)
 80009da:	f043 0320 	orr.w	r3, r3, #32
 80009de:	6153      	str	r3, [r2, #20]
 80009e0:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <EXTI9_5_IRQHandler+0xa4>)
 80009e2:	695b      	ldr	r3, [r3, #20]
 80009e4:	4798      	blx	r3
	if( EXTI->PR & 1<<6 ) { EXTI->PR |= 1<<6; GP_IRQ_CallBack[6](); }
 80009e6:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <EXTI9_5_IRQHandler+0xa0>)
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d008      	beq.n	8000a04 <EXTI9_5_IRQHandler+0x40>
 80009f2:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <EXTI9_5_IRQHandler+0xa0>)
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	4a1b      	ldr	r2, [pc, #108]	; (8000a64 <EXTI9_5_IRQHandler+0xa0>)
 80009f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009fc:	6153      	str	r3, [r2, #20]
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <EXTI9_5_IRQHandler+0xa4>)
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	4798      	blx	r3
	if( EXTI->PR & 1<<7 ) { EXTI->PR |= 1<<7; GP_IRQ_CallBack[7](); }
 8000a04:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <EXTI9_5_IRQHandler+0xa0>)
 8000a06:	695b      	ldr	r3, [r3, #20]
 8000a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d008      	beq.n	8000a22 <EXTI9_5_IRQHandler+0x5e>
 8000a10:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <EXTI9_5_IRQHandler+0xa0>)
 8000a12:	695b      	ldr	r3, [r3, #20]
 8000a14:	4a13      	ldr	r2, [pc, #76]	; (8000a64 <EXTI9_5_IRQHandler+0xa0>)
 8000a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a1a:	6153      	str	r3, [r2, #20]
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <EXTI9_5_IRQHandler+0xa4>)
 8000a1e:	69db      	ldr	r3, [r3, #28]
 8000a20:	4798      	blx	r3
	if( EXTI->PR & 1<<8 ) { EXTI->PR |= 1<<8; GP_IRQ_CallBack[8](); }
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <EXTI9_5_IRQHandler+0xa0>)
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d008      	beq.n	8000a40 <EXTI9_5_IRQHandler+0x7c>
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <EXTI9_5_IRQHandler+0xa0>)
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	4a0c      	ldr	r2, [pc, #48]	; (8000a64 <EXTI9_5_IRQHandler+0xa0>)
 8000a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a38:	6153      	str	r3, [r2, #20]
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <EXTI9_5_IRQHandler+0xa4>)
 8000a3c:	6a1b      	ldr	r3, [r3, #32]
 8000a3e:	4798      	blx	r3
	if( EXTI->PR & 1<<9 ) { EXTI->PR |= 1<<9; GP_IRQ_CallBack[9](); }
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <EXTI9_5_IRQHandler+0xa0>)
 8000a42:	695b      	ldr	r3, [r3, #20]
 8000a44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d008      	beq.n	8000a5e <EXTI9_5_IRQHandler+0x9a>
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <EXTI9_5_IRQHandler+0xa0>)
 8000a4e:	695b      	ldr	r3, [r3, #20]
 8000a50:	4a04      	ldr	r2, [pc, #16]	; (8000a64 <EXTI9_5_IRQHandler+0xa0>)
 8000a52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a56:	6153      	str	r3, [r2, #20]
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <EXTI9_5_IRQHandler+0xa4>)
 8000a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a5c:	4798      	blx	r3
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40010400 	.word	0x40010400
 8000a68:	2000001c 	.word	0x2000001c

08000a6c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<10 ) { EXTI->PR |= 1<<10; GP_IRQ_CallBack[10](); }
 8000a70:	4b2d      	ldr	r3, [pc, #180]	; (8000b28 <EXTI15_10_IRQHandler+0xbc>)
 8000a72:	695b      	ldr	r3, [r3, #20]
 8000a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d008      	beq.n	8000a8e <EXTI15_10_IRQHandler+0x22>
 8000a7c:	4b2a      	ldr	r3, [pc, #168]	; (8000b28 <EXTI15_10_IRQHandler+0xbc>)
 8000a7e:	695b      	ldr	r3, [r3, #20]
 8000a80:	4a29      	ldr	r2, [pc, #164]	; (8000b28 <EXTI15_10_IRQHandler+0xbc>)
 8000a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a86:	6153      	str	r3, [r2, #20]
 8000a88:	4b28      	ldr	r3, [pc, #160]	; (8000b2c <EXTI15_10_IRQHandler+0xc0>)
 8000a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a8c:	4798      	blx	r3
	if( EXTI->PR & 1<<11 ) { EXTI->PR |= 1<<11; GP_IRQ_CallBack[11](); }
 8000a8e:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <EXTI15_10_IRQHandler+0xbc>)
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d008      	beq.n	8000aac <EXTI15_10_IRQHandler+0x40>
 8000a9a:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <EXTI15_10_IRQHandler+0xbc>)
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	4a22      	ldr	r2, [pc, #136]	; (8000b28 <EXTI15_10_IRQHandler+0xbc>)
 8000aa0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000aa4:	6153      	str	r3, [r2, #20]
 8000aa6:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <EXTI15_10_IRQHandler+0xc0>)
 8000aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aaa:	4798      	blx	r3
	if( EXTI->PR & 1<<12 ) { EXTI->PR |= 1<<12; GP_IRQ_CallBack[12](); }
 8000aac:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <EXTI15_10_IRQHandler+0xbc>)
 8000aae:	695b      	ldr	r3, [r3, #20]
 8000ab0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d008      	beq.n	8000aca <EXTI15_10_IRQHandler+0x5e>
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <EXTI15_10_IRQHandler+0xbc>)
 8000aba:	695b      	ldr	r3, [r3, #20]
 8000abc:	4a1a      	ldr	r2, [pc, #104]	; (8000b28 <EXTI15_10_IRQHandler+0xbc>)
 8000abe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ac2:	6153      	str	r3, [r2, #20]
 8000ac4:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <EXTI15_10_IRQHandler+0xc0>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac8:	4798      	blx	r3
	if( EXTI->PR & 1<<13 ) { EXTI->PR |= 1<<13; GP_IRQ_CallBack[13](); }
 8000aca:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <EXTI15_10_IRQHandler+0xbc>)
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d008      	beq.n	8000ae8 <EXTI15_10_IRQHandler+0x7c>
 8000ad6:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <EXTI15_10_IRQHandler+0xbc>)
 8000ad8:	695b      	ldr	r3, [r3, #20]
 8000ada:	4a13      	ldr	r2, [pc, #76]	; (8000b28 <EXTI15_10_IRQHandler+0xbc>)
 8000adc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ae0:	6153      	str	r3, [r2, #20]
 8000ae2:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <EXTI15_10_IRQHandler+0xc0>)
 8000ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ae6:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<14; GP_IRQ_CallBack[14](); }
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <EXTI15_10_IRQHandler+0xbc>)
 8000aea:	695b      	ldr	r3, [r3, #20]
 8000aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d008      	beq.n	8000b06 <EXTI15_10_IRQHandler+0x9a>
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <EXTI15_10_IRQHandler+0xbc>)
 8000af6:	695b      	ldr	r3, [r3, #20]
 8000af8:	4a0b      	ldr	r2, [pc, #44]	; (8000b28 <EXTI15_10_IRQHandler+0xbc>)
 8000afa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afe:	6153      	str	r3, [r2, #20]
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <EXTI15_10_IRQHandler+0xc0>)
 8000b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b04:	4798      	blx	r3
	if( EXTI->PR & 1<<14 ) { EXTI->PR |= 1<<15; GP_IRQ_CallBack[15](); }
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <EXTI15_10_IRQHandler+0xbc>)
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d008      	beq.n	8000b24 <EXTI15_10_IRQHandler+0xb8>
 8000b12:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <EXTI15_10_IRQHandler+0xbc>)
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <EXTI15_10_IRQHandler+0xbc>)
 8000b18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b1c:	6153      	str	r3, [r2, #20]
 8000b1e:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <EXTI15_10_IRQHandler+0xc0>)
 8000b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b22:	4798      	blx	r3
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40010400 	.word	0x40010400
 8000b2c:	2000001c 	.word	0x2000001c

08000b30 <Get_CRLH_Position>:

#include "Stm32_F103C6_GPIO_Driver.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 8000b3a:	88fb      	ldrh	r3, [r7, #6]
 8000b3c:	2b80      	cmp	r3, #128	; 0x80
 8000b3e:	d042      	beq.n	8000bc6 <Get_CRLH_Position+0x96>
 8000b40:	2b80      	cmp	r3, #128	; 0x80
 8000b42:	dc11      	bgt.n	8000b68 <Get_CRLH_Position+0x38>
 8000b44:	2b08      	cmp	r3, #8
 8000b46:	d036      	beq.n	8000bb6 <Get_CRLH_Position+0x86>
 8000b48:	2b08      	cmp	r3, #8
 8000b4a:	dc06      	bgt.n	8000b5a <Get_CRLH_Position+0x2a>
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d02e      	beq.n	8000bae <Get_CRLH_Position+0x7e>
 8000b50:	2b04      	cmp	r3, #4
 8000b52:	d02e      	beq.n	8000bb2 <Get_CRLH_Position+0x82>
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d028      	beq.n	8000baa <Get_CRLH_Position+0x7a>
 8000b58:	e047      	b.n	8000bea <Get_CRLH_Position+0xba>
 8000b5a:	2b20      	cmp	r3, #32
 8000b5c:	d02f      	beq.n	8000bbe <Get_CRLH_Position+0x8e>
 8000b5e:	2b40      	cmp	r3, #64	; 0x40
 8000b60:	d02f      	beq.n	8000bc2 <Get_CRLH_Position+0x92>
 8000b62:	2b10      	cmp	r3, #16
 8000b64:	d029      	beq.n	8000bba <Get_CRLH_Position+0x8a>
 8000b66:	e040      	b.n	8000bea <Get_CRLH_Position+0xba>
 8000b68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b6c:	d033      	beq.n	8000bd6 <Get_CRLH_Position+0xa6>
 8000b6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b72:	dc09      	bgt.n	8000b88 <Get_CRLH_Position+0x58>
 8000b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b78:	d029      	beq.n	8000bce <Get_CRLH_Position+0x9e>
 8000b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b7e:	d028      	beq.n	8000bd2 <Get_CRLH_Position+0xa2>
 8000b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b84:	d021      	beq.n	8000bca <Get_CRLH_Position+0x9a>
 8000b86:	e030      	b.n	8000bea <Get_CRLH_Position+0xba>
 8000b88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b8c:	d027      	beq.n	8000bde <Get_CRLH_Position+0xae>
 8000b8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b92:	dc03      	bgt.n	8000b9c <Get_CRLH_Position+0x6c>
 8000b94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b98:	d01f      	beq.n	8000bda <Get_CRLH_Position+0xaa>
 8000b9a:	e026      	b.n	8000bea <Get_CRLH_Position+0xba>
 8000b9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ba0:	d01f      	beq.n	8000be2 <Get_CRLH_Position+0xb2>
 8000ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ba6:	d01e      	beq.n	8000be6 <Get_CRLH_Position+0xb6>
 8000ba8:	e01f      	b.n	8000bea <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	e01e      	b.n	8000bec <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_1:
		return 4;
 8000bae:	2304      	movs	r3, #4
 8000bb0:	e01c      	b.n	8000bec <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_2:
		return 8;
 8000bb2:	2308      	movs	r3, #8
 8000bb4:	e01a      	b.n	8000bec <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_3:
		return 12;
 8000bb6:	230c      	movs	r3, #12
 8000bb8:	e018      	b.n	8000bec <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_4:
		return 16;
 8000bba:	2310      	movs	r3, #16
 8000bbc:	e016      	b.n	8000bec <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_5:
		return 20;
 8000bbe:	2314      	movs	r3, #20
 8000bc0:	e014      	b.n	8000bec <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_6:
		return 24;
 8000bc2:	2318      	movs	r3, #24
 8000bc4:	e012      	b.n	8000bec <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_7:
		return 28;
 8000bc6:	231c      	movs	r3, #28
 8000bc8:	e010      	b.n	8000bec <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_8:
		return 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e00e      	b.n	8000bec <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_9:
		return 4;
 8000bce:	2304      	movs	r3, #4
 8000bd0:	e00c      	b.n	8000bec <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_10:
		return 8;
 8000bd2:	2308      	movs	r3, #8
 8000bd4:	e00a      	b.n	8000bec <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_11:
		return 12;
 8000bd6:	230c      	movs	r3, #12
 8000bd8:	e008      	b.n	8000bec <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_12:
		return 16;
 8000bda:	2310      	movs	r3, #16
 8000bdc:	e006      	b.n	8000bec <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_13:
		return 20;
 8000bde:	2314      	movs	r3, #20
 8000be0:	e004      	b.n	8000bec <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_14:
		return 24;
 8000be2:	2318      	movs	r3, #24
 8000be4:	e002      	b.n	8000bec <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_15:
		return 28;
 8000be6:	231c      	movs	r3, #28
 8000be8:	e000      	b.n	8000bec <Get_CRLH_Position+0xbc>
		break;

	default:
		return 0;
 8000bea:	2300      	movs	r3, #0
		break;
	}
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr

08000bf6 <MCAL_GPIO_Init>:
 * @retval			- none
 * Note				- stm32F103c6 MCU has GPIO A,B,C,D,E Modules
 * 					  But LQFP48 package has only GPIO A,B,Part of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx,GPIO_PinConfig_t *PinConfig)
{
 8000bf6:	b590      	push	{r4, r7, lr}
 8000bf8:	b085      	sub	sp, #20
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	6039      	str	r1, [r7, #0]
	// Port configuration register low  (GPIOx_CRL) configure PINS from 0 ==> 7
	// Port configuration register high (GPIOx_CRH) configure PINS from 8 ==> 15

	volatile uint32_t* configregister = NULL ;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_CONFIG = 0 ;
 8000c04:	2300      	movs	r3, #0
 8000c06:	73fb      	strb	r3, [r7, #15]
	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ?  &GPIOx->CRL : &GPIOx->CRH ;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	2bff      	cmp	r3, #255	; 0xff
 8000c0e:	d801      	bhi.n	8000c14 <MCAL_GPIO_Init+0x1e>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	e001      	b.n	8000c18 <MCAL_GPIO_Init+0x22>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3304      	adds	r3, #4
 8000c18:	60bb      	str	r3, [r7, #8]

	//clear CNF MODE
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ff86 	bl	8000b30 <Get_CRLH_Position>
 8000c24:	4603      	mov	r3, r0
 8000c26:	461a      	mov	r2, r3
 8000c28:	230f      	movs	r3, #15
 8000c2a:	4093      	lsls	r3, r2
 8000c2c:	43da      	mvns	r2, r3
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	401a      	ands	r2, r3
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	601a      	str	r2, [r3, #0]

	//if PIN is output
	if ( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)|| (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) )
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	789b      	ldrb	r3, [r3, #2]
 8000c3c:	2b07      	cmp	r3, #7
 8000c3e:	d00b      	beq.n	8000c58 <MCAL_GPIO_Init+0x62>
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	789b      	ldrb	r3, [r3, #2]
 8000c44:	2b06      	cmp	r3, #6
 8000c46:	d007      	beq.n	8000c58 <MCAL_GPIO_Init+0x62>
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	789b      	ldrb	r3, [r3, #2]
 8000c4c:	2b05      	cmp	r3, #5
 8000c4e:	d003      	beq.n	8000c58 <MCAL_GPIO_Init+0x62>
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	789b      	ldrb	r3, [r3, #2]
 8000c54:	2b04      	cmp	r3, #4
 8000c56:	d10e      	bne.n	8000c76 <MCAL_GPIO_Init+0x80>
	{
		//Set CNF MODE
		PIN_CONFIG = ( (((PinConfig->GPIO_MODE -4 ) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0f) ;
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	789b      	ldrb	r3, [r3, #2]
 8000c5c:	3b04      	subs	r3, #4
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	b25a      	sxtb	r2, r3
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	78db      	ldrb	r3, [r3, #3]
 8000c66:	b25b      	sxtb	r3, r3
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	b25b      	sxtb	r3, r3
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	f003 030f 	and.w	r3, r3, #15
 8000c72:	73fb      	strb	r3, [r7, #15]
 8000c74:	e02c      	b.n	8000cd0 <MCAL_GPIO_Init+0xda>
	}

	else
	{
		if ( (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog) )
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	789b      	ldrb	r3, [r3, #2]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d003      	beq.n	8000c86 <MCAL_GPIO_Init+0x90>
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	789b      	ldrb	r3, [r3, #2]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d107      	bne.n	8000c96 <MCAL_GPIO_Init+0xa0>
		{
			//set CNF
			PIN_CONFIG = ( (((PinConfig->GPIO_MODE ) << 2) | (0x00)) & 0x0f) ;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	789b      	ldrb	r3, [r3, #2]
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	f003 030f 	and.w	r3, r3, #15
 8000c92:	73fb      	strb	r3, [r7, #15]
 8000c94:	e01c      	b.n	8000cd0 <MCAL_GPIO_Init+0xda>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF ) //Consider it as input floating
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	789b      	ldrb	r3, [r3, #2]
 8000c9a:	2b08      	cmp	r3, #8
 8000c9c:	d102      	bne.n	8000ca4 <MCAL_GPIO_Init+0xae>
		{
			PIN_CONFIG = ( (((GPIO_MODE_INPUT_FLO) << 2) | (0x00)) & 0x0f) ;
 8000c9e:	2304      	movs	r3, #4
 8000ca0:	73fb      	strb	r3, [r7, #15]
 8000ca2:	e015      	b.n	8000cd0 <MCAL_GPIO_Init+0xda>
		}
		else //PU PD
		{
			PIN_CONFIG = ( (((GPIO_MODE_INPUT_PU) << 2) | (0x00)) & 0x0f) ;
 8000ca4:	2308      	movs	r3, #8
 8000ca6:	73fb      	strb	r3, [r7, #15]

			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	789b      	ldrb	r3, [r3, #2]
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d107      	bne.n	8000cc0 <MCAL_GPIO_Init+0xca>
			{
				// PXODR = 1 Input pull up
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	8812      	ldrh	r2, [r2, #0]
 8000cb8:	431a      	orrs	r2, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	e007      	b.n	8000cd0 <MCAL_GPIO_Init+0xda>
			}

			else
			{
				// PXODR = 0 Input pull down
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	683a      	ldr	r2, [r7, #0]
 8000cc6:	8812      	ldrh	r2, [r2, #0]
 8000cc8:	43d2      	mvns	r2, r2
 8000cca:	401a      	ands	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//write on CRL or CRH
	(*configregister) |= ( (PIN_CONFIG) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;
 8000cd0:	7bfc      	ldrb	r4, [r7, #15]
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff ff2a 	bl	8000b30 <Get_CRLH_Position>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	fa04 f203 	lsl.w	r2, r4, r3
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	431a      	orrs	r2, r3
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	601a      	str	r2, [r3, #0]


}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd90      	pop	{r4, r7, pc}

08000cf4 <Slave_States>:
	/*Send The Address*/
	I2Cx->DR = Address ;
}

void Slave_States(I2C_TypeDef *I2Cx,Slave_State State)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	70fb      	strb	r3, [r7, #3]
	uint8_t index = (I2Cx == I2C1) ? I2C1_INDEX : I2C2_INDEX ;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a32      	ldr	r2, [pc, #200]	; (8000dcc <Slave_States+0xd8>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	bf14      	ite	ne
 8000d08:	2301      	movne	r3, #1
 8000d0a:	2300      	moveq	r3, #0
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	73fb      	strb	r3, [r7, #15]

	switch(State)
 8000d10:	78fb      	ldrb	r3, [r7, #3]
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	d856      	bhi.n	8000dc4 <Slave_States+0xd0>
 8000d16:	a201      	add	r2, pc, #4	; (adr r2, 8000d1c <Slave_States+0x28>)
 8000d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1c:	08000d37 	.word	0x08000d37
 8000d20:	08000d31 	.word	0x08000d31
 8000d24:	08000d5b 	.word	0x08000d5b
 8000d28:	08000d73 	.word	0x08000d73
 8000d2c:	08000d97 	.word	0x08000d97
	{
	case I2C_ERROR_AF:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	699b      	ldr	r3, [r3, #24]
		{
			//Slave shouldn't send anything else
		}
		break;
 8000d34:	e046      	b.n	8000dc4 <Slave_States+0xd0>

	case I2C_EV_STOP:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	f003 0304 	and.w	r3, r3, #4
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d03b      	beq.n	8000dba <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is Sent by the master
			Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_STOP);
 8000d42:	7bfa      	ldrb	r2, [r7, #15]
 8000d44:	4922      	ldr	r1, [pc, #136]	; (8000dd0 <Slave_States+0xdc>)
 8000d46:	4613      	mov	r3, r2
 8000d48:	00db      	lsls	r3, r3, #3
 8000d4a:	4413      	add	r3, r2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	440b      	add	r3, r1
 8000d50:	3320      	adds	r3, #32
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2000      	movs	r0, #0
 8000d56:	4798      	blx	r3
		}
		break;
 8000d58:	e02f      	b.n	8000dba <Slave_States+0xc6>

	case I2C_EV_ADDR_Matched:
		//Notify APP that The address is matched with The slave address
		Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_ADDR_Matched);
 8000d5a:	7bfa      	ldrb	r2, [r7, #15]
 8000d5c:	491c      	ldr	r1, [pc, #112]	; (8000dd0 <Slave_States+0xdc>)
 8000d5e:	4613      	mov	r3, r2
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	4413      	add	r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	440b      	add	r3, r1
 8000d68:	3320      	adds	r3, #32
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2002      	movs	r0, #2
 8000d6e:	4798      	blx	r3
		break;
 8000d70:	e028      	b.n	8000dc4 <Slave_States+0xd0>

	case I2C_EV_DATA_REQ:
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	f003 0304 	and.w	r3, r3, #4
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d01f      	beq.n	8000dbe <Slave_States+0xca>
		{
			//The APP Layer should send the data (MCAL_I2C_SlaveSendData)in this state
			Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_DATA_REQ);
 8000d7e:	7bfa      	ldrb	r2, [r7, #15]
 8000d80:	4913      	ldr	r1, [pc, #76]	; (8000dd0 <Slave_States+0xdc>)
 8000d82:	4613      	mov	r3, r2
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	4413      	add	r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	3320      	adds	r3, #32
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2003      	movs	r0, #3
 8000d92:	4798      	blx	r3
		}

		break;
 8000d94:	e013      	b.n	8000dbe <Slave_States+0xca>

	case I2C_EV_DATA_RCV:
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & (I2C_SR2_TRA)) )
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	f003 0304 	and.w	r3, r3, #4
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d10f      	bne.n	8000dc2 <Slave_States+0xce>
		{
			//The APP Layer should read the data (MCAL_I2C_SlaveReceiveData)in this state
			Global_I2C_Config[index].P_Slave_Event_CallBack(I2C_EV_DATA_RCV);
 8000da2:	7bfa      	ldrb	r2, [r7, #15]
 8000da4:	490a      	ldr	r1, [pc, #40]	; (8000dd0 <Slave_States+0xdc>)
 8000da6:	4613      	mov	r3, r2
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	4413      	add	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	440b      	add	r3, r1
 8000db0:	3320      	adds	r3, #32
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2004      	movs	r0, #4
 8000db6:	4798      	blx	r3
		}

		break;
 8000db8:	e003      	b.n	8000dc2 <Slave_States+0xce>
		break;
 8000dba:	bf00      	nop
 8000dbc:	e002      	b.n	8000dc4 <Slave_States+0xd0>
		break;
 8000dbe:	bf00      	nop
 8000dc0:	e000      	b.n	8000dc4 <Slave_States+0xd0>
		break;
 8000dc2:	bf00      	nop
	}
}
 8000dc4:	bf00      	nop
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40005400 	.word	0x40005400
 8000dd0:	20000058 	.word	0x20000058

08000dd4 <I2C1_EV_IRQHandler>:
 * 							ISR Functions
 * =====================================================================================
 */

void I2C1_EV_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
	volatile uint32_t dummyRead = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
	I2C_TypeDef* I2Cx =I2C1 ;
 8000dde:	4b35      	ldr	r3, [pc, #212]	; (8000eb4 <I2C1_EV_IRQHandler+0xe0>)
 8000de0:	617b      	str	r3, [r7, #20]
	//Interrupt Handler for both master and slave mode of a device
	uint32_t temp1, temp2, temp3;

	temp1 = I2Cx->CR2 & (I2C_CR2_ITEVTEN);
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dea:	613b      	str	r3, [r7, #16]
	temp2 = I2Cx->CR2 & (I2C_CR2_ITBUFEN);
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000df4:	60fb      	str	r3, [r7, #12]

	temp3 = I2Cx->SR1 & (I2C_SR1_STOPF);
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	f003 0310 	and.w	r3, r3, #16
 8000dfe:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by STOPF event
	//Note : Stop detection flag is applicable only slave mode
	if(temp1 && temp3)
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d00c      	beq.n	8000e20 <I2C1_EV_IRQHandler+0x4c>
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d009      	beq.n	8000e20 <I2C1_EV_IRQHandler+0x4c>
	{
		// STOP Flag is Set
		// Clear the STOPF by reading SR1 register followed by writing to CR1 register
		dummyRead = I2Cx->SR1;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	607b      	str	r3, [r7, #4]
		I2Cx->CR1 = 0x0000;
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
		Slave_States(I2Cx,I2C_EV_STOP);
 8000e18:	2100      	movs	r1, #0
 8000e1a:	6978      	ldr	r0, [r7, #20]
 8000e1c:	f7ff ff6a 	bl	8000cf4 <Slave_States>
	}

	/*---------------------------------------------------*/
	temp3 = I2Cx->SR1 & (I2C_SR1_ADDR);
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	695b      	ldr	r3, [r3, #20]
 8000e24:	f003 0302 	and.w	r3, r3, #2
 8000e28:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by ADDR event
	//Note :When master mode : Address is sent
	//		When slave mode  : Address is matched with own address
	if(temp1 && temp3)
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d012      	beq.n	8000e56 <I2C1_EV_IRQHandler+0x82>
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d00f      	beq.n	8000e56 <I2C1_EV_IRQHandler+0x82>
	{
		// Interrupt is generated because of ADDR event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d109      	bne.n	8000e56 <I2C1_EV_IRQHandler+0x82>
		}
		else
		{
			//Slave mode
			//Clear the ADDR flag (Read SR1 , Read SR2)
			dummyRead = I2Cx->SR1;
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	607b      	str	r3, [r7, #4]
			dummyRead = I2Cx->SR2;
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	607b      	str	r3, [r7, #4]
			Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 8000e4e:	2102      	movs	r1, #2
 8000e50:	6978      	ldr	r0, [r7, #20]
 8000e52:	f7ff ff4f 	bl	8000cf4 <Slave_States>
		}
	}

	/*---------------------------------------------------*/
	temp3 = I2Cx->SR1 & (I2C_SR1_TXE);
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e5e:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by TXE event
	if(temp1 && temp3)
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d00c      	beq.n	8000e80 <I2C1_EV_IRQHandler+0xac>
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d009      	beq.n	8000e80 <I2C1_EV_IRQHandler+0xac>
	{
		// Interrupt is generated because of TXE event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d103      	bne.n	8000e80 <I2C1_EV_IRQHandler+0xac>
			//Master mode
		}
		else
		{
			//Slave mode
			Slave_States(I2Cx,I2C_EV_DATA_REQ);
 8000e78:	2103      	movs	r1, #3
 8000e7a:	6978      	ldr	r0, [r7, #20]
 8000e7c:	f7ff ff3a 	bl	8000cf4 <Slave_States>
		}
	}
	/*---------------------------------------------------*/
	temp3 = I2Cx->SR1 & (I2C_SR1_RXNE);
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e88:	60bb      	str	r3, [r7, #8]

	//Handle For Interrupt generated by RXNE event
	if(temp1 && temp3)
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d00c      	beq.n	8000eaa <I2C1_EV_IRQHandler+0xd6>
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d009      	beq.n	8000eaa <I2C1_EV_IRQHandler+0xd6>
	{
		// Interrupt is generated because of RXNE event
		// check for device mode
		if(I2Cx->SR2 & (I2C_SR2_MSL))
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d103      	bne.n	8000eaa <I2C1_EV_IRQHandler+0xd6>
			//Master mode
		}
		else
		{
			//Slave mode
			Slave_States(I2Cx,I2C_EV_DATA_RCV);
 8000ea2:	2104      	movs	r1, #4
 8000ea4:	6978      	ldr	r0, [r7, #20]
 8000ea6:	f7ff ff25 	bl	8000cf4 <Slave_States>
		}
	}
}
 8000eaa:	bf00      	nop
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40005400 	.word	0x40005400

08000eb8 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0

}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr

08000ec4 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
//			//Slave mode
//			Slave_States(I2Cx,I2C_EV_DATA_RCV);
//		}
//	}

}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr

08000ed0 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0

}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <SPI1_IRQHandler>:
 * 							ISR Functions
 * =====================================================================================
 */

void SPI1_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;

	irq_src.TXE  = ( ( SPI1->SPI_SR  & (1<<1)) >> 1 ) ;
 8000ee2:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <SPI1_IRQHandler+0x54>)
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	085b      	lsrs	r3, r3, #1
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	793b      	ldrb	r3, [r7, #4]
 8000ef0:	f362 0300 	bfi	r3, r2, #0, #1
 8000ef4:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI1->SPI_SR  & (1<<0)) >> 0 ) ;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <SPI1_IRQHandler+0x54>)
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	793b      	ldrb	r3, [r7, #4]
 8000f02:	f362 0341 	bfi	r3, r2, #1, #1
 8000f06:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI1->SPI_SR  & (1<<4)) >> 4 ) ;
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <SPI1_IRQHandler+0x54>)
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	091b      	lsrs	r3, r3, #4
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	793b      	ldrb	r3, [r7, #4]
 8000f16:	f362 0382 	bfi	r3, r2, #2, #1
 8000f1a:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(irq_src);
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <SPI1_IRQHandler+0x58>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	7938      	ldrb	r0, [r7, #4]
 8000f24:	4798      	blx	r3
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40013000 	.word	0x40013000
 8000f34:	200000a0 	.word	0x200000a0

08000f38 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;

	irq_src.TXE  = ( ( SPI1->SPI_SR  & (1<<1)) >> 1 ) ;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <SPI2_IRQHandler+0x54>)
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	085b      	lsrs	r3, r3, #1
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	793b      	ldrb	r3, [r7, #4]
 8000f4c:	f362 0300 	bfi	r3, r2, #0, #1
 8000f50:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI1->SPI_SR  & (1<<0)) >> 0 ) ;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <SPI2_IRQHandler+0x54>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	793b      	ldrb	r3, [r7, #4]
 8000f5e:	f362 0341 	bfi	r3, r2, #1, #1
 8000f62:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI1->SPI_SR  & (1<<4)) >> 4 ) ;
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <SPI2_IRQHandler+0x54>)
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	091b      	lsrs	r3, r3, #4
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	793b      	ldrb	r3, [r7, #4]
 8000f72:	f362 0382 	bfi	r3, r2, #2, #1
 8000f76:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(irq_src);
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <SPI2_IRQHandler+0x58>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	7938      	ldrb	r0, [r7, #4]
 8000f80:	4798      	blx	r3
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40013000 	.word	0x40013000
 8000f90:	200000a0 	.word	0x200000a0

08000f94 <MCAL_TIM_Init>:
 * @retval		 -none
 * Note			 -none
 */

Error_status MCAL_TIM_Init(TIM_TypeDef *TIMx,TIM_Config_t *TIM_Config)
{
 8000f94:	b4b0      	push	{r4, r5, r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]


	//Clock & Configurations
	if (TIMx == TIM2)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fa4:	d116      	bne.n	8000fd4 <MCAL_TIM_Init+0x40>
	{
		RCC_TIM2_CLK_EN();
 8000fa6:	4b91      	ldr	r3, [pc, #580]	; (80011ec <MCAL_TIM_Init+0x258>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	4a90      	ldr	r2, [pc, #576]	; (80011ec <MCAL_TIM_Init+0x258>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	61d3      	str	r3, [r2, #28]
		Global_TIM_Config[0] = *TIM_Config ;
 8000fb2:	4a8f      	ldr	r2, [pc, #572]	; (80011f0 <MCAL_TIM_Init+0x25c>)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	4614      	mov	r4, r2
 8000fb8:	461d      	mov	r5, r3
 8000fba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fbe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fc2:	e884 0003 	stmia.w	r4, {r0, r1}
		NVIC_IQR28_TIM2_Enable();
 8000fc6:	4b8b      	ldr	r3, [pc, #556]	; (80011f4 <MCAL_TIM_Init+0x260>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a8a      	ldr	r2, [pc, #552]	; (80011f4 <MCAL_TIM_Init+0x260>)
 8000fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	e039      	b.n	8001048 <MCAL_TIM_Init+0xb4>
	}
	else if (TIMx == TIM3)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a88      	ldr	r2, [pc, #544]	; (80011f8 <MCAL_TIM_Init+0x264>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d117      	bne.n	800100c <MCAL_TIM_Init+0x78>
	{
		RCC_TIM3_CLK_EN();
 8000fdc:	4b83      	ldr	r3, [pc, #524]	; (80011ec <MCAL_TIM_Init+0x258>)
 8000fde:	69db      	ldr	r3, [r3, #28]
 8000fe0:	4a82      	ldr	r2, [pc, #520]	; (80011ec <MCAL_TIM_Init+0x258>)
 8000fe2:	f043 0302 	orr.w	r3, r3, #2
 8000fe6:	61d3      	str	r3, [r2, #28]
		Global_TIM_Config[1] = *TIM_Config ;
 8000fe8:	4b81      	ldr	r3, [pc, #516]	; (80011f0 <MCAL_TIM_Init+0x25c>)
 8000fea:	683a      	ldr	r2, [r7, #0]
 8000fec:	f103 0418 	add.w	r4, r3, #24
 8000ff0:	4615      	mov	r5, r2
 8000ff2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ff6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ffa:	e884 0003 	stmia.w	r4, {r0, r1}
		NVIC_IQR29_TIM3_Enable();
 8000ffe:	4b7d      	ldr	r3, [pc, #500]	; (80011f4 <MCAL_TIM_Init+0x260>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a7c      	ldr	r2, [pc, #496]	; (80011f4 <MCAL_TIM_Init+0x260>)
 8001004:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001008:	6013      	str	r3, [r2, #0]
 800100a:	e01d      	b.n	8001048 <MCAL_TIM_Init+0xb4>

	}
	else if (TIMx == TIM4)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a7b      	ldr	r2, [pc, #492]	; (80011fc <MCAL_TIM_Init+0x268>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d117      	bne.n	8001044 <MCAL_TIM_Init+0xb0>
	{
		RCC_TIM4_CLK_EN();
 8001014:	4b75      	ldr	r3, [pc, #468]	; (80011ec <MCAL_TIM_Init+0x258>)
 8001016:	69db      	ldr	r3, [r3, #28]
 8001018:	4a74      	ldr	r2, [pc, #464]	; (80011ec <MCAL_TIM_Init+0x258>)
 800101a:	f043 0304 	orr.w	r3, r3, #4
 800101e:	61d3      	str	r3, [r2, #28]
		Global_TIM_Config[2] = *TIM_Config ;
 8001020:	4b73      	ldr	r3, [pc, #460]	; (80011f0 <MCAL_TIM_Init+0x25c>)
 8001022:	683a      	ldr	r2, [r7, #0]
 8001024:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001028:	4615      	mov	r5, r2
 800102a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800102c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800102e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001032:	e884 0003 	stmia.w	r4, {r0, r1}
		NVIC_IQR30_TIM4_Enable();
 8001036:	4b6f      	ldr	r3, [pc, #444]	; (80011f4 <MCAL_TIM_Init+0x260>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a6e      	ldr	r2, [pc, #440]	; (80011f4 <MCAL_TIM_Init+0x260>)
 800103c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001040:	6013      	str	r3, [r2, #0]
 8001042:	e001      	b.n	8001048 <MCAL_TIM_Init+0xb4>
	}
	else
	{
		return TIMx_NOT_Found ;
 8001044:	2301      	movs	r3, #1
 8001046:	e291      	b.n	800156c <MCAL_TIM_Init+0x5d8>



	//Mode Selection

	switch(TIM_Config->TIM_Mode)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d002      	beq.n	8001056 <MCAL_TIM_Init+0xc2>
 8001050:	2b02      	cmp	r3, #2
 8001052:	d034      	beq.n	80010be <MCAL_TIM_Init+0x12a>
 8001054:	e231      	b.n	80014ba <MCAL_TIM_Init+0x526>

		//TIM_Auto_Reload_Not_Bufferd
		//	Bit 7 ARPE: Auto-reload preload enable
		//	0: TIMx_ARR register is not buffered
		//	1: TIMx_ARR register is buffered
		CLR_BIT(TIMx->CR1,7);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	601a      	str	r2, [r3, #0]

		if(TIM_Config->Counter.Count_Direction == Count_Direction_UP)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	7a1b      	ldrb	r3, [r3, #8]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d10c      	bne.n	8001084 <MCAL_TIM_Init+0xf0>
– Update generation through the slave mode controller
1: Only counter overflow/underflow generates an update interrupt or DMA request if
enabled.
			 */

			SET_BIT(TIMx->CR1,2) ;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f043 0204 	orr.w	r2, r3, #4
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	601a      	str	r2, [r3, #0]

			//Bit 4 DIR: Direction Selection [Upcount]
			CLR_BIT(TIMx->CR1,4) ;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f023 0210 	bic.w	r2, r3, #16
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	601a      	str	r2, [r3, #0]
		{
			//Bit 2 URS: Update request source
			SET_BIT(TIMx->CR1,2) ;
		}

		break;
 8001082:	e222      	b.n	80014ca <MCAL_TIM_Init+0x536>
		else if(TIM_Config->Counter.Count_Direction == Count_Direction_DOWN)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	7a1b      	ldrb	r3, [r3, #8]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d10c      	bne.n	80010a6 <MCAL_TIM_Init+0x112>
			SET_BIT(TIMx->CR1,2) ;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f043 0204 	orr.w	r2, r3, #4
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	601a      	str	r2, [r3, #0]
			SET_BIT(TIMx->CR1,4) ;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f043 0210 	orr.w	r2, r3, #16
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	601a      	str	r2, [r3, #0]
		break;
 80010a4:	e211      	b.n	80014ca <MCAL_TIM_Init+0x536>
		else if(TIM_Config->Counter.Count_Direction == Count_Direction_UP_DOWN)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	7a1b      	ldrb	r3, [r3, #8]
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	f040 820d 	bne.w	80014ca <MCAL_TIM_Init+0x536>
			SET_BIT(TIMx->CR1,2) ;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f043 0204 	orr.w	r2, r3, #4
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	601a      	str	r2, [r3, #0]
		break;
 80010bc:	e205      	b.n	80014ca <MCAL_TIM_Init+0x536>

		//TIM_Auto_Reload_Bufferd
		//	Bit 7 ARPE: Auto-reload preload enable
		//	0: TIMx_ARR register is not buffered
		//	1: TIMx_ARR register is buffered
		SET_BIT(TIMx->CR1,7);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	601a      	str	r2, [r3, #0]
1: Re-initialize the counter and generates an update of the registers. Note that the prescaler
counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if
the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload
value (TIMx_ARR) if DIR=1 (downcounting).
		 */
		SET_BIT(TIMx->EGR,0);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	f043 0201 	orr.w	r2, r3, #1
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	615a      	str	r2, [r3, #20]


		/******************** Channel Configuration ********************/

		if(TIM_Config->PWM.Channel == TIM_CHANNEL_1 ){
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	7a9b      	ldrb	r3, [r3, #10]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d175      	bne.n	80011ca <MCAL_TIM_Init+0x236>
			/*
			 Bits 1:0 CC1S: Capture/Compare 1 selection
			This bit-field defines the direction of the channel (input/output) as well as the used input.
			00: CC1 channel is configured as output.
			 */
			TIMx->CCMR1 |= (0b00 << 0);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	699a      	ldr	r2, [r3, #24]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	619a      	str	r2, [r3, #24]




			/****** Mode Configuration ********/
			if(TIM_Config->PWM.Mode == PWM_Mode_FROZEN){
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	7adb      	ldrb	r3, [r3, #11]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d104      	bne.n	80010f8 <MCAL_TIM_Init+0x164>
Note: In PWM mode 1 or 2, the OCREF level changes only when the result of the
comparison changes or when the output compare mode switches from “frozen” mode to “PWM” mode.

				 */
				//000: Frozen
				TIMx->CCMR1 |= (0b000 << 4);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	699a      	ldr	r2, [r3, #24]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	619a      	str	r2, [r3, #24]
 80010f6:	e04e      	b.n	8001196 <MCAL_TIM_Init+0x202>

			}else if(TIM_Config->PWM.Mode == PWM_Mode_EDGE_UP){
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	7adb      	ldrb	r3, [r3, #11]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d123      	bne.n	8001148 <MCAL_TIM_Init+0x1b4>
	– Update generation through the slave mode controller
	1: Only counter overflow/underflow generates an update interrupt or DMA request if
	enabled.
				 */
				// Update request source Enable
				SET_BIT(TIMx->CR1,2) ;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f043 0204 	orr.w	r2, r3, #4
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	601a      	str	r2, [r3, #0]

				//Bit 4 DIR: Direction Selection [Upcount]
				CLR_BIT(TIMx->CR1,4) ;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f023 0210 	bic.w	r2, r3, #16
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	601a      	str	r2, [r3, #0]

				//****************************************************************************

				if(TIM_Config->PWM.Ouptut_On_Compare_Match == PWM_Compare_Match_High){
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	7b9b      	ldrb	r3, [r3, #14]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d106      	bne.n	800112e <MCAL_TIM_Init+0x19a>

					//111: PWM mode 2
					TIMx->CCMR1 |= (0b111 << 4);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	f043 0270 	orr.w	r2, r3, #112	; 0x70
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	619a      	str	r2, [r3, #24]
 800112c:	e005      	b.n	800113a <MCAL_TIM_Init+0x1a6>

				}else{
					//110: PWM mode 1
					TIMx->CCMR1 |= (0b110 << 4);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	619a      	str	r2, [r3, #24]
				}

				//0: CCxP: Capture/Compare output polarity OCx active high
				CLR_BIT(TIMx->CCER,1);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a1b      	ldr	r3, [r3, #32]
 800113e:	f023 0202 	bic.w	r2, r3, #2
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	621a      	str	r2, [r3, #32]
 8001146:	e026      	b.n	8001196 <MCAL_TIM_Init+0x202>


			}else if(TIM_Config->PWM.Mode == PWM_Mode_EDGE_DOWN){
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	7adb      	ldrb	r3, [r3, #11]
 800114c:	2b02      	cmp	r3, #2
 800114e:	d122      	bne.n	8001196 <MCAL_TIM_Init+0x202>

				//Bit 2 URS: Update request source
				SET_BIT(TIMx->CR1,2) ;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f043 0204 	orr.w	r2, r3, #4
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	601a      	str	r2, [r3, #0]

				//Bit 4 DIR: Direction [DOWN_Count]
				SET_BIT(TIMx->CR1,4) ;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f043 0210 	orr.w	r2, r3, #16
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	601a      	str	r2, [r3, #0]

				//****************************************

				if(TIM_Config->PWM.Ouptut_On_Compare_Match == PWM_Compare_Match_High){
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	7b9b      	ldrb	r3, [r3, #14]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d106      	bne.n	800117e <MCAL_TIM_Init+0x1ea>

					//110: PWM mode 1
					TIMx->CCMR1 |= (0b110 << 4);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	619a      	str	r2, [r3, #24]
 800117c:	e005      	b.n	800118a <MCAL_TIM_Init+0x1f6>

				}else{
					//111: PWM mode 2
					TIMx->CCMR1 |= (0b111 << 4);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	f043 0270 	orr.w	r2, r3, #112	; 0x70
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	619a      	str	r2, [r3, #24]
				}

				//0: CCxP: Capture/Compare output polarity OCx active high
				CLR_BIT(TIMx->CCER,1);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	f023 0202 	bic.w	r2, r3, #2
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	621a      	str	r2, [r3, #32]
It is loaded permanently if the preload feature is not selected in the TIMx_CCMR1 register
(bit OC1PE). Else the preload value is copied in the active capture/compare 1 register when an update event occurs.
The active capture/compare register contains the value to be compared to the counter
TIMx_CNT and signaled on OC1 output.
			 */
			if(TIM_Config->PWM.Compare_value <= TIM_Config->Auto_Reload_Value){
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	899a      	ldrh	r2, [r3, #12]
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	88db      	ldrh	r3, [r3, #6]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d811      	bhi.n	80011c6 <MCAL_TIM_Init+0x232>

				TIMx->CCR1 = TIM_Config->PWM.Compare_value ;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	899b      	ldrh	r3, [r3, #12]
 80011a6:	461a      	mov	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	635a      	str	r2, [r3, #52]	; 0x34
1: These bits can not be modified as long as LOCK level 3 has been programmed
(LOCK bits in TIMx_BDTR register) and CC1S=00 (the channel is configured in output).
2: The PWM mode can be used without validating the preload register only
in one pulse mode (OPM bit set in TIMx_CR1 register). Else the behavior is not guaranteed.
			 */
			SET_BIT(TIMx->CCMR1,3);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	f043 0208 	orr.w	r2, r3, #8
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	619a      	str	r2, [r3, #24]
0: Off - OC1 is not active.
1: On - OC1 signal is output on the corresponding output pin.
			 */

			//Capture/Compare output enable
			SET_BIT(TIMx->CCER,0);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a1b      	ldr	r3, [r3, #32]
 80011bc:	f043 0201 	orr.w	r2, r3, #1
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	621a      	str	r2, [r3, #32]
		}




		break;
 80011c4:	e183      	b.n	80014ce <MCAL_TIM_Init+0x53a>
				return TIM_PWM_Auto_Reload_Value_Exceeded;
 80011c6:	2305      	movs	r3, #5
 80011c8:	e1d0      	b.n	800156c <MCAL_TIM_Init+0x5d8>
		}else if(TIM_Config->PWM.Channel == TIM_CHANNEL_2){
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	7a9b      	ldrb	r3, [r3, #10]
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d17f      	bne.n	80012d2 <MCAL_TIM_Init+0x33e>
			TIMx->CCMR1 |= (0x00 << 8);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	699a      	ldr	r2, [r3, #24]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	619a      	str	r2, [r3, #24]
			if(TIM_Config->PWM.Mode == PWM_Mode_FROZEN){
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	7adb      	ldrb	r3, [r3, #11]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10e      	bne.n	8001200 <MCAL_TIM_Init+0x26c>
				TIMx->CCMR1 |= (0x000 << 12);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	699a      	ldr	r2, [r3, #24]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	619a      	str	r2, [r3, #24]
 80011ea:	e058      	b.n	800129e <MCAL_TIM_Init+0x30a>
 80011ec:	40021000 	.word	0x40021000
 80011f0:	20000448 	.word	0x20000448
 80011f4:	e000e100 	.word	0xe000e100
 80011f8:	40000400 	.word	0x40000400
 80011fc:	40000800 	.word	0x40000800
			}else if(TIM_Config->PWM.Mode == PWM_Mode_EDGE_UP){
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	7adb      	ldrb	r3, [r3, #11]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d123      	bne.n	8001250 <MCAL_TIM_Init+0x2bc>
				SET_BIT(TIMx->CR1,2) ;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f043 0204 	orr.w	r2, r3, #4
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	601a      	str	r2, [r3, #0]
				CLR_BIT(TIMx->CR1,4) ;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f023 0210 	bic.w	r2, r3, #16
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	601a      	str	r2, [r3, #0]
				if(TIM_Config->PWM.Ouptut_On_Compare_Match == PWM_Compare_Match_High){
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	7b9b      	ldrb	r3, [r3, #14]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d106      	bne.n	8001236 <MCAL_TIM_Init+0x2a2>
					TIMx->CCMR1 |= (0b111 << 12);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	619a      	str	r2, [r3, #24]
 8001234:	e005      	b.n	8001242 <MCAL_TIM_Init+0x2ae>
					TIMx->CCMR1 |= (0b110 << 12);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	619a      	str	r2, [r3, #24]
				CLR_BIT(TIMx->CCER,5);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a1b      	ldr	r3, [r3, #32]
 8001246:	f023 0220 	bic.w	r2, r3, #32
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	621a      	str	r2, [r3, #32]
 800124e:	e026      	b.n	800129e <MCAL_TIM_Init+0x30a>
			}else if(TIM_Config->PWM.Mode == PWM_Mode_EDGE_DOWN){
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	7adb      	ldrb	r3, [r3, #11]
 8001254:	2b02      	cmp	r3, #2
 8001256:	d122      	bne.n	800129e <MCAL_TIM_Init+0x30a>
				SET_BIT(TIMx->CR1,2) ;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f043 0204 	orr.w	r2, r3, #4
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	601a      	str	r2, [r3, #0]
				SET_BIT(TIMx->CR1,4) ;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f043 0210 	orr.w	r2, r3, #16
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	601a      	str	r2, [r3, #0]
				if(TIM_Config->PWM.Ouptut_On_Compare_Match == PWM_Compare_Match_High){
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	7b9b      	ldrb	r3, [r3, #14]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d106      	bne.n	8001286 <MCAL_TIM_Init+0x2f2>
					TIMx->CCMR1 |= (0b110 << 12);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	619a      	str	r2, [r3, #24]
 8001284:	e005      	b.n	8001292 <MCAL_TIM_Init+0x2fe>
					TIMx->CCMR1 |= (0b111 << 12);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	619a      	str	r2, [r3, #24]
				CLR_BIT(TIMx->CCER,5);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a1b      	ldr	r3, [r3, #32]
 8001296:	f023 0220 	bic.w	r2, r3, #32
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	621a      	str	r2, [r3, #32]
			if(TIM_Config->PWM.Compare_value <= TIM_Config->Auto_Reload_Value){
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	899a      	ldrh	r2, [r3, #12]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	88db      	ldrh	r3, [r3, #6]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d811      	bhi.n	80012ce <MCAL_TIM_Init+0x33a>
				TIMx->CCR2 = TIM_Config->PWM.Compare_value ;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	899b      	ldrh	r3, [r3, #12]
 80012ae:	461a      	mov	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	639a      	str	r2, [r3, #56]	; 0x38
			SET_BIT(TIMx->CCMR1,11);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	619a      	str	r2, [r3, #24]
			SET_BIT(TIMx->CCER,4);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	f043 0210 	orr.w	r2, r3, #16
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	621a      	str	r2, [r3, #32]
		break;
 80012cc:	e0ff      	b.n	80014ce <MCAL_TIM_Init+0x53a>
				return TIM_PWM_Auto_Reload_Value_Exceeded;
 80012ce:	2305      	movs	r3, #5
 80012d0:	e14c      	b.n	800156c <MCAL_TIM_Init+0x5d8>
		}else if(TIM_Config->PWM.Channel == TIM_CHANNEL_3){
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	7a9b      	ldrb	r3, [r3, #10]
 80012d6:	2b03      	cmp	r3, #3
 80012d8:	d175      	bne.n	80013c6 <MCAL_TIM_Init+0x432>
			TIMx->CCMR2 |= (0x00 << 0);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69da      	ldr	r2, [r3, #28]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	61da      	str	r2, [r3, #28]
			if(TIM_Config->PWM.Mode == PWM_Mode_FROZEN){
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	7adb      	ldrb	r3, [r3, #11]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d104      	bne.n	80012f4 <MCAL_TIM_Init+0x360>
				TIMx->CCMR2 |= (0x000 << 4);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69da      	ldr	r2, [r3, #28]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	61da      	str	r2, [r3, #28]
 80012f2:	e04e      	b.n	8001392 <MCAL_TIM_Init+0x3fe>
			}else if(TIM_Config->PWM.Mode == PWM_Mode_EDGE_UP){
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	7adb      	ldrb	r3, [r3, #11]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d123      	bne.n	8001344 <MCAL_TIM_Init+0x3b0>
				SET_BIT(TIMx->CR1,2) ;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f043 0204 	orr.w	r2, r3, #4
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	601a      	str	r2, [r3, #0]
				CLR_BIT(TIMx->CR1,4) ;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f023 0210 	bic.w	r2, r3, #16
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	601a      	str	r2, [r3, #0]
				if(TIM_Config->PWM.Ouptut_On_Compare_Match == PWM_Compare_Match_High){
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	7b9b      	ldrb	r3, [r3, #14]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d106      	bne.n	800132a <MCAL_TIM_Init+0x396>
					TIMx->CCMR2 |= (0b111 << 4);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	f043 0270 	orr.w	r2, r3, #112	; 0x70
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	61da      	str	r2, [r3, #28]
 8001328:	e005      	b.n	8001336 <MCAL_TIM_Init+0x3a2>
					TIMx->CCMR2 |= (0b110 << 4);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	61da      	str	r2, [r3, #28]
				CLR_BIT(TIMx->CCER,9);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	621a      	str	r2, [r3, #32]
 8001342:	e026      	b.n	8001392 <MCAL_TIM_Init+0x3fe>
			}else if(TIM_Config->PWM.Mode == PWM_Mode_EDGE_DOWN){
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	7adb      	ldrb	r3, [r3, #11]
 8001348:	2b02      	cmp	r3, #2
 800134a:	d122      	bne.n	8001392 <MCAL_TIM_Init+0x3fe>
				SET_BIT(TIMx->CR1,2) ;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f043 0204 	orr.w	r2, r3, #4
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	601a      	str	r2, [r3, #0]
				SET_BIT(TIMx->CR1,4) ;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f043 0210 	orr.w	r2, r3, #16
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	601a      	str	r2, [r3, #0]
				if(TIM_Config->PWM.Ouptut_On_Compare_Match == PWM_Compare_Match_High){
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	7b9b      	ldrb	r3, [r3, #14]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d106      	bne.n	800137a <MCAL_TIM_Init+0x3e6>
					TIMx->CCMR2 |= (0b110 << 4);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	69db      	ldr	r3, [r3, #28]
 8001370:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	61da      	str	r2, [r3, #28]
 8001378:	e005      	b.n	8001386 <MCAL_TIM_Init+0x3f2>
					TIMx->CCMR2 |= (0b111 << 4);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	f043 0270 	orr.w	r2, r3, #112	; 0x70
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	61da      	str	r2, [r3, #28]
				CLR_BIT(TIMx->CCER,9);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a1b      	ldr	r3, [r3, #32]
 800138a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	621a      	str	r2, [r3, #32]
			if(TIM_Config->PWM.Compare_value <= TIM_Config->Auto_Reload_Value){
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	899a      	ldrh	r2, [r3, #12]
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	88db      	ldrh	r3, [r3, #6]
 800139a:	429a      	cmp	r2, r3
 800139c:	d811      	bhi.n	80013c2 <MCAL_TIM_Init+0x42e>
				TIMx->CCR3 = TIM_Config->PWM.Compare_value ;
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	899b      	ldrh	r3, [r3, #12]
 80013a2:	461a      	mov	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	63da      	str	r2, [r3, #60]	; 0x3c
			SET_BIT(TIMx->CCMR2,3);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	f043 0208 	orr.w	r2, r3, #8
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	61da      	str	r2, [r3, #28]
			SET_BIT(TIMx->CCER,8);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	621a      	str	r2, [r3, #32]
		break;
 80013c0:	e085      	b.n	80014ce <MCAL_TIM_Init+0x53a>
				return TIM_PWM_Auto_Reload_Value_Exceeded;
 80013c2:	2305      	movs	r3, #5
 80013c4:	e0d2      	b.n	800156c <MCAL_TIM_Init+0x5d8>
		}else if(TIM_Config->PWM.Channel == TIM_CHANNEL_4){
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	7a9b      	ldrb	r3, [r3, #10]
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	d17f      	bne.n	80014ce <MCAL_TIM_Init+0x53a>
			TIMx->CCMR2 |= (0x00 << 8);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	69da      	ldr	r2, [r3, #28]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	61da      	str	r2, [r3, #28]
			if(TIM_Config->PWM.Mode == PWM_Mode_FROZEN){
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	7adb      	ldrb	r3, [r3, #11]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d104      	bne.n	80013e8 <MCAL_TIM_Init+0x454>
				TIMx->CCMR2 |= (0x000 << 12);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69da      	ldr	r2, [r3, #28]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	61da      	str	r2, [r3, #28]
 80013e6:	e04e      	b.n	8001486 <MCAL_TIM_Init+0x4f2>
			}else if(TIM_Config->PWM.Mode == PWM_Mode_EDGE_UP){
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	7adb      	ldrb	r3, [r3, #11]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d123      	bne.n	8001438 <MCAL_TIM_Init+0x4a4>
				SET_BIT(TIMx->CR1,2) ;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f043 0204 	orr.w	r2, r3, #4
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	601a      	str	r2, [r3, #0]
				CLR_BIT(TIMx->CR1,4) ;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f023 0210 	bic.w	r2, r3, #16
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	601a      	str	r2, [r3, #0]
				if(TIM_Config->PWM.Ouptut_On_Compare_Match == PWM_Compare_Match_High){
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	7b9b      	ldrb	r3, [r3, #14]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d106      	bne.n	800141e <MCAL_TIM_Init+0x48a>
					TIMx->CCMR2 |= (0b111 << 12);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	61da      	str	r2, [r3, #28]
 800141c:	e005      	b.n	800142a <MCAL_TIM_Init+0x496>
					TIMx->CCMR2 |= (0b110 << 12);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	61da      	str	r2, [r3, #28]
				CLR_BIT(TIMx->CCER,13);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a1b      	ldr	r3, [r3, #32]
 800142e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	621a      	str	r2, [r3, #32]
 8001436:	e026      	b.n	8001486 <MCAL_TIM_Init+0x4f2>
			}else if(TIM_Config->PWM.Mode == PWM_Mode_EDGE_DOWN){
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	7adb      	ldrb	r3, [r3, #11]
 800143c:	2b02      	cmp	r3, #2
 800143e:	d122      	bne.n	8001486 <MCAL_TIM_Init+0x4f2>
				SET_BIT(TIMx->CR1,2) ;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f043 0204 	orr.w	r2, r3, #4
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	601a      	str	r2, [r3, #0]
				SET_BIT(TIMx->CR1,4) ;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f043 0210 	orr.w	r2, r3, #16
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	601a      	str	r2, [r3, #0]
				if(TIM_Config->PWM.Ouptut_On_Compare_Match == PWM_Compare_Match_High){
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	7b9b      	ldrb	r3, [r3, #14]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d106      	bne.n	800146e <MCAL_TIM_Init+0x4da>
					TIMx->CCMR2 |= (0b110 << 12);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69db      	ldr	r3, [r3, #28]
 8001464:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	61da      	str	r2, [r3, #28]
 800146c:	e005      	b.n	800147a <MCAL_TIM_Init+0x4e6>
					TIMx->CCMR2 |= (0b111 << 12);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	61da      	str	r2, [r3, #28]
				CLR_BIT(TIMx->CCER,13);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	621a      	str	r2, [r3, #32]
			if(TIM_Config->PWM.Compare_value <= TIM_Config->Auto_Reload_Value){
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	899a      	ldrh	r2, [r3, #12]
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	88db      	ldrh	r3, [r3, #6]
 800148e:	429a      	cmp	r2, r3
 8001490:	d811      	bhi.n	80014b6 <MCAL_TIM_Init+0x522>
				TIMx->CCR4 = TIM_Config->PWM.Compare_value ;
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	899b      	ldrh	r3, [r3, #12]
 8001496:	461a      	mov	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	641a      	str	r2, [r3, #64]	; 0x40
			SET_BIT(TIMx->CCMR2,11);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	69db      	ldr	r3, [r3, #28]
 80014a0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	61da      	str	r2, [r3, #28]
			SET_BIT(TIMx->CCER,12);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	621a      	str	r2, [r3, #32]
		break;
 80014b4:	e00b      	b.n	80014ce <MCAL_TIM_Init+0x53a>
				return TIM_PWM_Auto_Reload_Value_Exceeded;
 80014b6:	2305      	movs	r3, #5
 80014b8:	e058      	b.n	800156c <MCAL_TIM_Init+0x5d8>


	default:
		CLR_BIT(TIMx->CR1,2) ;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f023 0204 	bic.w	r2, r3, #4
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	601a      	str	r2, [r3, #0]
		return TIM_MODE_NOT_Found ;
 80014c6:	2302      	movs	r3, #2
 80014c8:	e050      	b.n	800156c <MCAL_TIM_Init+0x5d8>
		break;
 80014ca:	bf00      	nop
 80014cc:	e000      	b.n	80014d0 <MCAL_TIM_Init+0x53c>
		break;
 80014ce:	bf00      	nop





	SET_BIT(TIMx->CR1,1) ; //Update enable Bit 1 UDIS: Update disable
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f043 0202 	orr.w	r2, r3, #2
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	601a      	str	r2, [r3, #0]

	TIMx->PSC = (uint16_t)(TIM_Config->Prescaler-1) ; // Prescaler set
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	885b      	ldrh	r3, [r3, #2]
 80014e0:	3b01      	subs	r3, #1
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	461a      	mov	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	629a      	str	r2, [r3, #40]	; 0x28


	if (TIM_Config->Auto_Reload_Value < 0xffff)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	88db      	ldrh	r3, [r3, #6]
 80014ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d009      	beq.n	800150a <MCAL_TIM_Init+0x576>
	{
		TIMx->ARR = (uint16_t) (TIM_Config->Auto_Reload_Value); //auto reload Value
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	88db      	ldrh	r3, [r3, #6]
 80014fa:	461a      	mov	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	62da      	str	r2, [r3, #44]	; 0x2c
	{
		return TIM_Auto_Reload_Value_Exceeded ;

	}

	if (TIM_Config->IRQ_Enable == TIM_IRQ_MODE_None )
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	8a1b      	ldrh	r3, [r3, #16]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d10f      	bne.n	8001528 <MCAL_TIM_Init+0x594>
 8001508:	e001      	b.n	800150e <MCAL_TIM_Init+0x57a>
		return TIM_Auto_Reload_Value_Exceeded ;
 800150a:	2303      	movs	r3, #3
 800150c:	e02e      	b.n	800156c <MCAL_TIM_Init+0x5d8>
	{
		CLR_BIT(TIMx->DIER,0);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	f023 0201 	bic.w	r2, r3, #1
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	60da      	str	r2, [r3, #12]
		SET_BIT(TIMx->CR1,1);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f043 0202 	orr.w	r2, r3, #2
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	e020      	b.n	800156a <MCAL_TIM_Init+0x5d6>
	}
	else if (TIM_Config->IRQ_Enable == TIM_IRQ_MODE_OverFlow )
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	8a1b      	ldrh	r3, [r3, #16]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d10c      	bne.n	800154a <MCAL_TIM_Init+0x5b6>
	{
		SET_BIT(TIMx->DIER,0);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	f043 0201 	orr.w	r2, r3, #1
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	60da      	str	r2, [r3, #12]
		CLR_BIT(TIMx->CR1,1);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f023 0202 	bic.w	r2, r3, #2
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	e00f      	b.n	800156a <MCAL_TIM_Init+0x5d6>
	}
	else if (TIM_Config->IRQ_Enable == TIM_IRQ_MODE_UnderFlow )
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	8a1b      	ldrh	r3, [r3, #16]
 800154e:	2b02      	cmp	r3, #2
 8001550:	d10b      	bne.n	800156a <MCAL_TIM_Init+0x5d6>
	{
		SET_BIT(TIMx->DIER,0);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	f043 0201 	orr.w	r2, r3, #1
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	60da      	str	r2, [r3, #12]
		CLR_BIT(TIMx->CR1,1);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f023 0202 	bic.w	r2, r3, #2
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	601a      	str	r2, [r3, #0]
	}



return 0;
 800156a:	2300      	movs	r3, #0

}
 800156c:	4618      	mov	r0, r3
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bcb0      	pop	{r4, r5, r7}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop

08001578 <MCAL_TIM_GPIO_Set_Pins>:
 * @param [in]   -TIMx :  were x can be (1,2,3,4 depending on device used)to select the Timer Peripheral
 * @retval		 -none
 * Note			 -none
 */
Error_status MCAL_TIM_GPIO_Set_Pins(TIM_TypeDef *TIMx,uint8_t TIM_Channel,uint8_t TIM_Mode)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	70fb      	strb	r3, [r7, #3]
 8001584:	4613      	mov	r3, r2
 8001586:	70bb      	strb	r3, [r7, #2]

	GPIO_PinConfig_t PinConfig;



	if(TIMx == TIM2){
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800158e:	d149      	bne.n	8001624 <MCAL_TIM_GPIO_Set_Pins+0xac>

		switch(TIM_Mode)
 8001590:	78bb      	ldrb	r3, [r7, #2]
 8001592:	2b02      	cmp	r3, #2
 8001594:	d002      	beq.n	800159c <MCAL_TIM_GPIO_Set_Pins+0x24>
 8001596:	2b03      	cmp	r3, #3
 8001598:	d022      	beq.n	80015e0 <MCAL_TIM_GPIO_Set_Pins+0x68>
 800159a:	e041      	b.n	8001620 <MCAL_TIM_GPIO_Set_Pins+0xa8>
		{
		case TIM_Mode_PWM:

			PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800159c:	2306      	movs	r3, #6
 800159e:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 80015a0:	2301      	movs	r3, #1
 80015a2:	73fb      	strb	r3, [r7, #15]

			if(TIM_Channel == TIM_CHANNEL_1){
 80015a4:	78fb      	ldrb	r3, [r7, #3]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d102      	bne.n	80015b0 <MCAL_TIM_GPIO_Set_Pins+0x38>
				PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 80015aa:	2301      	movs	r3, #1
 80015ac:	81bb      	strh	r3, [r7, #12]
 80015ae:	e010      	b.n	80015d2 <MCAL_TIM_GPIO_Set_Pins+0x5a>
			}else if(TIM_Channel == TIM_CHANNEL_2){
 80015b0:	78fb      	ldrb	r3, [r7, #3]
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d102      	bne.n	80015bc <MCAL_TIM_GPIO_Set_Pins+0x44>
				PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 80015b6:	2302      	movs	r3, #2
 80015b8:	81bb      	strh	r3, [r7, #12]
 80015ba:	e00a      	b.n	80015d2 <MCAL_TIM_GPIO_Set_Pins+0x5a>
			}else if(TIM_Channel == TIM_CHANNEL_3){
 80015bc:	78fb      	ldrb	r3, [r7, #3]
 80015be:	2b03      	cmp	r3, #3
 80015c0:	d102      	bne.n	80015c8 <MCAL_TIM_GPIO_Set_Pins+0x50>
				PinConfig.GPIO_PinNumber = GPIO_PIN_2;
 80015c2:	2304      	movs	r3, #4
 80015c4:	81bb      	strh	r3, [r7, #12]
 80015c6:	e004      	b.n	80015d2 <MCAL_TIM_GPIO_Set_Pins+0x5a>
			}else if(TIM_Channel == TIM_CHANNEL_4){
 80015c8:	78fb      	ldrb	r3, [r7, #3]
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	d101      	bne.n	80015d2 <MCAL_TIM_GPIO_Set_Pins+0x5a>
				PinConfig.GPIO_PinNumber = GPIO_PIN_3;
 80015ce:	2308      	movs	r3, #8
 80015d0:	81bb      	strh	r3, [r7, #12]
			}

			MCAL_GPIO_Init(GPIOA, &PinConfig);
 80015d2:	f107 030c 	add.w	r3, r7, #12
 80015d6:	4619      	mov	r1, r3
 80015d8:	487c      	ldr	r0, [pc, #496]	; (80017cc <MCAL_TIM_GPIO_Set_Pins+0x254>)
 80015da:	f7ff fb0c 	bl	8000bf6 <MCAL_GPIO_Init>
			break;
 80015de:	e0ef      	b.n	80017c0 <MCAL_TIM_GPIO_Set_Pins+0x248>

		case TIM_Mode_Input_Capture:
			PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80015e0:	2301      	movs	r3, #1
 80015e2:	73bb      	strb	r3, [r7, #14]

			if(TIM_Channel == TIM_CHANNEL_1){
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d102      	bne.n	80015f0 <MCAL_TIM_GPIO_Set_Pins+0x78>
				PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 80015ea:	2301      	movs	r3, #1
 80015ec:	81bb      	strh	r3, [r7, #12]
 80015ee:	e010      	b.n	8001612 <MCAL_TIM_GPIO_Set_Pins+0x9a>
			}else if(TIM_Channel == TIM_CHANNEL_2){
 80015f0:	78fb      	ldrb	r3, [r7, #3]
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d102      	bne.n	80015fc <MCAL_TIM_GPIO_Set_Pins+0x84>
				PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 80015f6:	2302      	movs	r3, #2
 80015f8:	81bb      	strh	r3, [r7, #12]
 80015fa:	e00a      	b.n	8001612 <MCAL_TIM_GPIO_Set_Pins+0x9a>
			}else if(TIM_Channel == TIM_CHANNEL_3){
 80015fc:	78fb      	ldrb	r3, [r7, #3]
 80015fe:	2b03      	cmp	r3, #3
 8001600:	d102      	bne.n	8001608 <MCAL_TIM_GPIO_Set_Pins+0x90>
				PinConfig.GPIO_PinNumber = GPIO_PIN_2;
 8001602:	2304      	movs	r3, #4
 8001604:	81bb      	strh	r3, [r7, #12]
 8001606:	e004      	b.n	8001612 <MCAL_TIM_GPIO_Set_Pins+0x9a>
			}else if(TIM_Channel == TIM_CHANNEL_4){
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	2b04      	cmp	r3, #4
 800160c:	d101      	bne.n	8001612 <MCAL_TIM_GPIO_Set_Pins+0x9a>
				PinConfig.GPIO_PinNumber = GPIO_PIN_3;
 800160e:	2308      	movs	r3, #8
 8001610:	81bb      	strh	r3, [r7, #12]
			}

			MCAL_GPIO_Init(GPIOA, &PinConfig);
 8001612:	f107 030c 	add.w	r3, r7, #12
 8001616:	4619      	mov	r1, r3
 8001618:	486c      	ldr	r0, [pc, #432]	; (80017cc <MCAL_TIM_GPIO_Set_Pins+0x254>)
 800161a:	f7ff faec 	bl	8000bf6 <MCAL_GPIO_Init>
			break;
 800161e:	e0cf      	b.n	80017c0 <MCAL_TIM_GPIO_Set_Pins+0x248>

		default:
			return TIM_MODE_NOT_Found;
 8001620:	2302      	movs	r3, #2
 8001622:	e0ce      	b.n	80017c2 <MCAL_TIM_GPIO_Set_Pins+0x24a>
			break;
		}

	}
	else if(TIMx == TIM3)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a6a      	ldr	r2, [pc, #424]	; (80017d0 <MCAL_TIM_GPIO_Set_Pins+0x258>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d174      	bne.n	8001716 <MCAL_TIM_GPIO_Set_Pins+0x19e>
	{
		switch(TIM_Mode)
 800162c:	78bb      	ldrb	r3, [r7, #2]
 800162e:	2b02      	cmp	r3, #2
 8001630:	d002      	beq.n	8001638 <MCAL_TIM_GPIO_Set_Pins+0xc0>
 8001632:	2b03      	cmp	r3, #3
 8001634:	d035      	beq.n	80016a2 <MCAL_TIM_GPIO_Set_Pins+0x12a>
 8001636:	e06c      	b.n	8001712 <MCAL_TIM_GPIO_Set_Pins+0x19a>
		{
		case TIM_Mode_PWM:

			PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001638:	2306      	movs	r3, #6
 800163a:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 800163c:	2301      	movs	r3, #1
 800163e:	73fb      	strb	r3, [r7, #15]

			if(TIM_Channel == TIM_CHANNEL_1){
 8001640:	78fb      	ldrb	r3, [r7, #3]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d108      	bne.n	8001658 <MCAL_TIM_GPIO_Set_Pins+0xe0>
				PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 8001646:	2340      	movs	r3, #64	; 0x40
 8001648:	81bb      	strh	r3, [r7, #12]
				MCAL_GPIO_Init(GPIOA, &PinConfig);
 800164a:	f107 030c 	add.w	r3, r7, #12
 800164e:	4619      	mov	r1, r3
 8001650:	485e      	ldr	r0, [pc, #376]	; (80017cc <MCAL_TIM_GPIO_Set_Pins+0x254>)
 8001652:	f7ff fad0 	bl	8000bf6 <MCAL_GPIO_Init>
				PinConfig.GPIO_PinNumber = GPIO_PIN_1;
				MCAL_GPIO_Init(GPIOB, &PinConfig);
			}


			break;
 8001656:	e0b2      	b.n	80017be <MCAL_TIM_GPIO_Set_Pins+0x246>
			}else if(TIM_Channel == TIM_CHANNEL_2){
 8001658:	78fb      	ldrb	r3, [r7, #3]
 800165a:	2b02      	cmp	r3, #2
 800165c:	d108      	bne.n	8001670 <MCAL_TIM_GPIO_Set_Pins+0xf8>
				PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 800165e:	2380      	movs	r3, #128	; 0x80
 8001660:	81bb      	strh	r3, [r7, #12]
				MCAL_GPIO_Init(GPIOA, &PinConfig);
 8001662:	f107 030c 	add.w	r3, r7, #12
 8001666:	4619      	mov	r1, r3
 8001668:	4858      	ldr	r0, [pc, #352]	; (80017cc <MCAL_TIM_GPIO_Set_Pins+0x254>)
 800166a:	f7ff fac4 	bl	8000bf6 <MCAL_GPIO_Init>
			break;
 800166e:	e0a6      	b.n	80017be <MCAL_TIM_GPIO_Set_Pins+0x246>
			}else if(TIM_Channel == TIM_CHANNEL_3){
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	2b03      	cmp	r3, #3
 8001674:	d108      	bne.n	8001688 <MCAL_TIM_GPIO_Set_Pins+0x110>
				PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 8001676:	2301      	movs	r3, #1
 8001678:	81bb      	strh	r3, [r7, #12]
				MCAL_GPIO_Init(GPIOB, &PinConfig);
 800167a:	f107 030c 	add.w	r3, r7, #12
 800167e:	4619      	mov	r1, r3
 8001680:	4854      	ldr	r0, [pc, #336]	; (80017d4 <MCAL_TIM_GPIO_Set_Pins+0x25c>)
 8001682:	f7ff fab8 	bl	8000bf6 <MCAL_GPIO_Init>
			break;
 8001686:	e09a      	b.n	80017be <MCAL_TIM_GPIO_Set_Pins+0x246>
			}else if(TIM_Channel == TIM_CHANNEL_4){
 8001688:	78fb      	ldrb	r3, [r7, #3]
 800168a:	2b04      	cmp	r3, #4
 800168c:	f040 8097 	bne.w	80017be <MCAL_TIM_GPIO_Set_Pins+0x246>
				PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 8001690:	2302      	movs	r3, #2
 8001692:	81bb      	strh	r3, [r7, #12]
				MCAL_GPIO_Init(GPIOB, &PinConfig);
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	4619      	mov	r1, r3
 800169a:	484e      	ldr	r0, [pc, #312]	; (80017d4 <MCAL_TIM_GPIO_Set_Pins+0x25c>)
 800169c:	f7ff faab 	bl	8000bf6 <MCAL_GPIO_Init>
			break;
 80016a0:	e08d      	b.n	80017be <MCAL_TIM_GPIO_Set_Pins+0x246>

		case TIM_Mode_Input_Capture:

			PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80016a2:	2301      	movs	r3, #1
 80016a4:	73bb      	strb	r3, [r7, #14]

			if(TIM_Channel == TIM_CHANNEL_1){
 80016a6:	78fb      	ldrb	r3, [r7, #3]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d108      	bne.n	80016be <MCAL_TIM_GPIO_Set_Pins+0x146>
				PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 80016ac:	2340      	movs	r3, #64	; 0x40
 80016ae:	81bb      	strh	r3, [r7, #12]
				MCAL_GPIO_Init(GPIOA, &PinConfig);
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	4619      	mov	r1, r3
 80016b6:	4845      	ldr	r0, [pc, #276]	; (80017cc <MCAL_TIM_GPIO_Set_Pins+0x254>)
 80016b8:	f7ff fa9d 	bl	8000bf6 <MCAL_GPIO_Init>
 80016bc:	e022      	b.n	8001704 <MCAL_TIM_GPIO_Set_Pins+0x18c>
			}else if(TIM_Channel == TIM_CHANNEL_2){
 80016be:	78fb      	ldrb	r3, [r7, #3]
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d108      	bne.n	80016d6 <MCAL_TIM_GPIO_Set_Pins+0x15e>
				PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	81bb      	strh	r3, [r7, #12]
				MCAL_GPIO_Init(GPIOA, &PinConfig);
 80016c8:	f107 030c 	add.w	r3, r7, #12
 80016cc:	4619      	mov	r1, r3
 80016ce:	483f      	ldr	r0, [pc, #252]	; (80017cc <MCAL_TIM_GPIO_Set_Pins+0x254>)
 80016d0:	f7ff fa91 	bl	8000bf6 <MCAL_GPIO_Init>
 80016d4:	e016      	b.n	8001704 <MCAL_TIM_GPIO_Set_Pins+0x18c>
			}else if(TIM_Channel == TIM_CHANNEL_3){
 80016d6:	78fb      	ldrb	r3, [r7, #3]
 80016d8:	2b03      	cmp	r3, #3
 80016da:	d108      	bne.n	80016ee <MCAL_TIM_GPIO_Set_Pins+0x176>
				PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 80016dc:	2301      	movs	r3, #1
 80016de:	81bb      	strh	r3, [r7, #12]
				MCAL_GPIO_Init(GPIOB, &PinConfig);
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	4619      	mov	r1, r3
 80016e6:	483b      	ldr	r0, [pc, #236]	; (80017d4 <MCAL_TIM_GPIO_Set_Pins+0x25c>)
 80016e8:	f7ff fa85 	bl	8000bf6 <MCAL_GPIO_Init>
 80016ec:	e00a      	b.n	8001704 <MCAL_TIM_GPIO_Set_Pins+0x18c>
			}else if(TIM_Channel == TIM_CHANNEL_4){
 80016ee:	78fb      	ldrb	r3, [r7, #3]
 80016f0:	2b04      	cmp	r3, #4
 80016f2:	d107      	bne.n	8001704 <MCAL_TIM_GPIO_Set_Pins+0x18c>
				PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 80016f4:	2302      	movs	r3, #2
 80016f6:	81bb      	strh	r3, [r7, #12]
				MCAL_GPIO_Init(GPIOB, &PinConfig);
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	4619      	mov	r1, r3
 80016fe:	4835      	ldr	r0, [pc, #212]	; (80017d4 <MCAL_TIM_GPIO_Set_Pins+0x25c>)
 8001700:	f7ff fa79 	bl	8000bf6 <MCAL_GPIO_Init>
			}

			MCAL_GPIO_Init(GPIOB, &PinConfig);
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	4619      	mov	r1, r3
 800170a:	4832      	ldr	r0, [pc, #200]	; (80017d4 <MCAL_TIM_GPIO_Set_Pins+0x25c>)
 800170c:	f7ff fa73 	bl	8000bf6 <MCAL_GPIO_Init>
			break;
 8001710:	e056      	b.n	80017c0 <MCAL_TIM_GPIO_Set_Pins+0x248>

		default:
			return TIM_MODE_NOT_Found;
 8001712:	2302      	movs	r3, #2
 8001714:	e055      	b.n	80017c2 <MCAL_TIM_GPIO_Set_Pins+0x24a>
			break;
		}
	}
	else if(TIMx == TIM4)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a2f      	ldr	r2, [pc, #188]	; (80017d8 <MCAL_TIM_GPIO_Set_Pins+0x260>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d14d      	bne.n	80017ba <MCAL_TIM_GPIO_Set_Pins+0x242>
	{
		switch(TIM_Mode)
 800171e:	78bb      	ldrb	r3, [r7, #2]
 8001720:	2b02      	cmp	r3, #2
 8001722:	d002      	beq.n	800172a <MCAL_TIM_GPIO_Set_Pins+0x1b2>
 8001724:	2b03      	cmp	r3, #3
 8001726:	d024      	beq.n	8001772 <MCAL_TIM_GPIO_Set_Pins+0x1fa>
 8001728:	e045      	b.n	80017b6 <MCAL_TIM_GPIO_Set_Pins+0x23e>
		{
		case TIM_Mode_PWM:

			PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 800172a:	2306      	movs	r3, #6
 800172c:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_Output_Speed = GPIO_SPEED_10M;
 800172e:	2301      	movs	r3, #1
 8001730:	73fb      	strb	r3, [r7, #15]

			if(TIM_Channel == TIM_CHANNEL_1){
 8001732:	78fb      	ldrb	r3, [r7, #3]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d102      	bne.n	800173e <MCAL_TIM_GPIO_Set_Pins+0x1c6>
				PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 8001738:	2340      	movs	r3, #64	; 0x40
 800173a:	81bb      	strh	r3, [r7, #12]
 800173c:	e012      	b.n	8001764 <MCAL_TIM_GPIO_Set_Pins+0x1ec>
			}else if(TIM_Channel == TIM_CHANNEL_2){
 800173e:	78fb      	ldrb	r3, [r7, #3]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d102      	bne.n	800174a <MCAL_TIM_GPIO_Set_Pins+0x1d2>
				PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	81bb      	strh	r3, [r7, #12]
 8001748:	e00c      	b.n	8001764 <MCAL_TIM_GPIO_Set_Pins+0x1ec>
			}else if(TIM_Channel == TIM_CHANNEL_3){
 800174a:	78fb      	ldrb	r3, [r7, #3]
 800174c:	2b03      	cmp	r3, #3
 800174e:	d103      	bne.n	8001758 <MCAL_TIM_GPIO_Set_Pins+0x1e0>
				PinConfig.GPIO_PinNumber = GPIO_PIN_8;
 8001750:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001754:	81bb      	strh	r3, [r7, #12]
 8001756:	e005      	b.n	8001764 <MCAL_TIM_GPIO_Set_Pins+0x1ec>
			}else if(TIM_Channel == TIM_CHANNEL_4){
 8001758:	78fb      	ldrb	r3, [r7, #3]
 800175a:	2b04      	cmp	r3, #4
 800175c:	d102      	bne.n	8001764 <MCAL_TIM_GPIO_Set_Pins+0x1ec>
				PinConfig.GPIO_PinNumber = GPIO_PIN_9;
 800175e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001762:	81bb      	strh	r3, [r7, #12]
			}

			MCAL_GPIO_Init(GPIOB, &PinConfig);
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	4619      	mov	r1, r3
 800176a:	481a      	ldr	r0, [pc, #104]	; (80017d4 <MCAL_TIM_GPIO_Set_Pins+0x25c>)
 800176c:	f7ff fa43 	bl	8000bf6 <MCAL_GPIO_Init>
			break;
 8001770:	e026      	b.n	80017c0 <MCAL_TIM_GPIO_Set_Pins+0x248>

		case TIM_Mode_Input_Capture:

			PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8001772:	2301      	movs	r3, #1
 8001774:	73bb      	strb	r3, [r7, #14]

			if(TIM_Channel == TIM_CHANNEL_1){
 8001776:	78fb      	ldrb	r3, [r7, #3]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d102      	bne.n	8001782 <MCAL_TIM_GPIO_Set_Pins+0x20a>
				PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 800177c:	2340      	movs	r3, #64	; 0x40
 800177e:	81bb      	strh	r3, [r7, #12]
 8001780:	e012      	b.n	80017a8 <MCAL_TIM_GPIO_Set_Pins+0x230>
			}else if(TIM_Channel == TIM_CHANNEL_2){
 8001782:	78fb      	ldrb	r3, [r7, #3]
 8001784:	2b02      	cmp	r3, #2
 8001786:	d102      	bne.n	800178e <MCAL_TIM_GPIO_Set_Pins+0x216>
				PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	81bb      	strh	r3, [r7, #12]
 800178c:	e00c      	b.n	80017a8 <MCAL_TIM_GPIO_Set_Pins+0x230>
			}else if(TIM_Channel == TIM_CHANNEL_3){
 800178e:	78fb      	ldrb	r3, [r7, #3]
 8001790:	2b03      	cmp	r3, #3
 8001792:	d103      	bne.n	800179c <MCAL_TIM_GPIO_Set_Pins+0x224>
				PinConfig.GPIO_PinNumber = GPIO_PIN_8;
 8001794:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001798:	81bb      	strh	r3, [r7, #12]
 800179a:	e005      	b.n	80017a8 <MCAL_TIM_GPIO_Set_Pins+0x230>
			}else if(TIM_Channel == TIM_CHANNEL_4){
 800179c:	78fb      	ldrb	r3, [r7, #3]
 800179e:	2b04      	cmp	r3, #4
 80017a0:	d102      	bne.n	80017a8 <MCAL_TIM_GPIO_Set_Pins+0x230>
				PinConfig.GPIO_PinNumber = GPIO_PIN_9;
 80017a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017a6:	81bb      	strh	r3, [r7, #12]
			}

			MCAL_GPIO_Init(GPIOB, &PinConfig);
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	4619      	mov	r1, r3
 80017ae:	4809      	ldr	r0, [pc, #36]	; (80017d4 <MCAL_TIM_GPIO_Set_Pins+0x25c>)
 80017b0:	f7ff fa21 	bl	8000bf6 <MCAL_GPIO_Init>
			break;
 80017b4:	e004      	b.n	80017c0 <MCAL_TIM_GPIO_Set_Pins+0x248>

		default:
			return TIM_MODE_NOT_Found;
 80017b6:	2302      	movs	r3, #2
 80017b8:	e003      	b.n	80017c2 <MCAL_TIM_GPIO_Set_Pins+0x24a>
			break;
		}
	}
	else
	{
		return TIMx_NOT_Found;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e001      	b.n	80017c2 <MCAL_TIM_GPIO_Set_Pins+0x24a>
			break;
 80017be:	bf00      	nop
	}

	return 0;
 80017c0:	2300      	movs	r3, #0

}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40010800 	.word	0x40010800
 80017d0:	40000400 	.word	0x40000400
 80017d4:	40010c00 	.word	0x40010c00
 80017d8:	40000800 	.word	0x40000800

080017dc <MCAL_TIM_Start>:
 * @param [in]   -TIMx :  were x can be (1,2,3,4 depending on device used)to select the Timer Peripheral
 * @retval		 -none
 * Note			 -none
 */
Error_status MCAL_TIM_Start(TIM_TypeDef *TIMx)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
previously set by software. However trigger mode can set the CEN bit automatically by
hardware.
CEN is cleared automatically in one-pulse mode, when an update event occurs.
	 */

	if(TIMx != NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d007      	beq.n	80017fa <MCAL_TIM_Start+0x1e>
	{
		SET_BIT(TIMx->CR1,0) ; //Timer Enable
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f043 0201 	orr.w	r2, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	601a      	str	r2, [r3, #0]
	else
	{
		return TIMx_NOT_Found;
	}

	return 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	e000      	b.n	80017fc <MCAL_TIM_Start+0x20>
		return TIMx_NOT_Found;
 80017fa:	2301      	movs	r3, #1

}
 80017fc:	4618      	mov	r0, r3
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr
	...

08001808 <TIM2_IRQHandler>:
 * 							IRQHandler Functions
 * =====================================================================================
 */

void TIM2_IRQHandler()
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
	TIM2->SR = 0x00 ;
 800180c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
	Global_TIM_Config[0].P_IRQ_CallBack();
 8001814:	4b02      	ldr	r3, [pc, #8]	; (8001820 <TIM2_IRQHandler+0x18>)
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	4798      	blx	r3


}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000448 	.word	0x20000448

08001824 <TIM3_IRQHandler>:
void TIM3_IRQHandler()
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
	TIM3->SR = 0x00 ;
 8001828:	4b03      	ldr	r3, [pc, #12]	; (8001838 <TIM3_IRQHandler+0x14>)
 800182a:	2200      	movs	r2, #0
 800182c:	611a      	str	r2, [r3, #16]
	Global_TIM_Config[1].P_IRQ_CallBack();
 800182e:	4b03      	ldr	r3, [pc, #12]	; (800183c <TIM3_IRQHandler+0x18>)
 8001830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001832:	4798      	blx	r3
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40000400 	.word	0x40000400
 800183c:	20000448 	.word	0x20000448

08001840 <TIM4_IRQHandler>:
void TIM4_IRQHandler()
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
	TIM4->SR = 0x00 ;
 8001844:	4b03      	ldr	r3, [pc, #12]	; (8001854 <TIM4_IRQHandler+0x14>)
 8001846:	2200      	movs	r2, #0
 8001848:	611a      	str	r2, [r3, #16]
	Global_TIM_Config[2].P_IRQ_CallBack();
 800184a:	4b03      	ldr	r3, [pc, #12]	; (8001858 <TIM4_IRQHandler+0x18>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	4798      	blx	r3
}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40000800 	.word	0x40000800
 8001858:	20000448 	.word	0x20000448

0800185c <USART1_IRQHandler>:
 * 							ISR Functions
 * =====================================================================================
 */

void USART1_IRQHandler (void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8001860:	4b02      	ldr	r3, [pc, #8]	; (800186c <USART1_IRQHandler+0x10>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	4798      	blx	r3
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	200000a8 	.word	0x200000a8

08001870 <USART2_IRQHandler>:
void USART2_IRQHandler (void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8001874:	4b02      	ldr	r3, [pc, #8]	; (8001880 <USART2_IRQHandler+0x10>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	4798      	blx	r3
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	200000a8 	.word	0x200000a8

08001884 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack();
 8001888:	4b02      	ldr	r3, [pc, #8]	; (8001894 <USART3_IRQHandler+0x10>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	4798      	blx	r3
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	200000a8 	.word	0x200000a8

08001898 <__libc_init_array>:
 8001898:	b570      	push	{r4, r5, r6, lr}
 800189a:	2500      	movs	r5, #0
 800189c:	4e0c      	ldr	r6, [pc, #48]	; (80018d0 <__libc_init_array+0x38>)
 800189e:	4c0d      	ldr	r4, [pc, #52]	; (80018d4 <__libc_init_array+0x3c>)
 80018a0:	1ba4      	subs	r4, r4, r6
 80018a2:	10a4      	asrs	r4, r4, #2
 80018a4:	42a5      	cmp	r5, r4
 80018a6:	d109      	bne.n	80018bc <__libc_init_array+0x24>
 80018a8:	f000 f81a 	bl	80018e0 <_init>
 80018ac:	2500      	movs	r5, #0
 80018ae:	4e0a      	ldr	r6, [pc, #40]	; (80018d8 <__libc_init_array+0x40>)
 80018b0:	4c0a      	ldr	r4, [pc, #40]	; (80018dc <__libc_init_array+0x44>)
 80018b2:	1ba4      	subs	r4, r4, r6
 80018b4:	10a4      	asrs	r4, r4, #2
 80018b6:	42a5      	cmp	r5, r4
 80018b8:	d105      	bne.n	80018c6 <__libc_init_array+0x2e>
 80018ba:	bd70      	pop	{r4, r5, r6, pc}
 80018bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018c0:	4798      	blx	r3
 80018c2:	3501      	adds	r5, #1
 80018c4:	e7ee      	b.n	80018a4 <__libc_init_array+0xc>
 80018c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018ca:	4798      	blx	r3
 80018cc:	3501      	adds	r5, #1
 80018ce:	e7f2      	b.n	80018b6 <__libc_init_array+0x1e>
 80018d0:	08001904 	.word	0x08001904
 80018d4:	08001904 	.word	0x08001904
 80018d8:	08001904 	.word	0x08001904
 80018dc:	08001908 	.word	0x08001908

080018e0 <_init>:
 80018e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018e2:	bf00      	nop
 80018e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018e6:	bc08      	pop	{r3}
 80018e8:	469e      	mov	lr, r3
 80018ea:	4770      	bx	lr

080018ec <_fini>:
 80018ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ee:	bf00      	nop
 80018f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018f2:	bc08      	pop	{r3}
 80018f4:	469e      	mov	lr, r3
 80018f6:	4770      	bx	lr
